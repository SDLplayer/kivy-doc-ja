# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.9.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-02 17:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/guide/widgets.rst:4
msgid "Widgets"
msgstr ""

#: ../../source/guide/widgets.rst:41
msgid "Introduction to Widget"
msgstr ""

#: ../../source/guide/widgets.rst:43
msgid ""
"A |Widget| is the base building block of GUI interfaces in Kivy. It "
"provides a |Canvas| that can be used to draw on screen. It receives "
"events and reacts to them. For a in-depth explanation about the |Widget| "
"class, look at the module documentation."
msgstr ""

#: ../../source/guide/widgets.rst:49
msgid "Manipulating the Widget tree"
msgstr ""

#: ../../source/guide/widgets.rst:51
msgid ""
"Widgets in Kivy are organized in trees. Your application has a `root "
"widget`, which usually has |children| that can have |children| of their "
"own. Children of a widget are represented as the |children| attribute, a "
"Kivy |ListProperty|."
msgstr ""

#: ../../source/guide/widgets.rst:56
msgid "The widget tree can be manipulated with the following methods:"
msgstr ""

#: ../../source/guide/widgets.rst:58
msgid ":meth:`~kivy.uix.widget.Widget.add_widget`: add a widget as a child"
msgstr ""

#: ../../source/guide/widgets.rst:59
msgid ""
":meth:`~kivy.uix.widget.Widget.remove_widget`: remove a widget from the "
"children list"
msgstr ""

#: ../../source/guide/widgets.rst:61
msgid ""
":meth:`~kivy.uix.widget.Widget.clear_widgets`: remove all children from a"
" widget"
msgstr ""

#: ../../source/guide/widgets.rst:64
msgid "For example, if you want to add a button inside a BoxLayout, you can do::"
msgstr ""

#: ../../source/guide/widgets.rst:70
msgid ""
"The button is added to layout: the button's parent property will be set "
"to layout; the layout will have the button added to its children list. To"
" remove the button from the layout::"
msgstr ""

#: ../../source/guide/widgets.rst:76
msgid ""
"With removal, the button's parent property will be set to None, and the "
"layout will have button removed from its children list."
msgstr ""

#: ../../source/guide/widgets.rst:79
msgid ""
"If you want to clear all the children inside a widget, use "
":meth:`~kivy.uix.widget.Widget.clear_widgets` method::"
msgstr ""

#: ../../source/guide/widgets.rst:86
msgid ""
"Never manipulate the children list yourself, unless you really know what "
"you are doing. The widget tree is associated with a graphic tree. For "
"example, if you add a widget into the children list without adding its "
"canvas to the graphics tree, the widget will be a child, yes, but nothing"
" will be drawn on the screen. Moreover, you might have issues on further "
"calls of add_widget, remove_widget and clear_widgets."
msgstr ""

#: ../../source/guide/widgets.rst:94
msgid "Traversing the Tree"
msgstr ""

#: ../../source/guide/widgets.rst:96
msgid ""
"The Widget class instance's :attr:`~kivy.uix.widget.Widget.children` list"
" property contains all the children. You can easily traverse the tree by "
"doing::"
msgstr ""

#: ../../source/guide/widgets.rst:104
msgid ""
"However, this must be used carefully. If you intend to modify the "
"children list with one of the methods shown in the previous section, you "
"must use a copy of the list like this::"
msgstr ""

#: ../../source/guide/widgets.rst:114
msgid ""
"Widgets don't influence the size/pos of their children by default. The "
"|pos| attribute is the absolute position in screen co-ordinates (unless, "
"you use the |RelativeLayout|. More on that later) and |size|, is an "
"absolute size."
msgstr ""

#: ../../source/guide/widgets.rst:119
msgid "Widgets Z Index"
msgstr ""

#: ../../source/guide/widgets.rst:121
msgid ""
"The order of widget drawing is based on the widget's position in the "
"widget tree. The :attr:`~kivy.uix.widget.Widget.add_widget` method takes "
"an `index` parameter which can be used to specify it's position in the "
"widget tree::"
msgstr ""

#: ../../source/guide/widgets.rst:128
msgid ""
"The lower indexed widgets will be drawn above those with a higher index. "
"Keep in mind that the default for `index` is 0, so widgets added later "
"are drawn on top of the others unless specified otherwise."
msgstr ""

#: ../../source/guide/widgets.rst:133
msgid "Organize with Layouts"
msgstr ""

#: ../../source/guide/widgets.rst:135
msgid ""
"|Layout| is a special kind of widget that controls the size and position "
"of its children. There are different kinds of layouts, allowing for "
"different automatic organization of their children. Layouts use "
"|size_hint| and |pos_hint| properties to determine the |size| and |pos| "
"of their |children|."
msgstr ""

#: ../../source/guide/widgets.rst:140
msgid ""
"**BoxLayout**: Arranges widgets in an adjacent manner (either vertically "
"or horizontally) manner, to fill all the space. The size_hint property of"
" children can be used to change proportions allowed to each child, or set"
" fixed size for some of them."
msgstr ""

#: ../../source/guide/widgets.rst:162
msgid ""
"**GridLayout**: Arranges widgets in a grid. You must specify at least one"
" dimension of the grid so kivy can compute the size of the elements and "
"how to arrange them."
msgstr ""

#: ../../source/guide/widgets.rst:166
msgid ""
"**StackLayout**: Arranges widgets adjacent to one another, but with a set"
" size in one of the dimensions, without trying to make them fit within "
"the entire space. This is useful to display children of the same "
"predefined size."
msgstr ""

#: ../../source/guide/widgets.rst:171
msgid ""
"**AnchorLayout**: A simple layout only caring about children positions. "
"It allows putting the children at a position relative to a border of the "
"layout. `size_hint` is not honored."
msgstr ""

#: ../../source/guide/widgets.rst:176
msgid ""
"**FloatLayout**: Allows placing children with arbitrary locations and "
"size, either absolute or relative to the layout size. Default size_hint "
"(1, 1) will make every child the same size as the whole layout, so you "
"probably want to change this value if you have more than one child. You "
"can set size_hint to (None, None) to use absolute size with `size`. This "
"widget honors `pos_hint` also, which as a dict setting position relative "
"to layout position."
msgstr ""

#: ../../source/guide/widgets.rst:184
msgid ""
"**RelativeLayout**: Behaves just like FloatLayout, except children "
"positions are relative to layout position, not the screen."
msgstr ""

#: ../../source/guide/widgets.rst:188
msgid ""
"Examine the documentation of the individual layouts for a more in-depth "
"understanding."
msgstr ""

#: ../../source/guide/widgets.rst:191
msgid "|size_hint| and |pos_hint|:"
msgstr ""

#: ../../source/guide/widgets.rst:193
msgid "|FloatLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:194
msgid "|BoxLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:195
msgid "|GridLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:196
msgid "|StackLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:197
msgid "|RelativeLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:198
msgid "|AnchorLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:200
msgid ""
"|size_hint| is a |ReferenceListProperty| of |size_hint_x| and "
"|size_hint_y|. It accepts values from `0` to `1` or `None` and defaults "
"to `(1, 1)`. This signifies that if the widget is in a layout, the layout"
" will allocate it as much place as possible in both directions (relative "
"to the layouts size)."
msgstr ""

#: ../../source/guide/widgets.rst:206
msgid ""
"Setting |size_hint| to (0.5, 0.8), for example, will make the widget 50% "
"the width and 80% the height of available size for the |widget| inside a "
"|layout|."
msgstr ""

#: ../../source/guide/widgets.rst:209
msgid "Consider the following example:"
msgstr ""

#: ../../source/guide/widgets.rst:220
msgid "load kivy catalog::"
msgstr ""

#: ../../source/guide/widgets.rst:225
msgid ""
"Replace $KIVYDIR with the directory of your installation of Kivy. Click "
"on the button labeled `Box Layout` from the left. Now paste the code from"
" above into the editor panel on the right."
msgstr ""

#: ../../source/guide/widgets.rst:231
#, python-format
msgid ""
"As you can see from the image above, the `Button` takes up 100% of the "
"layout |size|."
msgstr ""

#: ../../source/guide/widgets.rst:234
#, python-format
msgid ""
"Changing the |size_hint_x|/|size_hint_y| to .5 will make the |widget| "
"take 50% of the |layout| |width|/|height|."
msgstr ""

#: ../../source/guide/widgets.rst:239
#, python-format
msgid ""
"You can see here that, although we specify |size_hint_x| and "
"|size_hint_y| both to be .5, only |size_hint_x| seems to be honored. That"
" is because |BoxLayout| controls the |size_hint_y| when |orientation| is "
"`vertical` and |size_hint_x| when |orientation| is 'horizontal'. The "
"controlled dimension's size is calculated depending upon the total no. of"
" |children| in the |BoxLayout|. In this example, one child has "
"|size_hint_y| controlled (.5/.5 = 1). Thus, the widget takes 100% of the "
"parent layout's height."
msgstr ""

#: ../../source/guide/widgets.rst:247
msgid "Let's add another |Button| to the |layout| and see what happens."
msgstr ""

#: ../../source/guide/widgets.rst:251
msgid ""
"|BoxLayout| by its very nature divides the available space between its "
"|children| equally. In our example, the proportion is 50-50, because we "
"have two |children|. Let's use size_hint on one of the children and see "
"the results."
msgstr ""

#: ../../source/guide/widgets.rst:257
msgid ""
"If a child specifies |size_hint|, this specifies how much space the "
"|Widget| will take out of the |size| given to it by the |BoxLayout|. In "
"our example, the first |Button| specifies .5 for |size_hint_x|. The space"
" for the widget is calculated like so::"
msgstr ""

#: ../../source/guide/widgets.rst:267
#, python-format
msgid ""
"The rest of the BoxLayout's |width| is divided among the rest of the "
"|children|. In our example, this means the second |Button| takes up "
"66.66% of the |layout| |width|."
msgstr ""

#: ../../source/guide/widgets.rst:271
msgid "Experiment with |size_hint| to get comfortable with it."
msgstr ""

#: ../../source/guide/widgets.rst:273
msgid ""
"If you want to control the absolute |size| of a |Widget|, you can set "
"|size_hint_x|/|size_hint_y| or both to `None` so that the widget's "
"|width| and or |height| attributes will be honored."
msgstr ""

#: ../../source/guide/widgets.rst:277
msgid ""
"|pos_hint| is a dict, which defaults to empty. As for |size_hint|, "
"layouts honor |pos_hint| differently, but generally you can add values to"
" any of the |pos| attributes (|x|, |y|, |left|, |top|, |center_x|, "
"|center_y|) to have the |Widget| positioned relative to its |parent|."
msgstr ""

#: ../../source/guide/widgets.rst:282
msgid ""
"Let's experiment with the following code in kivycatalog to understand "
"|pos_hint| visually:"
msgstr ""

#: ../../source/guide/widgets.rst:302
msgid "This gives us:"
msgstr ""

#: ../../source/guide/widgets.rst:306
msgid ""
"As with |size_hint|, you should experiment with |pos_hint| to understand "
"the effect it has on the widget positions."
msgstr ""

#: ../../source/guide/widgets.rst:312
msgid "Adding a Background to a Layout"
msgstr ""

#: ../../source/guide/widgets.rst:314
msgid "One of the frequently asked questions about layouts is:::"
msgstr ""

#: ../../source/guide/widgets.rst:318
msgid ""
"Layouts by their nature have no visual representation: they have no "
"canvas instructions by default. However you can add canvas instructions "
"to a layout instance easily, as with adding a colored background:"
msgstr ""

#: ../../source/guide/widgets.rst:322
msgid "In Python::"
msgstr ""

#: ../../source/guide/widgets.rst:331
msgid ""
"Unfortunately, this will only draw a rectangle at the layout's initial "
"position and size. To make sure the rect is drawn inside the layout, when"
" the layout size/pos changes, we need to listen to any changes and update"
" the rectangles size and pos. We can do that as follows::"
msgstr ""

#: ../../source/guide/widgets.rst:348
msgid "In kv:"
msgstr ""

#: ../../source/guide/widgets.rst:361
msgid ""
"The kv declaration sets an implicit binding: the last two kv lines ensure"
" that the |pos| and |size| values of the rectangle will update when the "
"|pos| of the |FloatLayout| changes."
msgstr ""

#: ../../source/guide/widgets.rst:365
msgid "Now we put the snippets above into the shell of Kivy App."
msgstr ""

#: ../../source/guide/widgets.rst:367
msgid "Pure Python way::"
msgstr ""

#: ../../source/guide/widgets.rst:407 ../../source/guide/widgets.rst:501
msgid "Using the kv Language::"
msgstr ""

#: ../../source/guide/widgets.rst:436 ../../source/guide/widgets.rst:548
msgid "Both of the Apps should look something like this:"
msgstr ""

#: ../../source/guide/widgets.rst:441
msgid "Add a color to the background of a **custom layouts rule/class**"
msgstr ""

#: ../../source/guide/widgets.rst:443
msgid ""
"The way we add background to the layout's instance can quickly become "
"cumbersome if we need to use multiple layouts. To help with this, you can"
" subclass the Layout and create your own layout that adds a background."
msgstr ""

#: ../../source/guide/widgets.rst:447
msgid "Using Python::"
msgstr ""

#: ../../source/guide/widgets.rst:552
msgid ""
"Defining the background in the custom layout class, assures that it will "
"be used in every instance of CustomLayout."
msgstr ""

#: ../../source/guide/widgets.rst:555
msgid ""
"Now, to add an image or color to the background of a built-in Kivy "
"layout, **globally**, we need to override the kv rule for the layout in "
"question. Consider GridLayout::"
msgstr ""

#: ../../source/guide/widgets.rst:568
msgid "Then, when we put this snippet into a Kivy app::"
msgstr ""

#: ../../source/guide/widgets.rst:618
msgid "The result should look something like this:"
msgstr ""

#: ../../source/guide/widgets.rst:622
msgid ""
"As we are overriding the rule of the class GridLayout, any use of this "
"class in our app will display that image."
msgstr ""

#: ../../source/guide/widgets.rst:625
msgid "How about an **Animated background**?"
msgstr ""

#: ../../source/guide/widgets.rst:627
msgid ""
"You can set the drawing instructions like "
"Rectangle/BorderImage/Ellipse/... to use a particular texture::"
msgstr ""

#: ../../source/guide/widgets.rst:633
msgid "We use this to display an animated background::"
msgstr ""

#: ../../source/guide/widgets.rst:695
msgid "To try to understand what is happening here, start from line 13::"
msgstr ""

#: ../../source/guide/widgets.rst:699
msgid ""
"This specifies that the `texture` property of `BorderImage` will be "
"updated whenever the `texture` property of `background_image` updates. We"
" define the background_image property at line 40::"
msgstr ""

#: ../../source/guide/widgets.rst:705
msgid ""
"This sets up `background_image` as an |ObjectProperty| in which we add an"
" |Image| widget. An image widget has a `texture` property; where you see "
"`self.background_image.texture`, this sets a reference, `texture`, to "
"this property. The |Image| widget supports animation: the texture of the "
"image is updated whenever the animation changes, and the texture of "
"BorderImage instruction is updated in the process."
msgstr ""

#: ../../source/guide/widgets.rst:712
msgid ""
"You can also just blit custom data to the texture. For details, look at "
"the documention of :class:`~kivy.graphics.texture.Texture`."
msgstr ""

#: ../../source/guide/widgets.rst:716
msgid "Nesting Layouts"
msgstr ""

#: ../../source/guide/widgets.rst:718
msgid "Yes! It is quite fun to see how extensible the process can be."
msgstr ""

#: ../../source/guide/widgets.rst:722
msgid "Size and position metrics"
msgstr ""

#: ../../source/guide/widgets.rst:736
msgid ""
"Kivy's default unit for length is the pixel, all sizes and positions are "
"expressed in it by default. You can express them in other units, which is"
" useful to achieve better consistency across devices (they get converted "
"to the size in pixels automatically)."
msgstr ""

#: ../../source/guide/widgets.rst:741
msgid ""
"Available units are |pt|, |mm|, |cm|, |in|, |dp| and |sp|. You can learn "
"about their usage in the |metrics| documentation."
msgstr ""

#: ../../source/guide/widgets.rst:744
msgid ""
"You can also experiment with the |screen| usage to simulate various "
"devices screens for your application."
msgstr ""

#: ../../source/guide/widgets.rst:748
msgid "Screen Separation with Screen Manager"
msgstr ""

#: ../../source/guide/widgets.rst:750
msgid ""
"If your application is composed of various screens, you likely want an "
"easy way to navigate from one |Screen| to another. Fortunately, there is "
"the |ScreenManager| class, that allows you to define screens separately, "
"and to set the |Transitions| from one to another."
msgstr ""

