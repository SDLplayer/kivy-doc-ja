# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.9.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-02 17:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/guide/widgets.rst:4
msgid "Widgets"
msgstr ""

#: ../../source/guide/widgets.rst:41
msgid "Introduction to Widget"
msgstr "Widgetの紹介"

#: ../../source/guide/widgets.rst:43
msgid ""
"A |Widget| is the base building block of GUI interfaces in Kivy. It "
"provides a |Canvas| that can be used to draw on screen. It receives "
"events and reacts to them. For a in-depth explanation about the |Widget| "
"class, look at the module documentation."
msgstr ""
"|Widget|はKivyのGUIインタフェースの基本ビルディング・ブロックです。"
"|Canvas|に提供され、画面の描画使用できます"
"Widgetはイベントを受信し、反応します"
"詳細な説明については|Widget|クラス、またはモジュールのドキュメントを見てください。"

#: ../../source/guide/widgets.rst:49
msgid "Manipulating the Widget tree"
msgstr "Widgetツリーの操作―"

#: ../../source/guide/widgets.rst:51
msgid ""
"Widgets in Kivy are organized in trees. Your application has a `root "
"widget`, which usually has |children| that can have |children| of their "
"own. Children of a widget are represented as the |children| attribute, a "
"Kivy |ListProperty|."
msgstr ""
"KivyのWidgetsはツリー構造をしています。"
"アプリケーションは`root widget`を持っており、`root widget`は独自の |children| を持ち使用できます。"
"widgerのchildrenは、|children| アトリビュート、Kivy |ListProperty| で表示されます。"

#: ../../source/guide/widgets.rst:56
msgid "The widget tree can be manipulated with the following methods:"
msgstr "widgetツリーは、以下の方法で操作ですきます、"

#: ../../source/guide/widgets.rst:58
msgid ":meth:`~kivy.uix.widget.Widget.add_widget`: add a widget as a child"
msgstr ":meth:`~kivy.uix.widget.Widget.add_widget`: 子としてwidget に追加"
"

#: ../../source/guide/widgets.rst:59
msgid ""
":meth:`~kivy.uix.widget.Widget.remove_widget`: remove a widget from the "
"children list"
msgstr ":meth:`~kivy.uix.widget.Widget.remove_widget`: 子のリストからwidgetを削除します"

#: ../../source/guide/widgets.rst:61
msgid ""
":meth:`~kivy.uix.widget.Widget.clear_widgets`: remove all children from a"
" widget"
msgstr ":meth:`~kivy.uix.widget.Widget.clear_widgets`: widgetからすべての子を削除します"

#: ../../source/guide/widgets.rst:64
msgid "For example, if you want to add a button inside a BoxLayout, you can do::"
msgstr "例えばBoxLayoutの内側にボタンを追加したい場合は以下のようにします。"

#: ../../source/guide/widgets.rst:70
msgid ""
"The button is added to layout: the button's parent property will be set "
"to layout; the layout will have the button added to its children list. To"
" remove the button from the layout::"
msgstr ""
"ボタンがレイアウトに追加されます"
"ボタンの親プロパティは、レイアウトに設定されます。"
"レイアウトは、その子のリストに追加したボタンを持ちます。"
"レイアウトからボタンを削除するには："

#: ../../source/guide/widgets.rst:76
msgid ""
"With removal, the button's parent property will be set to None, and the "
"layout will have button removed from its children list."
msgstr ""
"削除すると、ボタンの親プロパティがNoneに設定され、レイアウトは子のリストからボタンを削除します。"
"ウィジェット内のすべての子たちをクリアしたい場合は、clear_widgets()メソッドを使用："

#: ../../source/guide/widgets.rst:79
msgid ""
"If you want to clear all the children inside a widget, use "
":meth:`~kivy.uix.widget.Widget.clear_widgets` method::"
msgstr ""

#: ../../source/guide/widgets.rst:86
msgid ""
"Never manipulate the children list yourself, unless you really know what "
"you are doing. The widget tree is associated with a graphic tree. For "
"example, if you add a widget into the children list without adding its "
"canvas to the graphics tree, the widget will be a child, yes, but nothing"
" will be drawn on the screen. Moreover, you might have issues on further "
"calls of add_widget, remove_widget and clear_widgets."
msgstr ""
"本当に何をしているか知っている限り、子たちが自分自身をリスト操作することはありません。"
"widgetツリーは、graphicツリーに関連付けられています"
"graphicツリーにそのキャンバスを追加せず、子のリストにwidgetを追加した場合、widgetの子になりますが、画面上に描画されません。"
"add_widget、remove_widget、clear_widgetの呼び出しに問題がある可能性があります。"


#: ../../source/guide/widgets.rst:94
msgid "Traversing the Tree"
msgstr "ツリーの横断について"

#: ../../source/guide/widgets.rst:96
msgid ""
"The Widget class instance's :attr:`~kivy.uix.widget.Widget.children` list"
" property contains all the children. You can easily traverse the tree by "
"doing::"
msgstr "Widgetクラスのインスタンスの :attr:`~kivy.uix.widget.Widget.children` リストのプロパティは、すべての子が含まれています。 簡単にツリーを走査できます。"

#: ../../source/guide/widgets.rst:104
msgid ""
"However, this must be used carefully. If you intend to modify the "
"children list with one of the methods shown in the previous section, you "
"must use a copy of the list like this::"
msgstr ""
"しかし、これは慎重に使用する必要があります。"
"子のリストを変更する場合は、前のセクションで示したのいずれかの方法で、リストのコピーを行う必要があります。"

#: ../../source/guide/widgets.rst:114
msgid ""
"Widgets don't influence the size/pos of their children by default. The "
"|pos| attribute is the absolute position in screen co-ordinates (unless, "
"you use the |RelativeLayout|. More on that later) and |size|, is an "
"absolute size."
msgstr ""
"widgetは、デフォルトでは自分の子のsize/posには影響しません。"
" |pos| 属性は（クリーン座標での絶対位置である|RelativeLayout| を使用しない限り、 詳細は後述。）及び |size| は絶対的な大きさです。"


#: ../../source/guide/widgets.rst:119
msgid "Widgets Z Index"
msgstr "widgetの Z インデックスについて"

#: ../../source/guide/widgets.rst:121
msgid ""
"The order of widget drawing is based on the widget's position in the "
"widget tree. The :attr:`~kivy.uix.widget.Widget.add_widget` method takes "
"an `index` parameter which can be used to specify it's position in the "
"widget tree::"
msgstr ""
"widgetの描画の順序は、widgetツリー内のwidgetの位置に基づいています。"
":attr:`~kivy.uix.widget.Widget.add_widget` の方法は、widgetツリー内の"
"位置を指定するために使用できる `index` パラメータを取ります"

#: ../../source/guide/widgets.rst:128
msgid ""
"The lower indexed widgets will be drawn above those with a higher index. "
"Keep in mind that the default for `index` is 0, so widgets added later "
"are drawn on top of the others unless specified otherwise."
msgstr ""
"低いインデックス付きのwidgetは、高いインデックスを持つものの上に描画されます。"
"特に断りのない限り、後から追加されたwidgetは他よりも上に描画されるように、”
" `index` のデフォルトが0であることに注意してください。"

#: ../../source/guide/widgets.rst:133
msgid "Organize with Layouts"
msgstr "レイアウトの編成について"

#: ../../source/guide/widgets.rst:135
msgid ""
"|Layout| is a special kind of widget that controls the size and position "
"of its children. There are different kinds of layouts, allowing for "
"different automatic organization of their children. Layouts use "
"|size_hint| and |pos_hint| properties to determine the |size| and |pos| "
"of their |children|."
msgstr ""
"|Layout| は子のサイズや位置を制御するwidgetの特別な種類です。"
"子たちの自動編成を可能にする異なるレイアウトの種類があります。"
" レイアウトは |size_hint| と |pos_hint| 使用し 、自身の |children| の |size| と |pos| プロパティを決定します。"


#: ../../source/guide/widgets.rst:140
msgid ""
"**BoxLayout**: Arranges widgets in an adjacent manner (either vertically "
"or horizontally) manner, to fill all the space. The size_hint property of"
" children can be used to change proportions allowed to each child, or set"
" fixed size for some of them."
msgstr ""
"**BoxLayout**：すべてのスペースを埋めるために、widgetを隣接（垂直または水平）するようにして配置する方法です。
" 子のsize_hintプロパティは、各子らに許容割合の変更、または一部の固定サイズを設定することに使用します。"

#: ../../source/guide/widgets.rst:162
msgid ""
"**GridLayout**: Arranges widgets in a grid. You must specify at least one"
" dimension of the grid so kivy can compute the size of the elements and "
"how to arrange them."
msgstr ""
"**GridLayout**: グリッドにウィジェットを配置します。"
"kivyでは、要素のサイズとどのように配置するかを計算できるように、"
"グリッドの寸法を少なくとも1つ指定する必要があります。"



#: ../../source/guide/widgets.rst:166
msgid ""
"**StackLayout**: Arranges widgets adjacent to one another, but with a set"
" size in one of the dimensions, without trying to make them fit within "
"the entire space. This is useful to display children of the same "
"predefined size."
msgstr ""
"**StackLayout**: 互いに隣接するwidgetsを配置しますが、いずれかの大きさに設定されたサイズで全体に収まるようにします。"
"これは、同じサイズの子らを表示するのに便利です。"

#: ../../source/guide/widgets.rst:171
msgid ""
"**AnchorLayout**: A simple layout only caring about children positions. "
"It allows putting the children at a position relative to a border of the "
"layout. `size_hint` is not honored."
msgstr ""
"**AnchorLayout**: シンプルなレイアウトで子らの位置のみをを気にします。"
"レイアウトの境界の相対的な位置に子らを配置できます。`size_hint` は適用されません。"


#: ../../source/guide/widgets.rst:176
msgid ""
"**FloatLayout**: Allows placing children with arbitrary locations and "
"size, either absolute or relative to the layout size. Default size_hint "
"(1, 1) will make every child the same size as the whole layout, so you "
"probably want to change this value if you have more than one child. You "
"can set size_hint to (None, None) to use absolute size with `size`. This "
"widget honors `pos_hint` also, which as a dict setting position relative "
"to layout position."
msgstr ""
"**FloatLayout**: 絶対座標またはレイアウトのサイズに対してのいずれかで、任意の位置と大きさで子らを配置できます。
" デフォルトのsize_hintは(1、1）でレイアウト全体でと子らは同じサイズになりますので、"
"複数の子がいる場合、この値を変更したいはずです。"
"`size` のsize_hintに（None、None）を設定することで絶対的なサイズを使用できます。W
"このwidgetをpos_hintに反映、またはdictとして位置に対しての相対位置を設定します。"


#: ../../source/guide/widgets.rst:184
msgid ""
"**RelativeLayout**: Behaves just like FloatLayout, except children "
"positions are relative to layout position, not the screen."
msgstr ""
"**RelativeLayout**: 子の位置を、レイアウト位置ではなく、画面を基準にしている以外は、FloatLayoutと同じように動作します。"

#: ../../source/guide/widgets.rst:188
msgid ""
"Examine the documentation of the individual layouts for a more in-depth "
"understanding."
msgstr "レイアウトのより深い理解のために各ドキュメントを参照します。"

#: ../../source/guide/widgets.rst:191
msgid "|size_hint| and |pos_hint|:"
msgstr "|size_hint| と |pos_hint|"

#: ../../source/guide/widgets.rst:193
msgid "|FloatLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:194
msgid "|BoxLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:195
msgid "|GridLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:196
msgid "|StackLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:197
msgid "|RelativeLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:198
msgid "|AnchorLayout|"
msgstr ""

#: ../../source/guide/widgets.rst:200
msgid ""
"|size_hint| is a |ReferenceListProperty| of |size_hint_x| and "
"|size_hint_y|. It accepts values from `0` to `1` or `None` and defaults "
"to `(1, 1)`. This signifies that if the widget is in a layout, the layout"
" will allocate it as much place as possible in both directions (relative "
"to the layouts size)."
msgstr ""
"|size_hint| は |ReferenceListProperty| の |size_hint_x| と |size_hint_y| です。"
"値の範囲は `0` から `1` または `None` で、デフォルトは `(1, 1)` です。"


#: ../../source/guide/widgets.rst:206
msgid ""
"Setting |size_hint| to (0.5, 0.8), for example, will make the widget 50% "
"the width and 80% the height of available size for the |widget| inside a "
"|layout|."
msgstr ""
"|size_hint| が (0.5, 0.8)に設定されている場合は、|layout| 内部の |widget| で、"
"利用できるサイズの範囲からwidgetの幅が50%、高さが80%に設定されます。"

#: ../../source/guide/widgets.rst:209
msgid "Consider the following example:"
msgstr "次の例を考えてみます。"

#: ../../source/guide/widgets.rst:220
msgid "load kivy catalog::"
msgstr "kivy catalogを実行します"

#: ../../source/guide/widgets.rst:225
msgid ""
"Replace $KIVYDIR with the directory of your installation of Kivy. Click "
"on the button labeled `Box Layout` from the left. Now paste the code from"
" above into the editor panel on the right."
msgstr ""
"$KIVYDIR Kivyのインストールディレクトリに書き換えてください。"
"左から`Box Layout`ボタンをクリックしてください。"
"今すぐ右側のエディタパネルに上記のコードを貼り付けます。"

#: ../../source/guide/widgets.rst:231
#, python-format
msgid ""
"As you can see from the image above, the `Button` takes up 100% of the "
"layout |size|."
msgstr ""
"上の画像からわかるように`Button`がレイアウト |size| の100%になります。"

#: ../../source/guide/widgets.rst:234
#, python-format
msgid ""
"Changing the |size_hint_x|/|size_hint_y| to .5 will make the |widget| "
"take 50% of the |layout| |width|/|height|."
msgstr ""
"|size_hint_x|/|size_hint_y| を「.5 」に変更することで |widget| の"
" |layout| を |width|/|height| を50%にします。"


#: ../../source/guide/widgets.rst:239
#, python-format
msgid ""
"You can see here that, although we specify |size_hint_x| and "
"|size_hint_y| both to be .5, only |size_hint_x| seems to be honored. That"
" is because |BoxLayout| controls the |size_hint_y| when |orientation| is "
"`vertical` and |size_hint_x| when |orientation| is 'horizontal'. The "
"controlled dimension's size is calculated depending upon the total no. of"
" |children| in the |BoxLayout|. In this example, one child has "
"|size_hint_y| controlled (.5/.5 = 1). Thus, the widget takes 100% of the "
"parent layout's height."
msgstr ""
"|size_hint_x| と|size_hint_y| の両方を「.5」にしたものの |size_hint_x| のみが適用されたように見えます"
"理由は |orientation| が `vertical` の時、|BoxLayout| がコントロールするのは|size_hint_y| だからで"
"|orientation| が 'horizontal' の時は |size_hint_x| です。"
"幅と高さのsizeは |BoxLayout| の |children| の合計に応じて計算されます。"
"この例では子は一人で |size_hint_y| をコントロール(.5/.5 = 1)します。"
"このように、widgetは親のレイアウトの高さの100％を取ります。"

#: ../../source/guide/widgets.rst:247
msgid "Let's add another |Button| to the |layout| and see what happens."
msgstr "他の |layout| の |Button| を選択し何が起きるか見てみましょう。"

#: ../../source/guide/widgets.rst:251
msgid ""
"|BoxLayout| by its very nature divides the available space between its "
"|children| equally. In our example, the proportion is 50-50, because we "
"have two |children|. Let's use size_hint on one of the children and see "
"the results."
msgstr ""
"|BoxLayout| はまさにその性質によって、利用可能な空間を |children| で均等に分割します。"
"例では2つの |children| があるので、割合は50-50になります。"
"子らにsize_hintを「1」を使用して結果を見てみましょう。"


#: ../../source/guide/widgets.rst:257
msgid ""
"If a child specifies |size_hint|, this specifies how much space the "
"|Widget| will take out of the |size| given to it by the |BoxLayout|. In "
"our example, the first |Button| specifies .5 for |size_hint_x|. The space"
" for the widget is calculated like so::"
msgstr ""
"|size_hint| が指定されている場合は、 |BoxLayout| より|Widget|にどれくらい |size| が指定されます。"
"この例では最初の |Button| のために |size_hint_x| に「.5」を指定します。widegetのためのスペースはこのように計算されます。"

#: ../../source/guide/widgets.rst:267
#, python-format
msgid ""
"The rest of the BoxLayout'sis divided among the rest of the "
"|children|. In our example, this means the second |Button| takes up "
"66.66% of the |layout| |width|."
msgstr ""
"残りの |children| はBoxLayout内で分割されます。"
"例では |Button| は |layout| |width| で66.66%を占めます。"


#: ../../source/guide/widgets.rst:271
msgid "Experiment with |size_hint| to get comfortable with it."
msgstr "|size_hint| に慣れるための実験です。"

#: ../../source/guide/widgets.rst:273
msgid ""
"If you want to control the absolute |size| of a |Widget|, you can set "
"|size_hint_x|/|size_hint_y| or both to `None` so that the widget's "
"|width| and or |height| attributes will be honored."
msgstr ""
"|Widget| の |size| を完全にコントロールするには、|size_hint_x|/|size_hint_y|に `None` を指定し、"
"widgetの |width| また |height| 属性が反映されます。"


#: ../../source/guide/widgets.rst:277
msgid ""
"|pos_hint| is a dict, which defaults to empty. As for |size_hint|, "
"layouts honor |pos_hint| differently, but generally you can add values to"
" any of the |pos| attributes (|x|, |y|, |left|, |top|, |center_x|, "
"|center_y|) to have the |Widget| positioned relative to its |parent|."
msgstr ""
"|pos_hint| は空のdict形式です。"
" |pos_hint| のレイアウトの反映は  |size_hint| とは異なりますが、|parent| の |Widget| 位置設定に対して、"
"一般的に  |pos|   属性 (|x|, |y|, |left|, |top|, |center_x|, "
"|center_y|)のいずれかに対して値を設定できます。"


#: ../../source/guide/widgets.rst:282
msgid ""
"Let's experiment with the following code in kivycatalog to understand "
"|pos_hint| visually:"
msgstr "|pos_hint| を視覚的に理解するためにkivycatalogに次のコードを試してみましょう。"

#: ../../source/guide/widgets.rst:302
msgid "This gives us:"
msgstr "これは以下の効果を与えます。"

#: ../../source/guide/widgets.rst:306
msgid ""
"As with |size_hint|, you should experiment with |pos_hint| to understand "
"the effect it has on the widget positions."
msgstr ""
"|size_hint| と同様に 、 |pos_hint| を試してみて、widgetの位置に与える影響を理解します。"

#: ../../source/guide/widgets.rst:312
msgid "Adding a Background to a Layout"
msgstr "背景のレイアウトを追加する"

#: ../../source/guide/widgets.rst:314
msgid "One of the frequently asked questions about layouts is:::"
msgstr "レイアウトに関するよくある質問の1つは、以下のとおり。"

#: ../../source/guide/widgets.rst:318
msgid ""
"Layouts by their nature have no visual representation: they have no "
"canvas instructions by default. However you can add canvas instructions "
"to a layout instance easily, as with adding a colored background:"
msgstr ""
"レイアウトはその性質から視覚的な表現を持っていない："
"デフォルトでは何のキャンバス命令を持っていません。 しかし、色付きの背景を追加する場合と同様に、"
"簡単にレイアウトのインスタンスにキャンバス命令を追加することができます。"


#: ../../source/guide/widgets.rst:322
msgid "In Python::"
msgstr "Pythonの場合:"

#: ../../source/guide/widgets.rst:331
msgid ""
"Unfortunately, this will only draw a rectangle at the layout's initial "
"position and size. To make sure the rect is drawn inside the layout, when"
" the layout size/pos changes, we need to listen to any changes and update"
" the rectangles size and pos. We can do that as follows::"
msgstr ""
"残念ながら、これが四角形を描画する際の、初期位置とサイズ唯一のレイアウトです。 
"レイアウトのsize/posの変化は、すべての変更に耳を傾け、四角形のsizeとposを更新する必要がある場合、”
”矩形は、レイアウトの内側に描かれていることを確認します。 
"次のように行うことができます。"


#: ../../source/guide/widgets.rst:348
msgid "In kv:"
msgstr "kvの場合:"

#: ../../source/guide/widgets.rst:361
msgid ""
"The kv declaration sets an implicit binding: the last two kv lines ensure"
" that the |pos| and |size| values of the rectangle will update when the "
"|pos| of the |FloatLayout| changes."
msgstr ""
"kvの宣言は暗黙的に結合を設定します：kvの最後の2行の|pos|と |size|は |FloatLayout| "
" の |pos| が変化し、矩形の値が更新された時に確認されます。"

#: ../../source/guide/widgets.rst:365
msgid "Now we put the snippets above into the shell of Kivy App."
msgstr "Kivy Appのシェルにスニペットを置きます。"

#: ../../source/guide/widgets.rst:367
msgid "Pure Python way::"
msgstr "Pythonのみでの方法::"

#: ../../source/guide/widgets.rst:407 ../../source/guide/widgets.rst:501
msgid "Using the kv Language::"
msgstr "kv を使用した場合::"

#: ../../source/guide/widgets.rst:436 ../../source/guide/widgets.rst:548
msgid "Both of the Apps should look something like this:"
msgstr "Appsの結果は両方とも以下の様になります。"

#: ../../source/guide/widgets.rst:441
msgid "Add a color to the background of a **custom layouts rule/class**"
msgstr "**custom layouts rule/class**の背景に色を追加する"

#: ../../source/guide/widgets.rst:443
msgid ""
"The way we add background to the layout's instance can quickly become "
"cumbersome if we need to use multiple layouts. To help with this, you can"
" subclass the Layout and create your own layout that adds a background."
msgstr ""
"複数のレイアウトを使用する場合、レイアウトのインスタンスに背景を追加する場合はすぐに面倒になります。"
"これを支援するために、レイアウトをサブクラス化し、背景を追加、そして独自レイアウトを作成できます。"

#: ../../source/guide/widgets.rst:447
msgid "Using Python::"
msgstr "Pythonを使用::"

#: ../../source/guide/widgets.rst:552
msgid ""
"Defining the background in the custom layout class, assures that it will "
"be used in every instance of CustomLayout."
msgstr "カスタムレイアウトクラスの背景を定義することで、CustomLayoutのすべてのインスタンスで使用されることを保証します。"

#: ../../source/guide/widgets.rst:555
msgid ""
"Now, to add an image or color to the background of a built-in Kivy "
"layout, **globally**, we need to override the kv rule for the layout in "
"question. Consider GridLayout::"
msgstr ""
"内蔵のKivyレイアウトの背景に画像や色を追加するには、 **globally**に 、"
"問題のレイアウトのKVルールをオーバーライドする必要があります。"
"GridLayoutで考えてみます::"


#: ../../source/guide/widgets.rst:568
msgid "Then, when we put this snippet into a Kivy app::"
msgstr "Kivyアプリにスニペットを置くとき："

#: ../../source/guide/widgets.rst:618
msgid "The result should look something like this:"
msgstr "結果は次のようになります。"

#: ../../source/guide/widgets.rst:622
msgid ""
"As we are overriding the rule of the class GridLayout, any use of this "
"class in our app will display that image."
msgstr ""
"GridLayoutクラスでルールをオーバーライドしているように、"
"アプリでクラスの任意の使用は、画像を表示します。"

#: ../../source/guide/widgets.rst:625
msgid "How about an **Animated background**?"
msgstr "**Animated background**はどのように表現するか？"

#: ../../source/guide/widgets.rst:627
msgid ""
"You can set the drawing instructions like "
"Rectangle/BorderImage/Ellipse/... to use a particular texture::"
msgstr ""
"特定のテクスチャを使用するためには、"
"Rectangle/BorderImage/Ellipse/...のような描画命令を指定します::"

#: ../../source/guide/widgets.rst:633
msgid "We use this to display an animated background::"
msgstr "アニメーションの背景を表示するために以下を使用します::"

#: ../../source/guide/widgets.rst:695
msgid "To try to understand what is happening here, start from line 13::"
msgstr "何が行われている理解するために13行目から見てみます:"

#: ../../source/guide/widgets.rst:699
msgid ""
"This specifies that the `texture` property of `BorderImage` will be "
"updated whenever the `texture` property of `background_image` updates. We"
" define the background_image property at line 40::"
msgstr ""
"これは `BorderImage` の `texture` プロパティは `background_image` がアップデートのたびに"
" `texture` プロパティを更新を指定します。 "
"40行目でbackground_imageプロパティを定義します。"


#: ../../source/guide/widgets.rst:705
msgid ""
"This sets up `background_image` as an |ObjectProperty| in which we add an"
" |Image| widget. An image widget has a `texture` property; where you see "
"`self.background_image.texture`, this sets a reference, `texture`, to "
"this property. The |Image| widget supports animation: the texture of the "
"image is updated whenever the animation changes, and the texture of "
"BorderImage instruction is updated in the process."
msgstr ""
"|Image| widgetを追加した際に |ObjectProperty| に`background_image`を設定します。"
"画像widgetは`texture` プロパティを有しています。"
" `self.background_image.texture` を参照しすることで、、 `texture`を設定するプロパティの参照をします"
"  |Image| widget はアニメーションをサポートしています。"
"アニメーションの変更、およびBorderImage命令の質感がプロセスに更新されるたびに画像のテクスチャが更新されます。"

#: ../../source/guide/widgets.rst:712
msgid ""
"You can also just blit custom data to the texture. For details, look at "
"the documention of :class:`~kivy.graphics.texture.Texture`."
msgstr "またテクスチャのカスタムデータできます。"
"詳細については :class:`~kivy.graphics.texture.Texture` のドキュメントを参照してください。"

#: ../../source/guide/widgets.rst:716
msgid "Nesting Layouts"
msgstr "ネスティングレイアウト"

#: ../../source/guide/widgets.rst:718
msgid "Yes! It is quite fun to see how extensible the process can be."
msgstr "はい！ いかに拡張可能な参照するプロセスは非常に楽しいです。"

#: ../../source/guide/widgets.rst:722
msgid "Size and position metrics"
msgstr "サイズと位置の指標について"

#: ../../source/guide/widgets.rst:736
msgid ""
"Kivy's default unit for length is the pixel, all sizes and positions are "
"expressed in it by default. You can express them in other units, which is"
" useful to achieve better consistency across devices (they get converted "
"to the size in pixels automatically)."
msgstr ""
"Kivyの長さのデフォルトの単位はピクセルで、すべてのサイズと位置はデフォルトではその中で表現されます。"
"デバイス間でより良い一貫性（ピクセル単位でサイズに自動的に変換されます）を達成するために有効である、"
"他の単位で表現できます。"

#: ../../source/guide/widgets.rst:741
msgid ""
"Available units are |pt|, |mm|, |cm|, |in|, |dp| and |sp|. You can learn "
"about their usage in the |metrics| documentation."
msgstr ""
"利用可能な単位は、 |pt|, |mm|, |cm|, |in|, |dp| and |sp| です。"
"詳細は |metrics| ドキュメントを参照してください。"

#: ../../source/guide/widgets.rst:744
msgid ""
"You can also experiment with the |screen| usage to simulate various "
"devices screens for your application."
msgstr ""
"アプリケーションのための様々なデバイスの画面をシミュレートするために |screen| 使用して試せます。"

#: ../../source/guide/widgets.rst:748
msgid "Screen Separation with Screen Manager"
msgstr "スクリーン・マネージャと画面の分離について"

#: ../../source/guide/widgets.rst:750
msgid ""
"If your application is composed of various screens, you likely want an "
"easy way to navigate from one |Screen| to another. Fortunately, there is "
"the |ScreenManager| class, that allows you to define screens separately, "
"and to set the |Transitions| from one to another."
msgstr ""
"アプリケーションが各種の画面で構成されている場合は、おそらく簡単な方法としては |Screen| 別にナビゲートします。"
"幸いなことに |ScreenManager| クラスは別の画面を定義し、他の画面へは |Transitions| を設定します。"
