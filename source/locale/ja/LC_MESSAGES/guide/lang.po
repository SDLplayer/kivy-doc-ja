# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.9.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-02 17:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/guide/lang.rst:4
msgid "Kv language"
msgstr ""

#: ../../source/guide/lang.rst:7
msgid "Concept behind the language"
msgstr ""

#: ../../source/guide/lang.rst:9
msgid ""
"As your application grow more complex, it's common that the construction "
"of widget trees and explicit declaration of bindings, becomes verbose and"
" hard to maintain. The `KV` Language is a attempt to overcome these "
"short-comings."
msgstr ""

#: ../../source/guide/lang.rst:13
msgid ""
"The `KV` language (sometimes called kvlang, or kivy language), allows you"
" to create your widget tree in a declarative way and to bind widget "
"properties to each other or to callbacks in a natural manner. It allows "
"for very fast prototyping and agile changes to your UI. It also "
"facilitates a good separation between the logic of your application and "
"its User Interface."
msgstr ""

#: ../../source/guide/lang.rst:20
msgid "How to load KV"
msgstr ""

#: ../../source/guide/lang.rst:22
msgid "There are two ways to load Kv code into your application:"
msgstr ""

#: ../../source/guide/lang.rst:24
msgid "By name convention:"
msgstr ""

#: ../../source/guide/lang.rst:26
msgid ""
"Kivy looks for a Kv file with the same name as your App class in "
"lowercase,  minus \"App\" if it ends with 'App'. E.g::"
msgstr ""

#: ../../source/guide/lang.rst:31
msgid ""
"If this file defines a `Root Widget` it will be attached to the App's "
"`root` attribute and used as the base of the application widget tree."
msgstr ""

#: ../../source/guide/lang.rst:34
msgid ""
":obj:`~kivy.lang.Builder`: You can tell Kivy to directly load a string or"
" a file. If this string or file defines a root widget, it will be "
"returned by the method::"
msgstr ""

#: ../../source/guide/lang.rst:40
msgid "or::"
msgstr ""

#: ../../source/guide/lang.rst:45
msgid "Rule context"
msgstr ""

#: ../../source/guide/lang.rst:47
msgid ""
"A Kv source constitutes of `rules`, which are used to describe the "
"content of a Widget, you can have one `root` rule, and any number of "
"`class` or `template` rules."
msgstr ""

#: ../../source/guide/lang.rst:51
msgid ""
"The `root` rule is declared by declaring the class of your root widget, "
"without any indentation, followed by `:` and will be set as the `root` "
"attribute of the App instance::"
msgstr ""

#: ../../source/guide/lang.rst:57
msgid ""
"A `class` rule, declared by the name of a widget class between `< >` and "
"followed by `:`, defines how any instance of that class will be "
"graphically represented::"
msgstr ""

#: ../../source/guide/lang.rst:63
msgid ""
"Rules use indentation for delimitation, as python, indentation should be "
"of four spaces per level, like the python good practice recommendations."
msgstr ""

#: ../../source/guide/lang.rst:66
msgid "There are three keywords specific to Kv language:"
msgstr ""

#: ../../source/guide/lang.rst:68
msgid "`app`: always refers to the instance of your application."
msgstr ""

#: ../../source/guide/lang.rst:69
msgid "`root`: refers to the base widget/template in the current rule"
msgstr ""

#: ../../source/guide/lang.rst:70
msgid "`self`: always refer to the current widget"
msgstr ""

#: ../../source/guide/lang.rst:73
msgid "Special syntaxes"
msgstr ""

#: ../../source/guide/lang.rst:75
msgid "There are two special syntaxes to define values for the whole Kv context:"
msgstr ""

#: ../../source/guide/lang.rst:77
msgid "To access python modules and classes from kv, ::"
msgstr ""

#: ../../source/guide/lang.rst:83 ../../source/guide/lang.rst:95
msgid "is equivalent to::"
msgstr ""

#: ../../source/guide/lang.rst:89 ../../source/guide/lang.rst:99
msgid "in python."
msgstr ""

#: ../../source/guide/lang.rst:91
msgid "To set a global value, ::"
msgstr ""

#: ../../source/guide/lang.rst:102
msgid "Instantiate children"
msgstr ""

#: ../../source/guide/lang.rst:104
msgid ""
"To declare the widget has a child widget, instance of some class, just "
"declare this child inside the rule:"
msgstr ""

#: ../../source/guide/lang.rst:114
msgid ""
"The example above defines that our root widget, an instance of "
"`MyRootWidget`, which has a child that is an instance of the "
":class:`~kivy.uix.boxlayout.BoxLayout`.  That BoxLayout further has two "
"children, instances of the :class:`~kivy.uix.button.Button` class."
msgstr ""

#: ../../source/guide/lang.rst:119
msgid "A python equivalent of this code could be:"
msgstr ""

#: ../../source/guide/lang.rst:129
msgid "Which you may find less nice, both to read and to write."
msgstr ""

#: ../../source/guide/lang.rst:131
msgid ""
"Of course, in python, you can pass keyword arguments to your widgets at "
"creation to specify their behaviour.  For example, to set the number of "
"columns of a :mod:`~kivy.uix.gridlayout`, we would do::"
msgstr ""

#: ../../source/guide/lang.rst:137
msgid ""
"To do the same thing in kv, you can set properties of the child widget "
"directly in the rule:"
msgstr ""

#: ../../source/guide/lang.rst:145
msgid ""
"The value is evaluated as a python expression, and all the properties "
"used in the expression will be observed, that means that if you had "
"something like this in python (this assume `self` is a widget with a "
"`data` :class:`~kivy.property.ListProperty`)::"
msgstr ""

#: ../../source/guide/lang.rst:153
msgid "To have your display updated when your data change, you can now have just:"
msgstr ""

#: ../../source/guide/lang.rst:161
msgid ""
"Widget names should start with upper case letters while property names "
"should start with lower case ones. Following the `PEP8 Naming Conventions"
" <https://www.python.org/dev/peps/pep-0008/#naming-conventions>`_ is "
"encouraged."
msgstr ""

#: ../../source/guide/lang.rst:167
msgid "Event Bindings"
msgstr ""

#: ../../source/guide/lang.rst:169
msgid ""
"You can bind to events in Kv using the \":\" syntax, that is, associating"
" a callback to an event:"
msgstr ""

#: ../../source/guide/lang.rst:177
msgid "You can pass the values dispatched by the signal using the `args` keyword:"
msgstr ""

#: ../../source/guide/lang.rst:184
msgid "More complex expressions can be used, like:"
msgstr ""

#: ../../source/guide/lang.rst:190
msgid ""
"This expression listens for a change in ``center_x``, ``center_y``, and "
"``texture_size``. If one of them changes, the expression will be re-"
"evaluated to update the ``pos`` field."
msgstr ""

#: ../../source/guide/lang.rst:194
msgid ""
"You can also handle ``on_`` events inside your kv language. For example "
"the TextInput class has a ``focus`` property whose auto-generated "
"``on_focus`` event can be accessed inside the kv language like so:"
msgstr ""

#: ../../source/guide/lang.rst:205
msgid "Extend canvas"
msgstr ""

#: ../../source/guide/lang.rst:207
msgid ""
"Kv lang can be used to define the canvas instructions of your widget like"
" this:"
msgstr ""

#: ../../source/guide/lang.rst:218
msgid "And they get updated when properties values change."
msgstr ""

#: ../../source/guide/lang.rst:220
msgid "Of course you can use `canvas.before` and `canvas.after`."
msgstr ""

#: ../../source/guide/lang.rst:223
msgid "Referencing Widgets"
msgstr ""

#: ../../source/guide/lang.rst:225
msgid ""
"In a widget tree there is often a need to access/reference other widgets."
" The Kv Language provides a way to do this using id's. Think of them as "
"class level variables that can only be used in the Kv language. Consider "
"the following:"
msgstr ""

#: ../../source/guide/lang.rst:244
msgid ""
"An ``id`` is limited in scope to the rule it is declared in, so in the "
"code above ``s_but`` can not be accessed outside the <MySecondWidget> "
"rule."
msgstr ""

#: ../../source/guide/lang.rst:248
msgid ""
"An ``id`` is a ``weakref`` to the widget and not the widget itself. As a "
"consequence, storing the ``id`` is not sufficient to keep the widget from"
" being garbage collected. To demonstrate:"
msgstr ""

#: ../../source/guide/lang.rst:266
msgid ""
"Although a reference to ``label_widget`` is stored in ``MyWidget``, it is"
" not sufficient to keep the object alive once other references have been "
"removed because it's only a weakref. Therefore, after the remove button "
"is clicked (which removes any direct reference to the widget) and the "
"window is resized (which calls the garbage collector resulting in the "
"deletion of ``label_widget``), when the add button is clicked to add the "
"widget back, a ``ReferenceError: weakly-referenced object no longer "
"exists`` will be thrown."
msgstr ""

#: ../../source/guide/lang.rst:275
msgid ""
"To keep the widget alive, a direct reference to the ``label_widget`` "
"widget must be kept. This is achieved using ``id.__self__`` or "
"``label_widget.__self__`` in this case. The correct way to do this would "
"be:"
msgstr ""

#: ../../source/guide/lang.rst:285
msgid "Accessing Widgets defined inside Kv lang in your python code"
msgstr ""

#: ../../source/guide/lang.rst:287 ../../source/guide/lang.rst:421
msgid "Consider the code below in my.kv:"
msgstr ""

#: ../../source/guide/lang.rst:303 ../../source/guide/lang.rst:437
msgid "In myapp.py:"
msgstr ""

#: ../../source/guide/lang.rst:317
msgid ""
"`txt_inpt` is defined as a :class:`~kivy.properties.ObjectProperty` "
"initialized to `None` inside the Class. ::"
msgstr ""

#: ../../source/guide/lang.rst:322
msgid ""
"At this point self.txt_inpt is `None`. In Kv lang this property is "
"updated to hold the instance of the :class:`~kivy.uix.TextInput` "
"referenced by the id `txt_inpt`.::"
msgstr ""

#: ../../source/guide/lang.rst:328
msgid ""
"From this point onwards, `self.txt_inpt` holds a reference to the widget "
"identified by the id `txt_input` and can be used anywhere in the class, "
"as in the function `check_status`. In contrast to this method you could "
"also just pass the `id` to the function that needs to use it, like in "
"case of `f_but` in the code above."
msgstr ""

#: ../../source/guide/lang.rst:334
msgid ""
"There is a simpler way to access objects with `id` tags in Kv using the "
"`ids` lookup object. You can do this as follows:"
msgstr ""

#: ../../source/guide/lang.rst:348
msgid "In your python code:"
msgstr ""

#: ../../source/guide/lang.rst:358
msgid ""
"When your kv file is parsed, kivy collects all the widgets tagged with "
"id's and places them in this `self.ids` dictionary type property. That "
"means you can also iterate over these widgets and access them dictionary "
"style::"
msgstr ""

#: ../../source/guide/lang.rst:367
msgid ""
"Although the `self.ids` method is very concise, it is generally regarded "
"as 'best practise' to use the ObjectProperty. This creates a direct "
"reference, provides faster access and is more explicit."
msgstr ""

#: ../../source/guide/lang.rst:372
msgid "Dynamic Classes"
msgstr ""

#: ../../source/guide/lang.rst:373
msgid "Consider the code below:"
msgstr ""

#: ../../source/guide/lang.rst:395
msgid ""
"Instead of having to repeat the same values for every button, we can just"
" use a template instead, like so:"
msgstr ""

#: ../../source/guide/lang.rst:414
msgid ""
"This class, created just by the declaration of this rule, inherits from "
"the Button class and allows us to change default values and create "
"bindings for all its instances without adding any new code on the Python "
"side."
msgstr ""

#: ../../source/guide/lang.rst:419
msgid "Re-using styles in multiple widgets"
msgstr ""

#: ../../source/guide/lang.rst:453
msgid ""
"Because both classes share the same .kv style, this design can be "
"simplified if we reuse the style for both widgets. You can do this in .kv"
" as follows. In my.kv:"
msgstr ""

#: ../../source/guide/lang.rst:465
msgid ""
"By separating the class names with a comma, all the classes listed in the"
" declaration will have the same kv properties."
msgstr ""

#: ../../source/guide/lang.rst:469
msgid "Designing with the Kivy Language"
msgstr ""

#: ../../source/guide/lang.rst:471
msgid ""
"One of aims of the Kivy language is to `Separate the concerns "
"<https://en.wikipedia.org/wiki/Separation_of_concerns>`_ of presentation "
"and logic. The presentation (layout) side is addressed by your kv file "
"and the logic by your py file."
msgstr ""

#: ../../source/guide/lang.rst:477
msgid "The code goes in py files"
msgstr ""

#: ../../source/guide/lang.rst:479
msgid "Let's start with a little example. First, the Python file named `main.py`:"
msgstr ""

#: ../../source/guide/lang.rst:484
msgid "In this example, we are creating a Controller class with 2 properties:"
msgstr ""

#: ../../source/guide/lang.rst:486
msgid "``info`` for receving some text"
msgstr ""

#: ../../source/guide/lang.rst:487
msgid "``label_wid`` for receving the label widget"
msgstr ""

#: ../../source/guide/lang.rst:489
msgid ""
"In addition, we are creating a ``do_action()`` method that will use both "
"of these properties. It will change the ``info`` text and change text in "
"the ``label_wid`` widget."
msgstr ""

#: ../../source/guide/lang.rst:494
msgid "The layout goes in controller.kv"
msgstr ""

#: ../../source/guide/lang.rst:496
msgid ""
"Executing this application without a corresponding `.kv` file will work, "
"but nothing will be shown on the screen. This is expected, because the "
"``Controller`` class has no widgets in it, it's just a ``FloatLayout``. "
"We can create the UI around the ``Controller`` class in a file named "
"`controller.kv`, which will be loaded when we run the ``ControllerApp``. "
"How this is done and what files are loaded is described in the "
":meth:`kivy.app.App.load_kv` method."
msgstr ""

#: ../../source/guide/lang.rst:507
msgid ""
"One label and one button in a vertical ``BoxLayout``. Seems very simple. "
"There are 3 things going on here:"
msgstr ""

#: ../../source/guide/lang.rst:510
msgid ""
"Using data from the ``Controller``. As soon as the ``info`` property is "
"changed in the controller, the expression ``text: 'My controller info is:"
" ' + root.info`` will automatically be re-evaluated, changing the text in"
" the ``Button``."
msgstr ""

#: ../../source/guide/lang.rst:515
msgid ""
"Giving data to the ``Controller``. The expression ``id: my_custom_label``"
" is assigning the created ``Label`` the id of ``my_custom_label``. Then, "
"using ``my_custom_label`` in the expression ``label_wid: "
"my_custom_label`` gives the instance of that ``Label`` widget to your "
"``Controller``."
msgstr ""

#: ../../source/guide/lang.rst:521
msgid ""
"Creating a custom callback in the ``Button`` using the ``Controller``'s "
"``on_press`` method."
msgstr ""

#: ../../source/guide/lang.rst:524
msgid ""
"``root`` and ``self`` are reserved keywords, useable anywhere. ``root`` "
"represents the top widget in the rule and ``self`` represents the current"
" widget."
msgstr ""

#: ../../source/guide/lang.rst:528
msgid ""
"You can use any id declared in the rule the same as ``root`` and "
"``self``. For example, you could do this in the ``on_press()``:"
msgstr ""

#: ../../source/guide/lang.rst:536
msgid ""
"And that's that. Now when we run `main.py`, `controller.kv` will be "
"loaded so that the ``Button`` and ``Label`` will show up and respond to "
"our touch events."
msgstr ""

