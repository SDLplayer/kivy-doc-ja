# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.9.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-02 17:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/guide/packaging-windows.rst:2
msgid "Create a package for Windows"
msgstr "Create a package for Windows（翻訳済み）"

#: ../../source/guide/packaging-windows.rst:6
msgid "This document only applies for kivy ``1.9.1`` and greater."
msgstr "この文章はkivy ``1.9.1`` 以降のバージョンが対象です。"

#: ../../source/guide/packaging-windows.rst:8
msgid ""
"Packaging your application for the Windows platform can only be done "
"inside the Windows OS. The following process has been tested on Windows "
"with the Kivy **wheels** installation, see at the end for alternate "
"installations."
msgstr ""
"Windowsプラットフォーム用のアプリケーションのパッケージは、Windows OS内でできます。"
"次のプロセスはKivy wheelsのインストールをwindowsにインストールし、インストールの終了までテストされています。 "


#: ../../source/guide/packaging-windows.rst:12
msgid ""
"The package will be either 32 or 64 bits depending on which version of "
"Python you ran it with."
msgstr ""
"パッケージは実行したPythonのバージョンに応じて32bit,64bitのどちらかになります。"


#: ../../source/guide/packaging-windows.rst:18
msgid "Requirements"
msgstr "Requirements(要件)"

#: ../../source/guide/packaging-windows.rst:20
msgid "Latest Kivy (installed as described in :ref:`installation_windows`)."
msgstr "Kivyの最新バージョン（ :ref:`installation_windows` の記載の通りインストール ）。"

#: ../../source/guide/packaging-windows.rst:21
msgid "PyInstaller 3.1+ (``pip install --upgrade pyinstaller``)."
msgstr "PyInstallerは3.1以上 (``pip install --upgrade pyinstaller``)"

#: ../../source/guide/packaging-windows.rst:26
msgid "PyInstaller default hook"
msgstr "PyInstaller default hook(PyInstallerのデフォルトhookについて)"

#: ../../source/guide/packaging-windows.rst:28
msgid ""
"This section applies to PyInstaller (>= 3.1) that includes the kivy "
"hooks. To overwrite the default hook the following examples need to be "
"slightly modified. See :ref:`overwrite-win-hook`."
msgstr ""
"このセクションでは、kivyフックを含むためpyInstallerの（> = 3.1）に適用されます。"
"デフォルトのフックを上書きするには次の例のように少し修正する必要があります。 "
"「 :ref:`overwrite-win-hook` 」を参照してください。 "


#: ../../source/guide/packaging-windows.rst:33
msgid "Packaging a simple app"
msgstr "Packaging a simple app(シンプルなアプリのパッケージ化)"

#: ../../source/guide/packaging-windows.rst:35
msgid ""
"For this example, we'll package the **touchtracer** example project and "
"embed a custom icon. The location of the kivy examples is, when using the"
" wheels, installed to ``python\\\\share\\\\kivy-examples`` and when using"
" the github source code installed as ``kivy\\\\examples``. We'll just "
"refer to the full path leading to the examples as ``examples-path``. The "
"touchtracer example is in ``examples-path\\\\demo\\\\touchtracer`` and "
"the main file is named ``main.py``."
msgstr ""
"この例では、touchtracerサンプルプロジェクトをパッケージ化し、カスタムアイコンを埋め込みます。"
"wheelを使用してインストールしている場合、kivyのサンプルコードの場所は"
" ``python\\\\share\\\\kivy-examples`` に"
"githubのソースコードをインストールして使用するときは `kivy\\\\examples`` にあります 。"
"サンプルコードに至る絶対パスexamples-pathパスを参照します。"
"touchtracerの例があるexamples-path\\demo\\touchtracerとメインファイルは``main.py``です。"


#: ../../source/guide/packaging-windows.rst:41
msgid ""
"Open your command line shell and ensure that python is on the path (i.e. "
"``python`` works)."
msgstr "コマンドラインシェルを開き、pythonのパス（``python``上にある)"

#: ../../source/guide/packaging-windows.rst:42
msgid ""
"Create a folder into which the packaged app will be created. For example "
"create a ``TouchApp`` folder and `change to that directory "
"<http://www.computerhope.com/cdhlp.htm>`_ with e.g. ``cd TouchApp``. Then"
" type::"
msgstr ""
"パッケージ化するアプリを作成するフォルダを作成します。"
"例えば``TouchApp`` フォルダを作成し、  ``cd TouchApp``のように入力して"
"その`ディレクトリに移動します<http://www.computerhope.com/cdhlp.htm>`。"
"以下のように入力します"

#: ../../source/guide/packaging-windows.rst:48
msgid ""
"You can also add an `icon.ico` file to the application folder in order to"
" create an icon for the executable. If you don't have a .ico file "
"available, you can convert your `icon.png` file to ico using the web app "
"`ConvertICO <http://www.convertico.com>`_. Save the `icon.ico` in the "
"touchtracer directory and type::"
msgstr ""
"また、実行可能ファイルのアイコンを作成するために、アプリケーションフォルダに"
" `icon.ico` ファイルを追加することができます。"
"利用可能な.icoファイルがない場合は、Webアプリケーションの`ConvertICO <http://www.convertico.com>`"
"を使用してicon.pngファイルを変換することができます。"
"touchtracerディレクトリに `icon.ico` を保存して入力します::"


#: ../../source/guide/packaging-windows.rst:55
msgid ""
"For more options, please consult the `PyInstaller Manual "
"<http://pythonhosted.org/PyInstaller/>`_."
msgstr "より多くのオプションについては、`pyInstallerのマニュアル<http://pythonhosted.org/PyInstaller/>`を参照してください 。"

#: ../../source/guide/packaging-windows.rst:58
msgid ""
"The spec file will be  located in ``TouchApp``. Now "
"we need to edit the spec file to add the dependencies hooks to correctly "
"build the exe. Open the spec file with your favorite editor and add these"
" lines at the beginning of the spec (assuming sdl2 is used, the default "
"now)::"
msgstr ""
"specファイルは``TouchApp``の場合は``touchtracer.spec`` として配置されています 。 "
"正しく動作するexeファイルを構築するためには、依存関係のフックを追加するために"
"specファイルを編集する必要があります。"
" お気に入りのエディタでspecファイルを開いて、仕様の先頭に次の行を追加します"
"（仮にsdl2がデフォルトで使用されている場合）:"

#: ../../source/guide/packaging-windows.rst:65
msgid ""
"Then, find ``COLLECT()`` and add the data for touchtracer "
"(`touchtracer.kv`, `particle.png`, ...): Change the line to add a "
"``Tree()`` object, e.g. ``Tree('examples-"
"path\\\\demo\\\\touchtracer\\\\')``. This Tree will search and add every "
"file found in the touchtracer directory to your final package."
msgstr ""
"``COLLECT()`` にtouchtracerのデータ（`touchtracer.kv`, `particle.png`、...）を追加します。"
"``Tree()``オブジェクトに追加する行を加えます（例：``Tree('examples-path\\\\demo\\\\touchtracer\\\\')）``。"
"Treeはtouchtracerディレクトリにあるすべてのファイルを検索して最終的なパッケージに追加します。 "

#: ../../source/guide/packaging-windows.rst:70
msgid ""
"To add the dependencies, before the first keyword argument in COLLECT add"
" a Tree object for every path of the dependecies. E.g. ``*[Tree(p) for p "
"in (sdl2.dep_bins + glew.dep_bins)]`` so it'll look something like::"
msgstr ""
""
"COLLECT依存関係の最初のキーワード引数の前にTreeオブジェクトのすべてのパスに依存関係を追加します。 "
"例えば``*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)]`` の場合は次のようになります： "

#: ../../source/guide/packaging-windows.rst:83
msgid "Now we build the spec file in ``TouchApp`` with::"
msgstr "今、``TouchApp`` のspecファイルをビルドします::"

#: ../../source/guide/packaging-windows.rst:87
msgid ""
"The compiled package will be in the `TouchApp\\\\dist\\\\touchtracer` "
"directory."
msgstr "コンパイルされたパッケージは `TouchApp\\\\dist\\\\touchtracer`ディレクトリに生成されます。"

#: ../../source/guide/packaging-windows.rst:90
msgid "Packaging a video app with gstreamer"
msgstr "Packaging a video app with gstreamer(gstreamerのビデオアプリをパッケージ化)"

#: ../../source/guide/packaging-windows.rst:92
msgid ""
"Following we'll slightly modify the example above to package a app that "
"uses gstreamer for video. We'll use the ``videoplayer`` example found at "
"``examples-path\\widgets\\videoplayer.py``. Create a folder somewhere "
"called ``VideoPlayer`` and on the command line change your current "
"directory to that folder and do::"
msgstr ""
"後はビデオ用のgstreamerを使用するアプリケーションをパッケージ化するために上記の例を少し修正します。"
"使用する ``videoplayer`` は``examples-path\\widgets\\videoplayer.py`` にあります"
"VideoPlayerフォルダを作成してコマンドラインでそのフォルダにカレントディレクトリを変更し次を実行します::"


#: ../../source/guide/packaging-windows.rst:99
msgid ""
"to create the ``gstvideo.spec`` file. Edit as above and this time include"
" the gstreamer dependency as well::"
msgstr ""
"``gstvideo.spec`` ファイルを作成します。そのうえで、この時gstreamerをインクルードするように編集してください。"
""

#: ../../source/guide/packaging-windows.rst:104
msgid ""
"and add the ``Tree()`` to include the video files, e.g. ``Tree('examples-"
"path\\\\widgets')`` as well as the gstreamer dependencies so it should "
"look something like::"
msgstr ""
"``Tree()`` にビデオファイルをインクルードしたように追加をします。"
"gstreamerの依存関係と同様に ``Tree('examples-path\\\\widgets')`` にこのように追加します。"

#: ../../source/guide/packaging-windows.rst:116
msgid "Then build the spec file in ``VideoPlayer`` with::"
msgstr "``VideoPlayer`` のspecファイルをビルドします。"

#: ../../source/guide/packaging-windows.rst:120
msgid ""
"and you should find gstvideo.exe in ``VideoPlayer\\dist\\gstvideo``, "
"which when run will play a video."
msgstr "ビデオを再生するときには ``VideoPlayer\\dist\\gstvideo``のgstvideo.exeが存在する必要があります。"

#: ../../source/guide/packaging-windows.rst:125
msgid ""
"If you're using Pygame and need PyGame in your packaging app, you'll have"
" to add the following code to your spec file due to kivy issue #1638. "
"After the imports add the following::"
msgstr ""
"Pygameを使用していて、アプリのパッケージにPygameが必要な場合は、 kivy issue #1638にあるようにspecファイルに次のコードを追加してください。"
"importの後に追加します::"


#: ../../source/guide/packaging-windows.rst:141
msgid "Overwriting the default hook"
msgstr "Overwriting the default hook(デフォルトhookを上書きします)"

#: ../../source/guide/packaging-windows.rst:144
msgid "Including/excluding video and audio and reducing app size"
msgstr "Including/excluding video and audio and reducing app size（Videoとaudioを引き込む、のぞくことでアプリのサイズを縮小する）"

#: ../../source/guide/packaging-windows.rst:146
msgid ""
"PyInstaller includes a hook for kivy that by default adds **all** the "
"core modules used by kivy, e.g. audio, video, spelling etc (you still "
"need to package the gstreamer dlls manually with ``Tree()`` - see the "
"example above) and their dependencies. If the hook is not installed or to"
" reduce app size some of these modules may be excluded, e.g. if no "
"audio/video is used, with a alternative hook."
msgstr ""
"PyInstallerのデフォルトはkivy、例えばオーディオ、ビデオ、スペルなど"
"使用される **すべての**のコアモジュールをhookに追加します。"
"（ツリー（）を使用して手動でgstreamerのDLLをパッケージ化する必要があります - 下記の例を参照してください。）。"
"フックがインストールされていないか、オーディオ/ビデオを使用しない場合でアプリケーションサイズを縮小する場合は、"
"これらのモジュールのいくつかは、別のフックにするか、除外してもよいです"

#: ../../source/guide/packaging-windows.rst:152
msgid ""
"Kivy provides the alternate hook at "
":func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath`. In addition, "
"if and only if PyInstaller doesn't have the default hooks "
":func:`~kivy.tools.packaging.pyinstaller_hooks.runtime_hooks` must also "
"be provided. When overwriting the hook, the latter one typically is not "
"required to be overwritten."
msgstr ""
"Kivyは:func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath`で代替hookを提供します 。 "
"PyInstallerのデフォルトのhookがない場合に限り、"
":func:`~kivy.tools.packaging.pyinstaller_hooks.runtime_hooks`も提供されなければなりません。"
" hookを上書きするときに、 runtime_hooks()は通常は上書きする必要はありません。"

#: ../../source/guide/packaging-windows.rst:158
msgid ""
"The alternate :func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath` "
"hook does not include any of the kivy providers. To add them, they have "
"to be added with "
":func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal` or "
":func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all`. See their "
"documentation and :mod:`~kivy.tools.packaging.pyinstaller_hooks` for more"
" details. But essentially, "
":func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all` add all the "
"providers like in the default hook while "
":func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal` only "
"adds those that are loaded when the app is run. Each method provides a "
"list of hidden kivy imports and excluded imports that can be passed on to"
" ``Analysis``."
msgstr ""
":func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath` の代替hockは"
"kivyプロバイダのどれかが含まれてません。"
"追加するには、:func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal`"
"または:func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all` で追加する"
"必要があります。"
"詳細については、 get_deps_minimal()と get_deps_all()ドキュメントと"
":mod:`~kivy.tools.packaging.pyinstaller_hooks` を参照してください。"
"しかしながら本質的には、"
":func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all` でデフォルトhookにすべてのプロバイダを追加するか"
":func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal` でアプリの実行時にロードされているものを追加します。"
"それぞれの方法は、``Analysis``に渡せます。そしてkivyの隠れたimport、または除外されたimportのリストを提供します。"



#: ../../source/guide/packaging-windows.rst:169
msgid ""
"One can also generate a alternate hook which literally lists every kivy "
"provider module and those not required can be commented out. See "
":mod:`~kivy.tools.packaging.pyinstaller_hooks`."
msgstr ""
"1つの方法は、文字通りすべてのkivyプロバイダモジュールをリスト化し、必要でないものはコメントアウトして代替hookを生成します。"
":mod:`~kivy.tools.packaging.pyinstaller_hooks` を参照してください。"


#: ../../source/guide/packaging-windows.rst:173
msgid ""
"To use the the alternate hooks with the examples above modify as "
"following to add the hooks with ``hookspath()`` and ``runtime_hooks`` (if"
" required) and ``**get_deps_minimal()`` or ``**get_deps_all()`` to "
"specify the providers."
msgstr ""
"上記の例と代替hookにhookを追加するには、次のように``hookspath()`` と ``runtime_hooks``  （必要な場合）"
"と``**get_deps_minimal()``または``**get_deps_all()``プロバイダを指定して使用します。"


#: ../../source/guide/packaging-windows.rst:177
msgid ""
"For example, add the import statement ``from "
"kivy.tools.packaging.pyinstaller_hooks import  get_deps_minimal, "
"get_deps_all, hookspath, runtime_hooks`` and then modify ``Analysis`` as "
"follows::"
msgstr ""
例えば、``Analysis``に　importで``from kivy.tools.packaging.pyinstaller_hooks import get_deps_minimal,"
" get_deps_all, hookspath, runtime_hooks`` で追加して、``Analysis``を以下のように変更します::"


#: ../../source/guide/packaging-windows.rst:189
msgid "to include everything like the default hook. Or::"
msgstr "デフォルトhookのようにすべてもの含めます。 または::"

#: ../../source/guide/packaging-windows.rst:198
msgid ""
"e.g. to exclude the audio and video providers and for the other core "
"modules only use those loaded."
msgstr "例えば、audioとvideoのプロバイダーを除外し、他のコアモジュールで使用されるプロパイダーだけがロードされて使用します。"

#: ../../source/guide/packaging-windows.rst:201
msgid ""
"The key points is to provide the alternate "
":func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath` which does not "
"list by default all the kivy providers and instead manually to "
"hiddenimports add the required providers while removing the undesired "
"ones (audio and video in this example) with "
":func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal`."
msgstr ""
"キーポイントは、代替を提供する :func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath` "
代わりに手動でhiddenimportsには、とデフォルトで表示されないすべてのkivy"プロバイダーと望ましくないもの（この例ではaudioとvideo）"
"を:func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal`で除去し、"
必要なプロバイダを追加します。"


#: ../../source/guide/packaging-windows.rst:209
msgid "Alternate installations"
msgstr "Alternate installations(インストールの代替)"

#: ../../source/guide/packaging-windows.rst:211
msgid ""
"The previous examples used e.g. ``*[Tree(p) for p in (sdl2.dep_bins + "
"glew.dep_bins + gstreamer.dep_bins)],`` to make PyInstaller add all the "
"dlls used by these dependencies. If kivy was not installed using the "
"wheels method these commands will not work and e.g. ``kivy.deps.sdl2`` "
"will fail to import. Instead, one must find the location of these dlls "
"and manually pass them to the ``Tree`` class in a similar fashion as the "
"example."
msgstr ""
"前の例は、``*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins + gstreamer.dep_bins)],`` を使用する場合"
" pyInstallerでの作成ですべてのDLLを追加し、依存関係で使用されます。 "
"kivy wheel メソッドを使用してインストールされていない場合、これらのコマンドは動作しませんし、"
"例えば``kivy.deps.sdl2`` のimportに失敗します。"
"その代わりに、一つの方法としてはこれらのDLLの場所を見つけて``Tree`クラスの例と同様の方法で手動に渡す必要があります。"