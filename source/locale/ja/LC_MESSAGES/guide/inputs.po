# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.9.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-02 17:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/guide/inputs.rst:2
msgid "Input management"
msgstr ""

#: ../../source/guide/inputs.rst:5
msgid "Input architecture"
msgstr ""

#: ../../source/guide/inputs.rst:7
msgid ""
"Kivy is able to handle most types of input: mouse, touchscreen, "
"accelerometer, gyroscope, etc. It handles the native multitouch protocols"
" on the following platforms: Tuio, WM_Touch, MacMultitouchSupport, MT "
"Protocol A/B and Android."
msgstr ""

#: ../../source/guide/inputs.rst:11
msgid "The global architecture can be viewed as::"
msgstr ""

#: ../../source/guide/inputs.rst:15
msgid ""
"The class of all input events is the "
":class:`~kivy.input.motionevent.MotionEvent`. It generates 2 kinds of "
"events:"
msgstr ""

#: ../../source/guide/inputs.rst:19
msgid ""
"Touch events: a motion event that contains at least an X and Y position. "
"All the touch events are dispatched across the Widget tree."
msgstr ""

#: ../../source/guide/inputs.rst:21
msgid ""
"No-touch events: all the rest. For example, the accelerometer is a "
"continuous event, without position. It never starts or stops. These "
"events are not dispatched across the Widget tree."
msgstr ""

#: ../../source/guide/inputs.rst:26
msgid ""
"A Motion event is generated by an :mod:`Input Provider "
"<kivy.input.providers>`. An Input Provider is responsible for reading the"
" input event from the operating system, the network or even from another "
"application. Several input providers exist, such as:"
msgstr ""

#: ../../source/guide/inputs.rst:31
msgid ""
":class:`~kivy.input.providers.tuio.TuioMotionEventProvider`: create a UDP"
" server and listen for TUIO/OSC messages."
msgstr ""

#: ../../source/guide/inputs.rst:33
msgid ""
":class:`~kivy.input.providers.wm_touch.WM_MotionEventProvider`: use the "
"windows API for reading multitouch information and sending it to Kivy."
msgstr ""

#: ../../source/guide/inputs.rst:35
msgid ""
":class:`~kivy.input.providers.probesysfs.ProbeSysfsHardwareProbe`: In "
"Linux, iterate over all the hardware connected to the computer, and "
"attaches a multitouch input provider for each multitouch device found."
msgstr ""

#: ../../source/guide/inputs.rst:38
msgid "and much more!"
msgstr ""

#: ../../source/guide/inputs.rst:40
msgid ""
"When you write an application, you don't need to create an input "
"provider. Kivy tries to automatically detect available hardware. However,"
" if you want to support custom hardware, you will need to configure kivy "
"to make it work."
msgstr ""

#: ../../source/guide/inputs.rst:44
msgid ""
"Before the newly-created Motion Event is passed to the user, Kivy applies"
" post-processing to the input. Every motion event is analyzed to detect "
"and correct faulty input, as well as make meaningful interpretations "
"like:"
msgstr ""

#: ../../source/guide/inputs.rst:48
msgid "Double/triple-tap detection, according to a distance and time threshold"
msgstr ""

#: ../../source/guide/inputs.rst:49
msgid "Making events more accurate when the hardware is not accurate"
msgstr ""

#: ../../source/guide/inputs.rst:50
msgid ""
"Reducing the amount of generated events if the native touch hardware is "
"sending events with nearly the same position"
msgstr ""

#: ../../source/guide/inputs.rst:53
msgid ""
"After processing, the motion event is dispatched to the Window. As "
"explained previously, not all events are dispatched to the whole widget "
"tree: the window filters them. For a given event:"
msgstr ""

#: ../../source/guide/inputs.rst:57
msgid ""
"if it's only a motion event, it will be dispatched to "
":meth:`~kivy.core.window.WindowBase.on_motion`"
msgstr ""

#: ../../source/guide/inputs.rst:59
msgid ""
"if it's a touch event, the (x,y) position of the touch (0-1 range) will "
"be scaled to the Window size (width/height), and dispatched to:"
msgstr ""

#: ../../source/guide/inputs.rst:62
msgid ":meth:`~kivy.uix.widget.Widget.on_touch_down`"
msgstr ""

#: ../../source/guide/inputs.rst:63
msgid ":meth:`~kivy.uix.widget.Widget.on_touch_move`"
msgstr ""

#: ../../source/guide/inputs.rst:64
msgid ":meth:`~kivy.uix.widget.Widget.on_touch_up`"
msgstr ""

#: ../../source/guide/inputs.rst:68
msgid "Motion event profiles"
msgstr ""

#: ../../source/guide/inputs.rst:70
msgid ""
"Depending on your hardware and the input providers used, more information"
" may be made available to you. For example, a touch input has an (x,y) "
"position, but might also have pressure information, blob size, an "
"acceleration vector, etc."
msgstr ""

#: ../../source/guide/inputs.rst:74
msgid ""
"A profile is a string that indicates what features are available inside "
"the motion event. Let's imagine that you are in an ``on_touch_move`` "
"method::"
msgstr ""

#: ../../source/guide/inputs.rst:81
msgid "The print could output::"
msgstr ""

#: ../../source/guide/inputs.rst:87
msgid ""
"Many people mix up the profile's name and the name of the corresponding "
"property. Just because ``'angle'`` is in the available profile doesn't "
"mean that the touch event object will have an ``angle`` property."
msgstr ""

#: ../../source/guide/inputs.rst:91
msgid ""
"For the ``'pos'`` profile, the properties ``pos``, ``x``, and ``y`` will "
"be available. With the ``'angle'`` profile, the property ``a`` will be "
"available. As we said, for touch events ``'pos'`` is a mandatory profile,"
" but not ``'angle'``. You can extend your interaction by checking if the "
"``'angle'`` profile exists::"
msgstr ""

#: ../../source/guide/inputs.rst:102
msgid ""
"You can find a list of available profiles in the "
":mod:`~kivy.input.motionevent` documentation."
msgstr ""

#: ../../source/guide/inputs.rst:106
msgid "Touch events"
msgstr ""

#: ../../source/guide/inputs.rst:108
msgid ""
"A touch event is a specialized "
":class:`~kivy.input.motionevent.MotionEvent` where the property "
":attr:`~kivy.input.motionevent.MotionEvent.is_touch` evaluates to True. "
"For all touch events, you automatically have the X and Y positions "
"available, scaled to the Window width and height. In other words, all "
"touch events have the ``'pos'`` profile."
msgstr ""

#: ../../source/guide/inputs.rst:115
msgid "Touch event basics"
msgstr ""

#: ../../source/guide/inputs.rst:117
msgid ""
"By default, touch events are dispatched to all currently displayed "
"widgets. This means widgets receive the touch event whether it occurs "
"within their physical area or not."
msgstr ""

#: ../../source/guide/inputs.rst:121
msgid ""
"This can be counter intuitive if you have experience with other GUI "
"toolkits. These typically divide the screen into geometric areas and only"
" dispatch touch or mouse events to the widget if the coordinate lies "
"within the widgets area."
msgstr ""

#: ../../source/guide/inputs.rst:126
msgid ""
"This requirement becomes very restrictive when working with touch input. "
"Swipes, pinches and long presses may well originate from outside of the "
"widget that wants to know about them and react to them."
msgstr ""

#: ../../source/guide/inputs.rst:130
msgid ""
"In order to provide the maximum flexibility, Kivy dispatches the events "
"to all the widgets and lets them decide how to react to them. If you only"
" want to respond to touch events inside the widget, you simply check::"
msgstr ""

#: ../../source/guide/inputs.rst:141
msgid "Coordinates"
msgstr ""

#: ../../source/guide/inputs.rst:143
msgid ""
"You must take care of matrix transformation in your touch as soon as you "
"use a widget with matrix transformation. Some widgets such as "
":class:`~kivy.uix.scatter.Scatter` have their own matrix transformation, "
"meaning the touch must be multiplied by the scatter matrix to be able to "
"correctly dispatch touch positions to the Scatter's children."
msgstr ""

#: ../../source/guide/inputs.rst:150
msgid ""
"Get coordinate from parent space to local space: "
":meth:`~kivy.uix.widget.Widget.to_local`"
msgstr ""

#: ../../source/guide/inputs.rst:152
msgid ""
"Get coordinate from local space to parent space: "
":meth:`~kivy.uix.widget.Widget.to_parent`"
msgstr ""

#: ../../source/guide/inputs.rst:154
msgid ""
"Get coordinate from local space to window space: "
":meth:`~kivy.uix.widget.Widget.to_window`"
msgstr ""

#: ../../source/guide/inputs.rst:156
msgid ""
"Get coordinate from window space to local space: "
":meth:`~kivy.uix.widget.Widget.to_widget`"
msgstr ""

#: ../../source/guide/inputs.rst:159
msgid ""
"You must use one of them to scale coordinates correctly to the context. "
"Let's look the scatter implementation::"
msgstr ""

#: ../../source/guide/inputs.rst:182
msgid "Touch shapes"
msgstr ""

#: ../../source/guide/inputs.rst:184
msgid ""
"If the touch has a shape, it will be reflected in the 'shape' property. "
"Right now, only a :class:`~kivy.input.shape.ShapeRect` can be exposed::"
msgstr ""

#: ../../source/guide/inputs.rst:196
msgid "Double tap"
msgstr ""

#: ../../source/guide/inputs.rst:198
msgid ""
"A double tap is the action of tapping twice within a time and a distance."
" It's calculated by the doubletap post-processing module. You can test if"
" the current touch is one of a double tap or not::"
msgstr ""

#: ../../source/guide/inputs.rst:210
msgid "Triple tap"
msgstr ""

#: ../../source/guide/inputs.rst:212
msgid ""
"A triple tap is the action of tapping thrice within a time and a "
"distance. It's calculated by the tripletap post-processing module. You "
"can test if the current touch is one of a triple tap or not::"
msgstr ""

#: ../../source/guide/inputs.rst:224
msgid "Grabbing touch events"
msgstr ""

#: ../../source/guide/inputs.rst:226
msgid ""
"It's possible for the parent widget to dispatch a touch event to a child "
"widget from within ``on_touch_down``, but not from ``on_touch_move`` or "
"``on_touch_up``. This can happen in certain scenarios, like when a touch "
"movement is outside the bounding box of the parent, so the parent decides"
" not to notify its children of the movement."
msgstr ""

#: ../../source/guide/inputs.rst:232
msgid ""
"But you might want to do something in ``on_touch_up``. Say you started "
"something in the ``on_touch_down`` event, like playing a sound, and you'd"
" like to finish things on the ``on_touch_up`` event. Grabbing is what you"
" need."
msgstr ""

#: ../../source/guide/inputs.rst:236
msgid ""
"When you grab a touch, you will always receive the move and up event. But"
" there are some limitations to grabbing:"
msgstr ""

#: ../../source/guide/inputs.rst:239
msgid ""
"You will receive the event at least twice: one time from your parent (the"
" normal event), and one time from the window (grab)."
msgstr ""

#: ../../source/guide/inputs.rst:241
msgid ""
"You might receive an event with a grabbed touch, but not from you: it can"
" be because the parent has sent the touch to its children while it was in"
" the grabbed state."
msgstr ""

#: ../../source/guide/inputs.rst:244
msgid ""
"The touch coordinate is not translated to your widget space because the "
"touch is coming directly from the Window. It's your job to convert the "
"coordinate to your local space."
msgstr ""

#: ../../source/guide/inputs.rst:248
msgid "Here is an example of how to use grabbing::"
msgstr ""

#: ../../source/guide/inputs.rst:275
msgid "Touch Event Management"
msgstr ""

#: ../../source/guide/inputs.rst:277
msgid ""
"In order to see how touch events are controlled and propagated between "
"widgets, please refer to the :ref:`Widget touch event bubbling <widget-"
"event-bubbling>` section."
msgstr ""

