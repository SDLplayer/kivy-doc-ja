# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-15 00:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../sources/api-kivy.core.window.rst:3
msgid "Window"
msgstr ""

#: kivy.core.window:2 of
msgid ""
"Core class for creating the default Kivy window. Kivy supports only one "
"window per application: please don't try to create more than one."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: kivy.core.window.Keyboard:1 of
msgid ""
"Keyboard interface that is returned by "
":meth:`WindowBase.request_keyboard`. When you request a keyboard, you'll "
"get an instance of this class. Whatever the keyboard input is (system or "
"virtual keyboard), you'll receive events through this instance."
msgstr ""

#: kivy.core.window.Keyboard kivy.core.window.WindowBase of
msgid "Events"
msgstr ""

#: kivy.core.window.Keyboard:8 of
msgid "`on_key_down`: keycode, text, modifiers"
msgstr ""

#: kivy.core.window.Keyboard:9 of
msgid "Fired when a new key is pressed down"
msgstr ""

#: kivy.core.window.Keyboard:11 of
msgid "`on_key_up`: keycode"
msgstr ""

#: kivy.core.window.Keyboard:11 of
msgid "Fired when a key is released (up)"
msgstr ""

#: kivy.core.window.Keyboard:13 of
msgid ""
"Here is an example of how to request a Keyboard in accordance with the "
"current configuration:"
msgstr ""

#: kivy.core.window.Keyboard.callback:1 of
msgid "Callback that will be called when the keyboard is released"
msgstr ""

#: kivy.core.window.Keyboard.keycode_to_string:1 of
msgid ""
"Convert a keycode number to a string according to the "
":attr:`Keyboard.keycodes`. If the value is not found in the keycodes, it "
"will return ''."
msgstr ""

#: kivy.core.window.Keyboard.release:1 of
msgid ""
"Call this method to release the current keyboard. This will ensure that "
"the keyboard is no longer attached to your callback."
msgstr ""

#: kivy.core.window.Keyboard.string_to_keycode:1 of
msgid ""
"Convert a string to a keycode number according to the "
":attr:`Keyboard.keycodes`. If the value is not found in the keycodes, it "
"will return -1."
msgstr ""

#: kivy.core.window.Keyboard.target:1 of
msgid "Target that have requested the keyboard"
msgstr ""

#: kivy.core.window.Keyboard.widget:1 of
msgid "VKeyboard widget, if allowed by the configuration"
msgstr ""

#: kivy.core.window.Keyboard.window:1 of
msgid "Window which the keyboard is attached too"
msgstr ""

#: kivy.core.window.WindowBase:1 of
msgid "WindowBase is an abstract window widget for any window implementation."
msgstr ""

#: kivy.core.window.WindowBase kivy.core.window.WindowBase.on_motion
#: kivy.core.window.WindowBase.request_keyboard of
msgid "Parameters"
msgstr ""

#: kivy.core.window.WindowBase:6 of
msgid "`borderless`: str, one of ('0', '1')"
msgstr ""

#: kivy.core.window.WindowBase:5 of
msgid ""
"Set the window border state. Check the :mod:`~kivy.config` documentation "
"for a more detailed explanation on the values."
msgstr ""

#: kivy.core.window.WindowBase:10 of
msgid "`fullscreen`: str, one of ('0', '1', 'auto', 'fake')"
msgstr ""

#: kivy.core.window.WindowBase:9 of
msgid ""
"Make the window fullscreen. Check the :mod:`~kivy.config` documentation "
"for a more detailed explanation on the values."
msgstr ""

#: kivy.core.window.WindowBase:12 of
msgid "`width`: int"
msgstr ""

#: kivy.core.window.WindowBase:13 of
msgid "Width of the window."
msgstr ""

#: kivy.core.window.WindowBase:14 of
msgid "`height`: int"
msgstr ""

#: kivy.core.window.WindowBase:15 of
msgid "Height of the window."
msgstr ""

#: kivy.core.window.WindowBase:16 of
msgid "`minimum_width`: int"
msgstr ""

#: kivy.core.window.WindowBase:17 of
msgid "Minimum width of the window (only works for sdl2 window provider)."
msgstr ""

#: kivy.core.window.WindowBase:18 of
msgid "`minimum_height`: int"
msgstr ""

#: kivy.core.window.WindowBase:19 of
msgid "Minimum height of the window (only works for sdl2 window provider)."
msgstr ""

#: kivy.core.window.WindowBase:23 of
msgid "`allow_screensaver`: bool"
msgstr ""

#: kivy.core.window.WindowBase:21 of
msgid ""
"Allow the device to show a screen saver, or to go to sleep on mobile "
"devices. Defaults to True. Only works for sdl2 window provider."
msgstr ""

#: kivy.core.window.WindowBase:27 of
msgid "`on_motion`: etype, motionevent"
msgstr ""

#: kivy.core.window.WindowBase:27 of
msgid ""
"Fired when a new :class:`~kivy.input.motionevent.MotionEvent` is "
"dispatched"
msgstr ""

#: kivy.core.window.WindowBase:29 of
msgid "`on_touch_down`:"
msgstr ""

#: kivy.core.window.WindowBase:30 of
msgid "Fired when a new touch event is initiated."
msgstr ""

#: kivy.core.window.WindowBase:31 of
msgid "`on_touch_move`:"
msgstr ""

#: kivy.core.window.WindowBase:32 of
msgid "Fired when an existing touch event changes location."
msgstr ""

#: kivy.core.window.WindowBase:33 of
msgid "`on_touch_up`:"
msgstr ""

#: kivy.core.window.WindowBase:34 of
msgid "Fired when an existing touch event is terminated."
msgstr ""

#: kivy.core.window.WindowBase:35 of
msgid "`on_draw`:"
msgstr ""

#: kivy.core.window.WindowBase:36 of
msgid "Fired when the :class:`Window` is being drawn."
msgstr ""

#: kivy.core.window.WindowBase:37 of
msgid "`on_flip`:"
msgstr ""

#: kivy.core.window.WindowBase:38 of
msgid "Fired when the :class:`Window` GL surface is being flipped."
msgstr ""

#: kivy.core.window.WindowBase:39 of
msgid "`on_rotate`: rotation"
msgstr ""

#: kivy.core.window.WindowBase:40 of
msgid "Fired when the :class:`Window` is being rotated."
msgstr ""

#: kivy.core.window.WindowBase:41 of
msgid "`on_close`:"
msgstr ""

#: kivy.core.window.WindowBase:42 of
msgid "Fired when the :class:`Window` is closed."
msgstr ""

#: kivy.core.window.WindowBase:51 of
msgid "`on_request_close`:"
msgstr ""

#: kivy.core.window.WindowBase:44 of
msgid ""
"Fired when the event loop wants to close the window, or if the escape key"
" is pressed and `exit_on_escape` is `True`. If a function bound to this "
"event returns `True`, the window will not be closed. If the the event is "
"triggered because of the keyboard escape key, the keyword argument "
"`source` is dispatched along with a value of `keyboard` to the bound "
"functions."
msgstr ""

#: kivy.core.window.WindowBase:56 of
msgid "`on_cursor_enter`:"
msgstr ""

#: kivy.core.window.WindowBase:54 of
msgid "Fired when the cursor enters the window."
msgstr ""

#: kivy.core.window.WindowBase:61 of
msgid "`on_cursor_leave`:"
msgstr ""

#: kivy.core.window.WindowBase:59 of
msgid "Fired when the cursor leaves the window."
msgstr ""

#: kivy.core.window.WindowBase:66 of
msgid "`on_minimize`:"
msgstr ""

#: kivy.core.window.WindowBase:64 of
msgid "Fired when the window is minimized."
msgstr ""

#: kivy.core.window.WindowBase:71 of
msgid "`on_maximize`:"
msgstr ""

#: kivy.core.window.WindowBase:69 of
msgid "Fired when the window is maximized."
msgstr ""

#: kivy.core.window.WindowBase:76 of
msgid "`on_restore`:"
msgstr ""

#: kivy.core.window.WindowBase:74 of
msgid "Fired when the window is restored."
msgstr ""

#: kivy.core.window.WindowBase:81 of
msgid "`on_hide`:"
msgstr ""

#: kivy.core.window.WindowBase:79 of
msgid "Fired when the window is hidden."
msgstr ""

#: kivy.core.window.WindowBase:86 of
msgid "`on_show`:"
msgstr ""

#: kivy.core.window.WindowBase:84 of
msgid "Fired when when the window is shown."
msgstr ""

#: kivy.core.window.WindowBase:93 of
msgid "`on_keyboard`: key, scancode, codepoint, modifier"
msgstr ""

#: kivy.core.window.WindowBase:89 of
msgid "Fired when the keyboard is used for input."
msgstr ""

#: kivy.core.window.WindowBase:91 kivy.core.window.WindowBase:98 of
msgid ""
"The *unicode* parameter has been deprecated in favor of codepoint, and "
"will be removed completely in future versions."
msgstr ""

#: kivy.core.window.WindowBase:100 of
msgid "`on_key_down`: key, scancode, codepoint, modifier"
msgstr ""

#: kivy.core.window.WindowBase:96 of
msgid "Fired when a key pressed."
msgstr ""

#: kivy.core.window.WindowBase:107 of
msgid "`on_key_up`: key, scancode, codepoint"
msgstr ""

#: kivy.core.window.WindowBase:103 of
msgid "Fired when a key is released."
msgstr ""

#: kivy.core.window.WindowBase:105 of
msgid ""
"The *unicode* parameter has be deprecated in favor of codepoint, and will"
" be removed completely in future versions."
msgstr ""

#: kivy.core.window.WindowBase:116 of
msgid "`on_dropfile`: str"
msgstr ""

#: kivy.core.window.WindowBase:110 of
msgid "Fired when a file is dropped on the application."
msgstr ""

#: kivy.core.window.WindowBase:113 of
msgid ""
"This event doesn't work for apps with elevated permissions, because the "
"OS API calls are filtered. Check issue `#4999 "
"<https://github.com/kivy/kivy/issues/4999>`_ for pointers to workarounds."
msgstr ""

#: kivy.core.window.WindowBase:122 of
msgid "`on_memorywarning`:"
msgstr ""

#: kivy.core.window.WindowBase:119 of
msgid ""
"Fired when the platform have memory issue (iOS / Android mostly) You can "
"listen to this one, and clean whatever you can."
msgstr ""

#: kivy.core.window.WindowBase:130 of
msgid "`on_textedit(self, text)`:"
msgstr ""

#: kivy.core.window.WindowBase:125 of
msgid ""
"Fired when inputting with IME. The string inputting with IME is set as "
"the parameter of this event."
msgstr ""

#: kivy.core.window.WindowBase.add_widget:1 of
msgid "Add a widget to a window"
msgstr ""

#: kivy.core.window.WindowBase.allow_screensaver:1 of
msgid ""
"Whether the screen saver is enabled, or on mobile devices whether the "
"device is allowed to go to sleep while the app is open."
msgstr ""

#: kivy.core.window.WindowBase.allow_screensaver:6 of
msgid ""
":attr:`allow_screensaver` is a :class:`~kivy.properties.BooleanProperty` "
"and defaults to True."
msgstr ""

#: kivy.core.window.WindowBase.borderless:1 of
msgid ""
"When set to True, this property removes the window border/decoration. "
"Check the :mod:`~kivy.config` documentation for a more detailed "
"explanation on the values."
msgstr ""

#: kivy.core.window.WindowBase.borderless:7 of
msgid ""
":attr:`borderless` is a :class:`~kivy.properties.BooleanProperty` and "
"defaults to False."
msgstr ""

#: kivy.core.window.WindowBase.center:1 of
msgid "Center of the rotated window."
msgstr ""

#: kivy.core.window.WindowBase.center:5 of
msgid ":attr:`center` is an :class:`~kivy.properties.AliasProperty`."
msgstr ""

#: kivy.core.window.WindowBase.children:1 of
msgid "List of the children of this window."
msgstr ""

#: kivy.core.window.WindowBase.children:3 of
msgid ""
":attr:`children` is a :class:`~kivy.properties.ListProperty` instance and"
" defaults to an empty list."
msgstr ""

#: kivy.core.window.WindowBase.children:6 of
msgid ""
"Use :meth:`add_widget` and :meth:`remove_widget` to manipulate the list "
"of children. Don't manipulate the list directly unless you know what you "
"are doing."
msgstr ""

#: kivy.core.window.WindowBase.clear:1 of
msgid "Clear the window with the background color"
msgstr ""

#: kivy.core.window.WindowBase.clearcolor:1 of
msgid "Color used to clear the window."
msgstr ""

#: kivy.core.window.WindowBase.clearcolor:13 of
msgid "The clearcolor default value is now: (0, 0, 0, 1)."
msgstr ""

#: kivy.core.window.WindowBase.clearcolor:18 of
msgid ""
":attr:`clearcolor` is an :class:`~kivy.properties.AliasProperty` and "
"defaults to (0, 0, 0, 1)."
msgstr ""

#: kivy.core.window.WindowBase.close:1 of
msgid "Close the window"
msgstr ""

#: kivy.core.window.WindowBase.create_window:1 of
msgid "Will create the main window and configure it."
msgstr ""

#: kivy.core.window.WindowBase.create_window:4 of
msgid ""
"This method is called automatically at runtime. If you call it, it will "
"recreate a RenderContext and Canvas. This means you'll have a new "
"graphics tree, and the old one will be unusable."
msgstr ""

#: kivy.core.window.WindowBase.create_window:8 of
msgid ""
"This method exist to permit the creation of a new OpenGL context AFTER "
"closing the first one. (Like using runTouchApp() and stopTouchApp())."
msgstr ""

#: kivy.core.window.WindowBase.create_window:12 of
msgid ""
"This method has only been tested in a unittest environment and is not "
"suitable for Applications."
msgstr ""

#: kivy.core.window.WindowBase.create_window:15 of
msgid "Again, don't use this method unless you know exactly what you are doing!"
msgstr ""

#: kivy.core.window.WindowBase.dpi:1 of
msgid ""
"Return the DPI of the screen. If the implementation doesn't support any "
"DPI lookup, it will just return 96."
msgstr ""

#: kivy.core.window.WindowBase.dpi:6 of
msgid ""
"This value is not cross-platform. Use :attr:`kivy.base.EventLoop.dpi` "
"instead."
msgstr ""

#: kivy.core.window.WindowBase.flip:1 of
msgid "Flip between buffers"
msgstr ""

#: kivy.core.window.WindowBase.focus:1 of
msgid "Check whether or not the window currently has focus."
msgstr ""

#: kivy.core.window.WindowBase.focus:5 of
msgid ""
":attr:`focus` is a read-only :class:`~kivy.properties.AliasProperty` and "
"defaults to True."
msgstr ""

#: kivy.core.window.WindowBase.fullscreen:1 of
msgid ""
"This property sets the fullscreen mode of the window. Available options "
"are: True, False, 'auto' and 'fake'. Check the :mod:`~kivy.config` "
"documentation for more detailed explanations on these values."
msgstr ""

#: kivy.core.window.WindowBase.fullscreen:5 of
msgid ""
"fullscreen is an :class:`~kivy.properties.OptionProperty` and defaults to"
" `False`."
msgstr ""

#: kivy.core.window.WindowBase.fullscreen:11 of
msgid ""
"The 'fake' option has been deprecated, use the :attr:`borderless` "
"property instead."
msgstr ""

#: kivy.core.window.WindowBase.grab_mouse:1 of
msgid "Grab mouse - so won't leave window"
msgstr ""

#: kivy.core.window.WindowBase.grab_mouse:6
#: kivy.core.window.WindowBase.on_cursor_enter:6
#: kivy.core.window.WindowBase.on_cursor_leave:6
#: kivy.core.window.WindowBase.on_hide:6
#: kivy.core.window.WindowBase.on_maximize:6
#: kivy.core.window.WindowBase.on_minimize:6
#: kivy.core.window.WindowBase.on_restore:6
#: kivy.core.window.WindowBase.on_show:6
#: kivy.core.window.WindowBase.ungrab_mouse:6 of
msgid "This feature requires the SDL2 window provider."
msgstr ""

#: kivy.core.window.WindowBase.height:1 of
msgid "Rotated window height."
msgstr ""

#: kivy.core.window.WindowBase.height:3 of
msgid ":attr:`height` is a read-only :class:`~kivy.properties.AliasProperty`."
msgstr ""

#: kivy.core.window.WindowBase.hide:1 of
msgid "Hides the window. This method should be used on desktop platforms only."
msgstr ""

#: kivy.core.window.WindowBase.hide:7 kivy.core.window.WindowBase.maximize:7
#: kivy.core.window.WindowBase.minimize:7
#: kivy.core.window.WindowBase.raise_window:7
#: kivy.core.window.WindowBase.restore:7
#: kivy.core.window.WindowBase.set_system_cursor:41
#: kivy.core.window.WindowBase.show:7 of
msgid ""
"This feature requires the SDL2 window provider and is currently only "
"supported on desktop platforms."
msgstr ""

#: kivy.core.window.WindowBase.icon:1 of
msgid "A path to the window icon."
msgstr ""

#: kivy.core.window.WindowBase.icon:5 of
msgid ":attr:`icon` is a :class:`~kivy.properties.StringProperty`."
msgstr ""

#: kivy.core.window.WindowBase.keyboard_anim_args:1 of
msgid ""
"The attributes for animating softkeyboard/IME. `t` = `transition`, `d` = "
"`duration`. This value will have no effect on desktops."
msgstr ""

#: kivy.core.window.WindowBase.keyboard_anim_args:7 of
msgid ""
":attr:`keyboard_anim_args` is a dict and defaults to {'t': "
"'in_out_quart', 'd': `.5`}."
msgstr ""

#: kivy.core.window.WindowBase.keyboard_height:1 of
msgid ""
"Returns the height of the softkeyboard/IME on mobile platforms. Will "
"return 0 if not on mobile platform or if IME is not active."
msgstr ""

#: kivy.core.window.WindowBase.keyboard_height:4 of
msgid ""
"This property returns 0 with SDL2 on Android, but setting "
"Window.softinput_mode does works."
msgstr ""

#: kivy.core.window.WindowBase.keyboard_height:9 of
msgid ""
":attr:`keyboard_height` is a read-only "
":class:`~kivy.properties.AliasProperty` and defaults to 0."
msgstr ""

#: kivy.core.window.WindowBase.keyboard_padding:1 of
msgid ""
"The padding to have between the softkeyboard/IME & target or bottom of "
"window. Will have no effect on desktops."
msgstr ""

#: kivy.core.window.WindowBase.keyboard_padding:6 of
msgid ""
":attr:`keyboard_padding` is a :class:`~kivy.properties.NumericProperty` "
"and defaults to 0."
msgstr ""

#: kivy.core.window.WindowBase.left:1 of
msgid "Left position of the window."
msgstr ""

#: kivy.core.window.WindowBase.left:3 kivy.core.window.WindowBase.top:3 of
msgid "It's an SDL2 property with `[0, 0]` in the top-left corner."
msgstr ""

#: kivy.core.window.WindowBase.left:5 of
msgid ":attr:`left` is now an :class:`~kivy.properties.AliasProperty`"
msgstr ""

#: kivy.core.window.WindowBase.left:10 of
msgid ""
":attr:`left` is an :class:`~kivy.properties.AliasProperty` and defaults "
"to the position set in :class:`~kivy.config.Config`."
msgstr ""

#: kivy.core.window.WindowBase.maximize:1 of
msgid ""
"Maximizes the window. This method should be used on desktop platforms "
"only."
msgstr ""

#: kivy.core.window.WindowBase.minimize:1 of
msgid ""
"Minimizes the window. This method should be used on desktop platforms "
"only."
msgstr ""

#: kivy.core.window.WindowBase.minimum_height:1 of
msgid "The minimum height to restrict the window to."
msgstr ""

#: kivy.core.window.WindowBase.minimum_height:5 of
msgid ""
":attr:`minimum_height` is a :class:`~kivy.properties.NumericProperty` and"
" defaults to 0."
msgstr ""

#: kivy.core.window.WindowBase.minimum_width:1 of
msgid "The minimum width to restrict the window to."
msgstr ""

#: kivy.core.window.WindowBase.minimum_width:5 of
msgid ""
":attr:`minimum_width` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 0."
msgstr ""

#: kivy.core.window.WindowBase.modifiers:1 of
msgid "List of keyboard modifiers currently active."
msgstr ""

#: kivy.core.window.WindowBase.modifiers:5 of
msgid ":attr:`modifiers` is an :class:`~kivy.properties.AliasProperty`."
msgstr ""

#: kivy.core.window.WindowBase.mouse_pos:1 of
msgid "2d position of the mouse within the window."
msgstr ""

#: kivy.core.window.WindowBase.mouse_pos:5 of
msgid ""
":attr:`mouse_pos` is an :class:`~kivy.properties.ObjectProperty` and "
"defaults to [0, 0]."
msgstr ""

#: kivy.core.window.WindowBase.on_close:1 of
msgid "Event called when the window is closed."
msgstr ""

#: kivy.core.window.WindowBase.on_cursor_enter:1 of
msgid "Event called when the cursor enters the window."
msgstr ""

#: kivy.core.window.WindowBase.on_cursor_leave:1 of
msgid "Event called when the cursor leaves the window."
msgstr ""

#: kivy.core.window.WindowBase.on_dropfile:1 of
msgid "Event called when a file is dropped on the application."
msgstr ""

#: kivy.core.window.WindowBase.on_dropfile:5 of
msgid ""
"This event currently works with sdl2 window provider, on pygame window "
"provider and OS X with a patched version of pygame. This event is left in"
" place for further evolution (ios, android etc.)"
msgstr ""

#: kivy.core.window.WindowBase.on_flip:1 of
msgid "Flip between buffers (event)"
msgstr ""

#: kivy.core.window.WindowBase.on_hide:1 of
msgid "Event called when the window is hidden."
msgstr ""

#: kivy.core.window.WindowBase.on_joy_axis:1 of
msgid "Event called when a joystick has a stick or other axis moved."
msgstr ""

#: kivy.core.window.WindowBase.on_joy_ball:1 of
msgid "Event called when a joystick has a ball moved."
msgstr ""

#: kivy.core.window.WindowBase.on_joy_button_down:1 of
msgid "Event called when a joystick has a button pressed."
msgstr ""

#: kivy.core.window.WindowBase.on_joy_button_up:1 of
msgid "Event called when a joystick has a button released."
msgstr ""

#: kivy.core.window.WindowBase.on_joy_hat:1 of
msgid "Event called when a joystick has a hat/dpad moved."
msgstr ""

#: kivy.core.window.WindowBase.on_key_down:1 of
msgid "Event called when a key is down (same arguments as on_keyboard)"
msgstr ""

#: kivy.core.window.WindowBase.on_key_up:1 of
msgid "Event called when a key is released (same arguments as on_keyboard)."
msgstr ""

#: kivy.core.window.WindowBase.on_keyboard:1 of
msgid "Event called when keyboard is used."
msgstr ""

#: kivy.core.window.WindowBase.on_keyboard:4 of
msgid "Some providers may omit `scancode`, `codepoint` and/or `modifier`."
msgstr ""

#: kivy.core.window.WindowBase.on_maximize:1 of
msgid "Event called when the window is maximized."
msgstr ""

#: kivy.core.window.WindowBase.on_memorywarning:1 of
msgid ""
"Event called when the platform have memory issue. Your goal is to clear "
"the cache in your app as much as you can, release unused widgets, do "
"garbage collection etc."
msgstr ""

#: kivy.core.window.WindowBase.on_memorywarning:5 of
msgid ""
"Currently, this event is fired only from the SDL2 provider, for iOS and "
"Android."
msgstr ""

#: kivy.core.window.WindowBase.on_minimize:1 of
msgid "Event called when the window is minimized."
msgstr ""

#: kivy.core.window.WindowBase.on_motion:1 of
msgid "Event called when a Motion Event is received."
msgstr ""

#: kivy.core.window.WindowBase.on_motion:4 of
msgid "`etype`: str"
msgstr ""

#: kivy.core.window.WindowBase.on_motion:5 of
msgid "One of 'begin', 'update', 'end'"
msgstr ""

#: kivy.core.window.WindowBase.on_motion:6 of
msgid "`me`: :class:`~kivy.input.motionevent.MotionEvent`"
msgstr ""

#: kivy.core.window.WindowBase.on_motion:7 of
msgid "The Motion Event currently dispatched."
msgstr ""

#: kivy.core.window.WindowBase.on_mouse_down:1 of
msgid "Event called when the mouse is used (pressed/released)."
msgstr ""

#: kivy.core.window.WindowBase.on_mouse_move:1
#: kivy.core.window.WindowBase.on_mouse_up:1 of
msgid "Event called when the mouse is moved with buttons pressed."
msgstr ""

#: kivy.core.window.WindowBase.on_request_close:1 of
msgid ""
"Event called before we close the window. If a bound function returns "
"`True`, the window will not be closed. If the the event is triggered "
"because of the keyboard escape key, the keyword argument `source` is "
"dispatched along with a value of `keyboard` to the bound functions."
msgstr ""

#: kivy.core.window.WindowBase.on_request_close:7 of
msgid ""
"When the bound function returns True the window will not be closed, so "
"use with care because the user would not be able to close the program, "
"even if the red X is clicked."
msgstr ""

#: kivy.core.window.WindowBase.on_resize:1 of
msgid "Event called when the window is resized."
msgstr ""

#: kivy.core.window.WindowBase.on_restore:1 of
msgid "Event called when the window is restored."
msgstr ""

#: kivy.core.window.WindowBase.on_rotate:1 of
msgid "Event called when the screen has been rotated."
msgstr ""

#: kivy.core.window.WindowBase.on_show:1 of
msgid "Event called when the window is shown."
msgstr ""

#: kivy.core.window.WindowBase.on_textedit:1 of
msgid ""
"Event called when inputting with IME. The string inputting with IME is "
"set as the parameter of this event."
msgstr ""

#: kivy.core.window.WindowBase.on_textinput:1 of
msgid ""
"Event called when text: i.e. alpha numeric non control keys or set of "
"keys is entered. As it is not guaranteed whether we get one character or "
"multiple ones, this event supports handling multiple characters."
msgstr ""

#: kivy.core.window.WindowBase.on_touch_down:1 of
msgid "Event called when a touch down event is initiated."
msgstr ""

#: kivy.core.window.WindowBase.on_touch_down:3
#: kivy.core.window.WindowBase.on_touch_move:3
#: kivy.core.window.WindowBase.on_touch_up:3 of
msgid ""
"The touch `pos` is now transformed to window coordinates before this "
"method is called. Before, the touch `pos` coordinate would be `(0, 0)` "
"when this method was called."
msgstr ""

#: kivy.core.window.WindowBase.on_touch_move:1 of
msgid "Event called when a touch event moves (changes location)."
msgstr ""

#: kivy.core.window.WindowBase.on_touch_up:1 of
msgid "Event called when a touch event is released (terminated)."
msgstr ""

#: kivy.core.window.WindowBase.parent:1 of
msgid "Parent of this window."
msgstr ""

#: kivy.core.window.WindowBase.parent:3 of
msgid ""
":attr:`parent` is a :class:`~kivy.properties.ObjectProperty` instance and"
" defaults to None. When created, the parent is set to the window itself. "
"You must take care of it if you are doing a recursive check."
msgstr ""

#: kivy.core.window.WindowBase.raise_window:1 of
msgid "Raise the window. This method should be used on desktop platforms only."
msgstr ""

#: kivy.core.window.WindowBase.release_all_keyboards:3 of
msgid ""
"This will ensure that no virtual keyboard / system keyboard is requested."
" All instances will be closed."
msgstr ""

#: kivy.core.window.WindowBase.release_keyboard:3 of
msgid ""
"Internal method for the widget to release the real-keyboard. Check "
":meth:`request_keyboard` to understand how it works."
msgstr ""

#: kivy.core.window.WindowBase.remove_widget:1 of
msgid "Remove a widget from a window"
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:3 of
msgid ""
"Internal widget method to request the keyboard. This method is rarely "
"required by the end-user as it is handled automatically by the "
":class:`~kivy.uix.textinput.TextInput`. We expose it in case you want to "
"handle the keyboard manually for unique input scenarios."
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:8 of
msgid ""
"A widget can request the keyboard, indicating a callback to call when the"
" keyboard is released (or taken by another widget)."
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:14 of
msgid "`callback`: func"
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:13 of
msgid ""
"Callback that will be called when the keyboard is closed. This can be "
"because somebody else requested the keyboard or the user closed it."
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:22 of
msgid "`target`: Widget"
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:17 of
msgid ""
"Attach the keyboard to the specified `target`. This should be the widget "
"that requested the keyboard. Ensure you have a different target attached "
"to each keyboard if you're working in a multi user mode."
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:32 of
msgid "`input_type`: string"
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:25 of
msgid ""
"Choose the type of soft keyboard to request. Can be one of 'text', "
"'number', 'url', 'mail', 'datetime', 'tel', 'address'."
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:30 of
msgid "`input_type` is currently only honored on mobile devices."
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard of
msgid "Return"
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:35 of
msgid ""
"An instance of :class:`Keyboard` containing the callback, target, and if "
"the configuration allows it, a :class:`~kivy.uix.vkeyboard.VKeyboard` "
"instance attached as a *.widget* property."
msgstr ""

#: kivy.core.window.WindowBase.request_keyboard:42 of
msgid ""
"The behavior of this function is heavily influenced by the current "
"`keyboard_mode`. Please see the Config's :ref:`configuration tokens "
"<configuration-tokens>` section for more information."
msgstr ""

#: kivy.core.window.WindowBase.restore:1 of
msgid ""
"Restores the size and position of a maximized or minimized window. This "
"method should be used on desktop platforms only."
msgstr ""

#: kivy.core.window.WindowBase.rotation:1 of
msgid ""
"Get/set the window content rotation. Can be one of 0, 90, 180, 270 "
"degrees."
msgstr ""

#: kivy.core.window.WindowBase.rotation:6 of
msgid ":attr:`rotation` is an :class:`~kivy.properties.AliasProperty`."
msgstr ""

#: kivy.core.window.WindowBase.screenshot:1 of
msgid "Save the actual displayed image to a file."
msgstr ""

#: kivy.core.window.WindowBase.set_icon:1 of
msgid "Set the icon of the window."
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:1 of
msgid "Set type of a mouse cursor in the Window."
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:3 of
msgid ""
"It can be one of 'arrow', 'ibeam', 'wait', 'crosshair', 'wait_arrow', "
"'size_nwse', 'size_nesw', 'size_we', 'size_ns', 'size_all', 'no', or "
"'hand'."
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:7 of
msgid ""
"On some platforms there might not be a specific cursor supported and such"
" an option falls back to one of the substitutable alternatives:"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:11 of
msgid "Windows"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:11 of
msgid "MacOS"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:11 of
msgid "Linux X11"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:11 of
msgid "Linux Wayland"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:13
#: kivy.core.window.WindowBase.set_system_cursor:17
#: kivy.core.window.WindowBase.set_system_cursor:21 of
msgid "arrow"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:15
#: kivy.core.window.WindowBase.set_system_cursor:33 of
msgid "ibeam"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:17
#: kivy.core.window.WindowBase.set_system_cursor:21 of
msgid "wait"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:19 of
msgid "crosshair"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:19
#: kivy.core.window.WindowBase.set_system_cursor:23
#: kivy.core.window.WindowBase.set_system_cursor:25
#: kivy.core.window.WindowBase.set_system_cursor:27
#: kivy.core.window.WindowBase.set_system_cursor:29
#: kivy.core.window.WindowBase.set_system_cursor:31
#: kivy.core.window.WindowBase.set_system_cursor:35 of
msgid "hand"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:21 of
msgid "wait_arrow"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:23 of
msgid "size_nwse"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:23
#: kivy.core.window.WindowBase.set_system_cursor:25
#: kivy.core.window.WindowBase.set_system_cursor:31 of
msgid "size_all"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:25 of
msgid "size_nesw"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:27 of
msgid "size_we"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:29 of
msgid "size_ns"
msgstr ""

#: kivy.core.window.WindowBase.set_system_cursor:33 of
msgid "no"
msgstr ""

#: kivy.core.window.WindowBase.set_title:1 of
msgid "Set the window title."
msgstr ""

#: kivy.core.window.WindowBase.set_vkeyboard_class:3 of
msgid ""
"Set the VKeyboard class to use. If set to `None`, it will use the "
":class:`kivy.uix.vkeyboard.VKeyboard`."
msgstr ""

#: kivy.core.window.WindowBase.shape_color_key:1 of
msgid ""
"Color key of the shaped window - sets which color will be hidden from the"
" window :attr:`shape_image` (only works for sdl2 window provider)."
msgstr ""

#: kivy.core.window.WindowBase.shape_color_key:6 of
msgid ""
":attr:`shape_color_key` is a :class:`~kivy.properties.ListProperty` "
"instance and defaults to [1, 1, 1, 1]."
msgstr ""

#: kivy.core.window.WindowBase.shape_cutoff:1 of
msgid ""
"The window :attr:`shape_image` cutoff property (only works for sdl2 "
"window provider)."
msgstr ""

#: kivy.core.window.WindowBase.shape_cutoff:6 of
msgid ""
":attr:`shape_cutoff` is a :class:`~kivy.properties.BooleanProperty` and "
"defaults to True."
msgstr ""

#: kivy.core.window.WindowBase.shape_image:1 of
msgid "An image for the window shape (only works for sdl2 window provider)."
msgstr ""

#: kivy.core.window.WindowBase.shape_image:3 of
msgid "The image size has to be the same like the window's size!"
msgstr ""

#: kivy.core.window.WindowBase.shape_image:7 of
msgid ""
":attr:`shape_image` is a :class:`~kivy.properties.StringProperty` and "
"defaults to 'data/images/defaultshape.png'. This value is taken from "
":class:`~kivy.config.Config`."
msgstr ""

#: kivy.core.window.WindowBase.shape_mode:1 of
msgid "Window mode for shaping (only works for sdl2 window provider)."
msgstr ""

#: kivy.core.window.WindowBase.shape_mode:4 of
msgid "can be RGB only"
msgstr ""

#: kivy.core.window.WindowBase.shape_mode:4 of
msgid "`default` - does nothing special"
msgstr ""

#: kivy.core.window.WindowBase.shape_mode:5 of
msgid "`colorkey` - hides a color of the :attr:`shape_color_key`"
msgstr ""

#: kivy.core.window.WindowBase.shape_mode:8 of
msgid "has to contain alpha channel"
msgstr ""

#: kivy.core.window.WindowBase.shape_mode:7 of
msgid "`binalpha` - hides an alpha channel of the :attr:`shape_image`"
msgstr ""

#: kivy.core.window.WindowBase.shape_mode:8 of
msgid "`reversebinalpha` - shows only the alpha of the :attr:`shape_image`"
msgstr ""

#: kivy.core.window.WindowBase.shape_mode:11 of
msgid ""
"Before actually setting the mode make sure the Window has the same size "
"like the :attr:`shape_image`, preferably via Config before the Window is "
"actually created."
msgstr ""

#: kivy.core.window.WindowBase.shape_mode:15 of
msgid ""
"If the :attr:`shape_image` isn't set, the default one will be used and "
"the mode might not take the desired visual effect."
msgstr ""

#: kivy.core.window.WindowBase.shape_mode:20 of
msgid ":attr:`shape_mode` is an :class:`~kivy.properties.AliasProperty`."
msgstr ""

#: kivy.core.window.WindowBase.shaped:1 of
msgid ""
"Read only property to check if the window is shapable or not (only works "
"for sdl2 window provider)."
msgstr ""

#: kivy.core.window.WindowBase.shaped:6 of
msgid ":attr:`shaped` is an :class:`~kivy.properties.AliasProperty`."
msgstr ""

#: kivy.core.window.WindowBase.show:1 of
msgid "Shows the window. This method should be used on desktop platforms only."
msgstr ""

#: kivy.core.window.WindowBase.show_cursor:1 of
msgid "Set whether or not the cursor is shown on the window."
msgstr ""

#: kivy.core.window.WindowBase.show_cursor:5 of
msgid ""
":attr:`show_cursor` is a :class:`~kivy.properties.BooleanProperty` and "
"defaults to True."
msgstr ""

#: kivy.core.window.WindowBase.size:1 of
msgid ""
"Get the rotated size of the window. If :attr:`rotation` is set, then the "
"size will change to reflect the rotation."
msgstr ""

#: kivy.core.window.WindowBase.size:6 of
msgid ":attr:`size` is an :class:`~kivy.properties.AliasProperty`."
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:1 of
msgid ""
"This specifies the behavior of window contents on display of the soft "
"keyboard on mobile platforms. It can be one of '', 'pan', 'scale', "
"'resize' or 'below_target'. Their effects are listed below."
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:6 of
msgid "Value"
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:6 of
msgid "Effect"
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:8 of
msgid "''"
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:8 of
msgid ""
"The main window is left as is, allowing you to use the "
":attr:`keyboard_height` to manage the window contents manually."
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:12 of
msgid "'pan'"
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:12 of
msgid ""
"The main window pans, moving the bottom part of the window to be always "
"on top of the keyboard."
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:15 of
msgid "'resize'"
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:15 of
msgid "The window is resized and the contents scaled to fit the remaining space."
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:18 of
msgid "'below_target'"
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:18 of
msgid ""
"The window pans so that the current target TextInput widget requesting "
"the keyboard is presented just above the soft keyboard."
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:23 of
msgid ""
":attr:`softinput_mode` is an :class:`~kivy.properties.OptionProperty` and"
" defaults to ''."
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:26 of
msgid "The `resize` option does not currently work with SDL2 on Android."
msgstr ""

#: kivy.core.window.WindowBase.softinput_mode:30 of
msgid "The 'below_target' option was added."
msgstr ""

#: kivy.core.window.WindowBase.system_size:1 of
msgid "Real size of the window ignoring rotation."
msgstr ""

#: kivy.core.window.WindowBase.system_size:5 of
msgid ":attr:`system_size` is an :class:`~kivy.properties.AliasProperty`."
msgstr ""

#: kivy.core.window.WindowBase.toggle_fullscreen:1 of
msgid "Toggle between fullscreen and windowed mode."
msgstr ""

#: kivy.core.window.WindowBase.toggle_fullscreen:3 of
msgid "Use :attr:`fullscreen` instead."
msgstr ""

#: kivy.core.window.WindowBase.top:1 of
msgid "Top position of the window."
msgstr ""

#: kivy.core.window.WindowBase.top:5 of
msgid ":attr:`top` is now an :class:`~kivy.properties.AliasProperty`"
msgstr ""

#: kivy.core.window.WindowBase.top:10 of
msgid ""
":attr:`top` is an :class:`~kivy.properties.AliasProperty` and defaults to"
" the position set in :class:`~kivy.config.Config`."
msgstr ""

#: kivy.core.window.WindowBase.ungrab_mouse:1 of
msgid "Ungrab mouse"
msgstr ""

#: kivy.core.window.WindowBase.width:1 of
msgid "Rotated window width."
msgstr ""

#: kivy.core.window.WindowBase.width:3 of
msgid ":attr:`width` is a read-only :class:`~kivy.properties.AliasProperty`."
msgstr ""

