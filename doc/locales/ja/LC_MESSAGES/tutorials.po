# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-15 00:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../sources/tutorials/crashcourse.rst:4
msgid "Crash Course"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:6
msgid ""
"The Kivy Crash Course is a series of YouTube video tutorials by Kivy core"
" developer `inclement <https://github.com/inclement>`_. They provide a "
"simple walkthrough in Kivy for users who know how to code in Python and "
"is friendly to Python beginners. After the Pong and Paint tutorials, this"
" set of videos covers basic features and techniques that can be used to "
"create your app quicker, keeping your code elegant and eye-friendly."
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:14
msgid "Basic Info"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:16
msgid ""
"The Crash Course primarily consists of a series of YouTube videos, each "
"roughly 10 minutes long. There are also articles describing some of the "
"videos and the code used in the videos."
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:21
msgid "Topics covered by the Crash Course include:"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:23
msgid ""
"Use of the basic Kivy widgets such as the Label, Button, Scatter and "
"TextInput"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:25
msgid ""
"Building an app for android with python-for-android's `old toolchain "
"<https://github.com/kivy/python-for-android/tree/old_toolchain>`_"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:27
msgid "Binding functions to events"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:28
msgid "Using changes in variables on the go"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:29
msgid ""
"Smart user interface (`Kv language "
"<https://kivy.org/docs/guide/lang.html>`_)"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:31
msgid "Properties"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:32
msgid "Canvas and drawing"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:33
msgid "Label with scrolling"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:34
msgid "Positioning and layouts"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:35
msgid "Animation and Clock"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:36
msgid ""
"Accessing android API (`pyjnius <https://github.com/kivy/pyjnius>`_, "
"`plyer <https://github.com/kivy/plyer>`_)"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:38
msgid "Settings panel (and building your own options)"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:39
msgid "ScreenManager"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:42
msgid "Links:"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:44
msgid ""
"`Videos <https://www.youtube.com/watch?v=F7UKmK9eQLY& "
"list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq>`_"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:46
msgid "`Articles <http://inclem.net/pages/kivy-crash-course>`_"
msgstr ""

#: ../../sources/tutorials/crashcourse.rst:47
msgid "`Code <https://github.com/inclement/kivycrashcourse>`_"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:7
msgid "A Simple Paint App"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:9
msgid ""
"In the following tutorial, you will be guided through the creation of "
"your first widget. This provides powerful and important knowledge when "
"programming Kivy applications, as it lets you create completely new user "
"interfaces with custom elements for your specific purpose."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:16
msgid "Basic Considerations"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:18
msgid ""
"When creating an application, you have to ask yourself three important "
"questions:"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:20
msgid "What data does my application process?"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:21
msgid "How do I visually represent that data?"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:22
msgid "How does the user interact with that data?"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:24
msgid ""
"If you want to write a very simple line drawing application for example, "
"you most likely want the user to just draw on the screen with his/her "
"fingers. That's how the user *interacts* with your application. While "
"doing so, your application would memorize the positions where the user's "
"finger were, so that you can later draw lines between those positions. So"
" the points where the fingers were would be your *data* and the lines "
"that you draw between them would be your *visual representation*."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:32
msgid ""
"In Kivy, an application's user interface is composed of Widgets. "
"Everything that you see on the screen is somehow drawn by a widget. Often"
" you would like to be able to reuse code that you already wrote in a "
"different context, which is why widgets typically represent one specific "
"instance that answers the three questions above. A widget encapsulates "
"data, defines the user's interaction with that data and draws its visual "
"representation. You can build anything from simple to complex user "
"interfaces by nesting widgets. There are many widgets built in, such as "
"buttons, sliders and other common stuff. In many cases, however, you need"
" a custom widget that is beyond the scope of what is shipped with Kivy "
"(e.g. a medical visualization widget)."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:45
msgid ""
"So keep these three questions in mind when you design your widgets. Try "
"to write them in a minimal and reusable manner (i.e. a widget does "
"exactly what its supposed to do and nothing more. If you need more, write"
" more widgets or compose other widgets of smaller widgets. We try to "
"adhere to the `Single Responsibility Principle "
"<http://en.wikipedia.org/wiki/Single_responsibility_principle>`_)."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:54
msgid "Paint Widget"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:56
msgid ""
"We're sure one of your childhood dreams has always been creating your own"
" multitouch paint program. Allow us to help you achieve that. In the "
"following sections you will successively learn how to write a program "
"like that using Kivy. Make sure that you have read and understood "
":ref:`quickstart`. You have? Great! Let's get started!"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:65
msgid "Initial Structure"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:67
msgid ""
"Let's start by writing the very basic code structure that we need.  By "
"the way, all the different pieces of code that are used in this section "
"are also available in the ``examples/guide/firstwidget`` directory that "
"comes with Kivy, so you don't need to copy & paste it all the time. Here "
"is the basic code skeleton that we will need:"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:77
msgid ""
"This is actually really simple. Save it as paint.py. If you run it, you "
"should only see a black screen. As you can see, instead of using a built-"
"in widget such as a Button (see :ref:`quickstart`), we are going to write"
" our own widget to do the drawing. We do that by creating a class that "
"inherits from :class:`~kivy.uix.widget.Widget` (line 5-6) and although "
"that class does nothing yet, we can still treat it like a normal Kivy "
"widget (line 11). The ``if __name__ ...`` construct (line 14) is a Python"
" mechanism that prevents you from executing the code in the if-statement "
"when importing from the file, i.e. if you write ``import paint``, it "
"won't do something unexpected but just nicely provide the classes defined"
" in the file."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:91
#, python-format
msgid ""
"You may be wondering why you have to import App and Widget separately, "
"instead of doing something like ``from kivy import *``. While shorter, "
"this would have the disadvantage of `polluting  your namespace "
"<http://en.wikipedia.org/wiki/Namespace_%28computer_science%29#Python>`_ "
"and make the start of the application potentially much slower. It can "
"also introduce ambiguity into class and variable naming, so is generally "
"frowned upon in the Python community. The way we do it is faster and "
"cleaner."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:103
msgid "Adding Behaviour"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:105
msgid ""
"Let's now add some actual behaviour to the widget, i.e. make it react to "
"user input. Change the code like so:"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:112
msgid ""
"This is just to show how easy it is to react to user input. When a "
":class:`~kivy.input.motionevent.MotionEvent` (i.e. a touch, click, etc.) "
"occurs, we simply print the information about the touch object to the "
"console. You won't see anything on the screen, but if you observe the "
"command-line from which you are running the program, you will see a "
"message for every touch. This also demonstrates that a widget does not "
"have to have a visual representation."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:120
msgid ""
"Now that's not really an overwhelming user experience. Let's add some "
"code that actually draws something into our window:"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:129
msgid ""
"If you run your code with these modifications, you will see that every "
"time you touch, there will be a small yellow circle drawn where you "
"touched. How does it work?"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:133
msgid ""
"Line 9: We use Python's ``with`` statement with the widget's "
":class:`~kivy.graphics.instructions.Canvas` object. This is like an area "
"in which the widget can draw things to represent itself on the screen. By"
" using the ``with`` statement with it, all successive drawing commands "
"that are properly indented will modify this canvas. The ``with`` "
"statement also makes sure that after our drawing, internal state can be "
"cleaned up properly."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:140
msgid ""
"Line 10: You might have guessed it already: This sets the "
":class:`~kivy.graphics.context_instructions.Color` for successive drawing"
" operations to yellow (default color format is RGB, so (1, 1, 0) is "
"yellow). This is true until another "
":class:`~kivy.graphics.context_instructions.Color` is set. Think of this "
"as dipping your brushes in that color, which you can then use to draw on "
"a canvas until you dip the brushes into another color."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:147
msgid ""
"Line 11: We specify the diameter for the circle that we are about to "
"draw. Using a variable for that is preferable since we need to refer to "
"that value multiple times and we don't want to have to change it in "
"several places if we want the circle bigger or smaller."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:151
msgid ""
"Line 12: To draw a circle, we simply draw an "
":class:`~kivy.graphics.vertex_instructions.Ellipse` with equal width and "
"height. Since we want the circle to be drawn where the user touches, we "
"pass the touch's position to the ellipse. Note that we need to shift the "
"ellipse by ``-d/2`` in the x and y directions (i.e. left and downwards) "
"because the position specifies the bottom left corner of the ellipse's "
"bounding box, and we want it to be centered around our touch."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:161
msgid ""
"That was easy, wasn't it? It gets better! Update the code to look like "
"this:"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:209
msgid "This is what has changed:"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:171
msgid ""
"Line 3: We now not only import the "
":class:`~kivy.graphics.vertex_instructions.Ellipse` drawing instruction, "
"but also the :class:`~kivy.graphics.vertex_instructions.Line` drawing "
"instruction. If you look at the documentation for "
":class:`~kivy.graphics.vertex_instructions.Line`, you will see that it "
"accepts a ``points`` argument that has to be a list of 2D point "
"coordinates, like ``(x1, y1, x2, y2, ..., xN, yN)``."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:178
msgid ""
"Line 13: This is where it gets interesting. ``touch.ud`` is a Python "
"dictionary (type <dict>) that allows us to store *custom attributes* for "
"a touch."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:181
msgid ""
"Line 13: We make use of the Line instruction that we imported and set a "
"Line up for drawing. Since this is done in ``on_touch_down``, there will "
"be a new line for every new touch. By creating the line inside the "
"``with`` block, the canvas automatically knows about the line and will "
"draw it. We just want to modify the line later, so we store a reference "
"to it in the ``touch.ud`` dictionary under the arbitrarily chosen but "
"aptly named key 'line'. We pass the line that we're creating the initial "
"touch position because that's where our line will begin."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:190
msgid ""
"Lines 15: We add a new method to our widget. This is similar to the "
"``on_touch_down`` method, but instead of being called when a *new* touch "
"occurs, this method is being called when an *existing* touch (for which "
"``on_touch_down`` was already called) moves, i.e. its position changes. "
"Note that this is the **same** "
":class:`~kivy.input.motionevent.MotionEvent` object with updated "
"attributes. This is something we found incredibly handy and you will "
"shortly see why."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:198
msgid ""
"Line 16: Remember: This is the same touch object that we got in "
"``on_touch_down``, so we can simply access the data we stored away in the"
" ``touch.ud`` dictionary! To the line we set up for this touch earlier, "
"we now add the current position of the touch as a new point. We know that"
" we need to extend the line because this happens in ``on_touch_move``, "
"which is only called when the touch has moved, which is exactly why we "
"want to update the line. Storing the line in the ``touch.ud`` makes it a "
"whole lot easier for us as we don't have to maintain our own touch-to-"
"line bookkeeping."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:211
msgid ""
"So far so good. This isn't exactly beautiful yet, though. It looks a bit "
"like spaghetti bolognese. How about giving each touch its own color? "
"Great, let's do it:"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:221
msgid "Here are the changes:"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:223
msgid ""
"Line 1: We import Python's random() function that will give us random "
"values in the range of [0., 1.)."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:225
msgid ""
"Line 10: In this case we simply create a new tuple of 3 random float "
"values that will represent a random RGB color. Since we do this in "
"``on_touch_down``, every new touch will get its own color. Don't get "
"confused by the use of `tuples "
"<http://docs.python.org/2/tutorial/datastructures.html#tuples-and-"
"sequences>`_. We're just binding the tuple to ``color`` for use as a "
"shortcut within this method because we're lazy."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:232
msgid ""
"Line 12: As before, we set the color for the canvas. Only this time we "
"use the random values we generated and feed them to the color class using"
" Python's tuple unpacking syntax (since the Color class expects three "
"individual color components instead of just 1. If we were to pass the "
"tuple directly, that would be just 1 value being passed, regardless of "
"the fact that the tuple itself contains 3 values)."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:241
msgid ""
"This looks a lot nicer already! With a lot of skill and patience, you "
"might even be able to create a nice little drawing!"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:245
msgid ""
"Since by default the :class:`~kivy.graphics.context_instructions.Color` "
"instructions assume RGB mode and we're feeding a tuple with three random "
"float values to it, it might very well happen that we end up with a lot "
"of dark or even black colors if we are unlucky. That would be bad because"
" by default the background color is dark as well, so you wouldn't be able"
" to (easily) see the lines you draw. There is a nice trick to prevent "
"this: Instead of creating a tuple with three random values, create a "
"tuple like this: ``(random(), 1., 1.)``. Then, when passing it to the "
"color instruction, set the mode to HSV color space: ``Color(*color, "
"mode='hsv')``. This way you will have a smaller number of possible "
"colors, but the colors that you get will always be equally bright: only "
"the hue changes."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:260
msgid "Bonus Points"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:262
msgid ""
"At this point, we could say we are done. The widget does what it's "
"supposed to do: it traces the touches and draws lines. It even draws "
"circles at the positions where a line begins."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:266
msgid ""
"But what if the user wants to start a new drawing? With the current code,"
" the only way to clear the window would be to restart the entire "
"application. Luckily, we can do better. Let us add a *Clear* button that "
"erases all the lines and circles that have been drawn so far. There are "
"two options now:"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:272
msgid ""
"We could either create the button as a child of our widget. That would "
"imply that if you create more than one widget, every widget gets its own "
"button. If you're not careful, this will also allow users to draw on top "
"of the button, which might not be what you want."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:276
msgid ""
"Or we set up the button only once, initially, in our app class and when "
"it's pressed we clear the widget."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:279
msgid ""
"For our simple example, it doesn't really matter that much. For larger "
"applications you should give some thought to who does what in your app. "
"We'll go with the second option here so that you see how you can build up"
" your application's widget tree in your app class's "
":meth:`~kivy.app.App.build` method. We'll also change to the HSV color "
"space (see preceding note):"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:291
msgid "Here's what happens:"
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:293
msgid ""
"Line 4: We added an import statement to be able to use the "
":class:`~kivy.uix.button.Button` class."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:295
msgid ""
"Line 25: We create a dummy ``Widget()`` object as a parent for both our "
"painting widget and the button we're about to add. This is just a poor-"
"man's approach to setting up a widget tree hierarchy. We could just as "
"well use a layout or do some other fancy stuff. Again: this widget does "
"absolutely nothing except holding the two widgets we will now add to it "
"as children."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:301
msgid ""
"Line 26: We create our ``MyPaintWidget()`` as usual, only this time we "
"don't return it directly but bind it to a variable name."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:303
msgid ""
"Line 27: We create a button widget. It will have a label on it that "
"displays the text 'Clear'."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:305
msgid ""
"Line 28: We then bind the button's on_release event (which is fired when "
"the button is pressed and then released) to the `callback function "
"<http://en.wikipedia.org/wiki/Callback_function#Python>`_ `clear_canvas` "
"defined on below on Lines 33 & 34."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:309
msgid ""
"Line 29 & 30: We set up the widget hierarchy by making both the painter "
"and the clearbtn children of the dummy parent widget. That means "
"`painter` and `clearbtn` are now siblings in the usual computer science "
"tree terminology."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:313
msgid ""
"Line 33 & 34: Up to now, the button did nothing. It was there, visible, "
"and you could press it, but nothing would happen. We change that here: we"
" create a small, throw-away function that is going to be our `callback "
"function <http://en.wikipedia.org/wiki/Callback_function#Python>`_ when "
"the button is pressed. The function just clears the painter's canvas' "
"contents, making it black again."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:322
msgid ""
"The Kivy Widget class, by design, is kept simple. There are no general "
"properties such as background color and border color. Instead, the "
"examples and documentation illustrate how to easily handle such simple "
"things yourself, as we have done here, setting the color for the canvas, "
"and drawing the shape. From a simple start, you can move to more "
"elaborate customization. Higher-level built-in widgets, deriving from "
"Widget, such as Button, do have convenience properties such as "
"background_color, but these vary by widget. Use the API docs to see what "
"is offered by a widget, and subclass if you need to add more "
"functionality."
msgstr ""

#: ../../sources/tutorials/firstwidget.rst:332
msgid ""
"Congratulations! You've written your first Kivy widget. Obviously this "
"was just a quick introduction. There is much more to discover. We suggest"
" taking a short break to let what you just learned sink in. Maybe draw "
"some nice pictures to relax? If you feel like you've understood "
"everything and are ready for more, we encourage you to read on."
msgstr ""

#: ../../sources/tutorials/pong.rst:7
msgid "Pong Game Tutorial"
msgstr ""

#: ../../sources/tutorials/pong.rst:10
msgid "Introduction"
msgstr ""

#: ../../sources/tutorials/pong.rst:14
msgid "Welcome to the Pong tutorial"
msgstr ""

#: ../../sources/tutorials/pong.rst:16
msgid ""
"This tutorial will teach you how to write pong using Kivy. We'll start "
"with a basic application like the one described in the :ref:`quickstart` "
"and turn it into a playable pong game, describing each step along the "
"way."
msgstr ""

#: ../../sources/tutorials/pong.rst:24
msgid "Here is a check list before starting this tutorial:"
msgstr ""

#: ../../sources/tutorials/pong.rst:26
msgid ""
"You have a working Kivy installation. See the "
":doc:`/installation/installation` section for detailed descriptions"
msgstr ""

#: ../../sources/tutorials/pong.rst:28
msgid ""
"You know how to run a basic Kivy application. See :ref:`quickstart` if "
"you don't."
msgstr ""

#: ../../sources/tutorials/pong.rst:31
msgid ""
"If you have read the programming guide, and understand both basic Widget "
"concepts (:doc:`/tutorials/firstwidget`) and basic concepts of the kv "
"language (:doc:`/guide/lang`), you can probably skip the first 2 steps "
"and go straight to step 3."
msgstr ""

#: ../../sources/tutorials/pong.rst:38
msgid ""
"You can find the entire source code, and source code files for each step "
"in the Kivy examples directory under `tutorials/pong/`"
msgstr ""

#: ../../sources/tutorials/pong.rst:41
msgid "Ready? Sweet, let's get started!"
msgstr ""

#: ../../sources/tutorials/pong.rst:44 ../../sources/tutorials/pong.rst:48
msgid "Getting Started"
msgstr ""

#: ../../sources/tutorials/pong.rst:50
msgid ""
"Let's start by getting a really simple Kivy app up and running. Create a "
"directory for the game and a file named *main.py*"
msgstr ""

#: ../../sources/tutorials/pong.rst:57
msgid ""
"Go ahead and run the application. It should just show a black window at "
"this point. What we've done is create a very simple Kivy "
":class:`~kivy.app.App`, which creates an instance of our ``PongGame`` "
"Widget class and returns it as the root element for the applications UI, "
"which you should imagine at this point as a hierarchical tree of Widgets."
" Kivy places this widget-tree in the default Window. In the next step, we"
" will draw the Pong background and scores by defining how the ``PongGame "
"widget`` looks."
msgstr ""

#: ../../sources/tutorials/pong.rst:67
msgid "Add Simple Graphics"
msgstr ""

#: ../../sources/tutorials/pong.rst:71
msgid "Creation of pong.kv"
msgstr ""

#: ../../sources/tutorials/pong.rst:73
msgid ""
"We will use a .kv file to define the look and feel of the ``PongGame`` "
"class. Since our :class:`~kivy.app.App` class is called ``PongApp``, we "
"can simply create a file called ``pong.kv`` in the same directory that "
"will be automatically loaded when the application is run. So create a new"
" file called *``pong.kv``* and add the following contents."
msgstr ""

#: ../../sources/tutorials/pong.rst:85
msgid ""
"COMMON ERROR: The name of the kv file, e.g. pong.kv, must match the name "
"of the app, e.g. PongApp (the part before the App ending)."
msgstr ""

#: ../../sources/tutorials/pong.rst:88
msgid ""
"If you run the app now, you should see a vertical bar in the middle, and "
"two zeros where the player scores will be displayed."
msgstr ""

#: ../../sources/tutorials/pong.rst:93
msgid "Explaining the Kv File Syntax"
msgstr ""

#: ../../sources/tutorials/pong.rst:95
msgid ""
"Before going on to the next step, you might want to take a closer look at"
" the contents of the kv file we just created and figure out what is going"
" on. If you understand what's happening, you can probably skip ahead to "
"the next step."
msgstr ""

#: ../../sources/tutorials/pong.rst:100
msgid "On the very first line we have::"
msgstr ""

#: ../../sources/tutorials/pong.rst:104
msgid ""
"This first line is required in every kv file. It should start with "
"``#:kivy`` followed by a space and the Kivy version it is intended for "
"(so Kivy can make sure you have at least the required version, or handle "
"backwards compatibility later on)."
msgstr ""

#: ../../sources/tutorials/pong.rst:109
msgid ""
"After that, we begin defining rules that are applied to all ``PongGame`` "
"instances::"
msgstr ""

#: ../../sources/tutorials/pong.rst:115
msgid ""
"Like Python, kv files use indentation to define nested blocks. A block "
"defined with a class name inside the ``<`` and ``>`` characters is a "
":class:`~kivy.uix.widget.Widget` rule. It will be applied to any instance"
" of the named class. If you replaced ``PongGame`` with ``Widget`` in our "
"example, all Widget instances would have the vertical line and the two "
"Label widgets inside them because it would define these rules for all "
"Widget instances."
msgstr ""

#: ../../sources/tutorials/pong.rst:122
msgid ""
"Inside a rule section, you can add various blocks to define the style and"
" contents of the widgets they will be applied to. You can:"
msgstr ""

#: ../../sources/tutorials/pong.rst:125
msgid "set property values,"
msgstr ""

#: ../../sources/tutorials/pong.rst:126
msgid "add child widgets"
msgstr ""

#: ../../sources/tutorials/pong.rst:127
msgid ""
"define a `canvas` section in which you can add Graphics instructions that"
" define how the widget is rendered."
msgstr ""

#: ../../sources/tutorials/pong.rst:130
msgid ""
"The first block inside the ``<PongGame>`` rule we have is a `canvas` "
"block:"
msgstr ""

#: ../../sources/tutorials/pong.rst:140
msgid ""
"So this canvas block says that the ``PongGame`` widget should draw some "
"graphics primitives. In this case, we add a rectangle to the canvas. We "
"set the pos of the rectangle to be 5 pixels left of the horizontal center"
" of the widget, and 0 for y. The size of the rectangle is set to 10 "
"pixels in width, and the widget's height in height. The nice thing about "
"defining the graphics like this, is that the rendered rectangle will be "
"automatically updated when the properties of any widgets used in the "
"value expression change."
msgstr ""

#: ../../sources/tutorials/pong.rst:150
#, python-format
msgid ""
"Try to resize the application window and notice what happens. That's "
"right, the entire UI resizes automatically. The standard behaviour of the"
" Window is to resize an element based on its property `size_hint`. The "
"default widget size_hint is (1,1), meaning it will be stretched 100% in "
"both x-direction and y-direction and hence fill the available space. "
"Since the pos and size of the rectangle and center_x and top of the score"
" labels were defined within the context of the ``PongGame`` class, these "
"properties will automatically update when the corresponding widget "
"properties change. Using the Kv language gives you automatic property "
"binding. :)"
msgstr ""

#: ../../sources/tutorials/pong.rst:162
msgid ""
"The last two sections we add look pretty similar. Each of them adds a "
"Label widget as a child widget to the ``PongGame`` widget. For now, the "
"text on both of them is just set to *\"0\"*. We'll hook that up to the "
"actual score once we have the logic implemented, but the labels already "
"look good since we set a bigger font_size, and positioned them relatively"
" to the root widget. The ``root`` keyword can be used inside the child "
"block to refer back to the parent/root widget the rule applies to "
"(``PongGame`` in this case):"
msgstr ""

#: ../../sources/tutorials/pong.rst:189 ../../sources/tutorials/pong.rst:193
msgid "Add the Ball"
msgstr ""

#: ../../sources/tutorials/pong.rst:195
msgid ""
"Ok, so we have a basic pong arena to play in, but we still need the "
"players and a ball to hit around.  Let's start with the ball.  We'll add "
"a new `PongBall` class to create a widget that will be our ball and make "
"it bounce around."
msgstr ""

#: ../../sources/tutorials/pong.rst:200
msgid "PongBall Class"
msgstr ""

#: ../../sources/tutorials/pong.rst:202
msgid "Here is the Python code for the PongBall class::"
msgstr ""

#: ../../sources/tutorials/pong.rst:219
msgid "And here is the kv rule used to draw the ball as a white circle:"
msgstr ""

#: ../../sources/tutorials/pong.rst:230
msgid ""
"To make it all work, you also have to add the imports for the :doc:`/api-"
"kivy.properties` Property classes used and the "
":class:`~kivy.vector.Vector`."
msgstr ""

#: ../../sources/tutorials/pong.rst:234
msgid "Here is the entire updated python code and kv file for this step:"
msgstr ""

#: ../../sources/tutorials/pong.rst:238 ../../sources/tutorials/pong.rst:350
#: ../../sources/tutorials/pong.rst:425
msgid "main.py:"
msgstr ""

#: ../../sources/tutorials/pong.rst:243 ../../sources/tutorials/pong.rst:355
#: ../../sources/tutorials/pong.rst:427
msgid "pong.kv:"
msgstr ""

#: ../../sources/tutorials/pong.rst:245
msgid ""
"Note that not only a `<PongBall>` widget rule has been added, but also a "
"child widget `PongBall` in the `<PongGame>` widget rule."
msgstr ""

#: ../../sources/tutorials/pong.rst:249
msgid "Adding Ball Animation"
msgstr ""

#: ../../sources/tutorials/pong.rst:253
msgid "Making the ball move"
msgstr ""

#: ../../sources/tutorials/pong.rst:255
msgid ""
"Cool, so now we have a ball, and it even has a ``move`` function... but "
"it's not moving yet. Let's fix that."
msgstr ""

#: ../../sources/tutorials/pong.rst:259
msgid "Scheduling Functions on the Clock"
msgstr ""

#: ../../sources/tutorials/pong.rst:261
msgid ""
"We need the ``move`` method of our ball to be called regularly. Luckily, "
"Kivy makes this pretty easy by letting us schedule any function we want "
"using the :class:`~kivy.clock.Clock` and specifying the interval::"
msgstr ""

#: ../../sources/tutorials/pong.rst:267
msgid ""
"This line for example, would cause the ``update`` function of the game "
"object to be called once every 60th of a second (60 times per second)."
msgstr ""

#: ../../sources/tutorials/pong.rst:271
msgid "Object Properties/References"
msgstr ""

#: ../../sources/tutorials/pong.rst:273
msgid ""
"We have another problem though.  We'd like to make sure the PongBall has "
"its ``move`` function called regularly, but in our code we don't have any"
" references to the ball object since we just added it via the kv file "
"inside the kv rule for the ``PongGame`` class. The only reference to our "
"game is the one we return in the applications build method."
msgstr ""

#: ../../sources/tutorials/pong.rst:279
msgid ""
"Since we're going to have to do more than just move the ball (e.g. bounce"
" it off the walls and later the players racket), we'll probably need an "
"``update`` method for our ``PongGame`` class anyway. Furthermore, given "
"that we have a reference to the game object already, we can easily "
"schedule its new ``update`` method when the application gets built::"
msgstr ""

#: ../../sources/tutorials/pong.rst:299
msgid ""
"However, that still doesn't change the fact that we don't have a "
"reference to the ``PongBall`` child widget created by the kv rule.  To "
"fix this, we can add an :class:`ObjectProperty "
"<kivy.properties.ObjectProperty>` to the PongGame class, and hook it up "
"to the widget created in the kv rule. Once that's done, we can easily "
"reference the ball property inside the ``update`` method and even make it"
" bounce off the edges::"
msgstr ""

#: ../../sources/tutorials/pong.rst:321
msgid ""
"Don't forget to hook it up in the kv file, by giving the child widget an "
"id and setting the PongGame's ``ball`` ObjectProperty to that id:"
msgstr ""

#: ../../sources/tutorials/pong.rst:338
msgid ""
"At this point everything is hooked up for the ball to bounce around. If "
"you're coding along as we go, you might be wondering why the ball isn't "
"moving anywhere.  The ball's velocity is set to 0 on both x and y. In the"
" code listing below, a ``serve_ball`` method is added to the ``PongGame``"
" class and called in the app's ``build`` method. It sets a random x and y"
" velocity for the ball, and also resets the position, so we can use it "
"later to reset the ball when a player has scored a point."
msgstr ""

#: ../../sources/tutorials/pong.rst:346
msgid "Here is the entire code for this step:"
msgstr ""

#: ../../sources/tutorials/pong.rst:358
msgid "Connect Input Events"
msgstr ""

#: ../../sources/tutorials/pong.rst:362
msgid "Adding Players and reacting to touch input"
msgstr ""

#: ../../sources/tutorials/pong.rst:364
msgid ""
"Sweet, our ball is bouncing around. The only things missing now are the "
"movable player rackets and keeping track of the score.  We won't go over "
"all the details of creating the class and kv rules again, since those "
"concepts were already covered in the previous steps. Instead, let's focus"
" on how to move the Player widgets in response to user input. You can get"
" the whole code and kv rules for the ``PongPaddle`` class at the end of "
"this section."
msgstr ""

#: ../../sources/tutorials/pong.rst:371
msgid ""
"In Kivy, a widget can react to input by implementing the "
":meth:`on_touch_down <kivy.uix.widget.Widget.on_touch_down>`, the "
":meth:`on_touch_move <kivy.uix.widget.Widget.on_touch_move>` and the "
":meth:`on_touch_up <kivy.uix.widget.Widget.on_touch_up>` methods. By "
"default, the Widget class implements these methods by just calling the "
"corresponding method on all its child widgets to pass on the event until "
"one of the children returns ``True``."
msgstr ""

#: ../../sources/tutorials/pong.rst:379
msgid ""
"Pong is pretty simple. The rackets just need to move up and down. In fact"
" it's so simple, we don't even really need to have the player widgets "
"handle the events themselves. We'll just implement the ``on_touch_move`` "
"function for the ``PongGame`` class and have it set the position of the "
"left or right player based on whether the touch occurred on the left or "
"right side of the screen."
msgstr ""

#: ../../sources/tutorials/pong.rst:385
msgid "Check the ``on_touch_move`` handler::"
msgstr ""

#: ../../sources/tutorials/pong.rst:393
msgid ""
"We'll keep the score for each player in a "
":class:`~kivy.properties.NumericProperty`. The score labels of the "
"``PongGame`` are kept updated by changing the NumericProperty ``score``, "
"which in turn updates the ``PongGame`` child labels text property. This "
"binding occurs because Kivy :mod:`~kivy.properties` automatically bind to"
" any references in their corresponding kv files. When the ball escapes "
"out of the sides, we'll update the score and serve the ball again by "
"changing the ``update`` method in the ``PongGame`` class. The "
"``PongPaddle`` class also implements a ``bounce_ball method``, so that "
"the ball bounces differently based on where it hits the racket. Here is "
"the code for the `PongPaddle` class::"
msgstr ""

#: ../../sources/tutorials/pong.rst:417
msgid ""
"This algorithm for ball bouncing is very simple, but will have strange "
"behavior if the ball hits the paddle from the side or bottom...this is "
"something you could try to fix yourself if you like."
msgstr ""

#: ../../sources/tutorials/pong.rst:421
msgid "And here it is in context. Pretty much done:"
msgstr ""

#: ../../sources/tutorials/pong.rst:435
msgid "Where To Go Now?"
msgstr ""

#: ../../sources/tutorials/pong.rst:439
msgid "Have some fun"
msgstr ""

#: ../../sources/tutorials/pong.rst:441
msgid ""
"Well, the pong game is pretty much complete. If you understood all of the"
" things that are covered in this tutorial, give yourself a pat on the "
"back and think about how you could improve the game. Here are a few ideas"
" of things you could do:"
msgstr ""

#: ../../sources/tutorials/pong.rst:446
msgid ""
"Add some nicer graphics / images. (Hint: check out the "
":attr:`~kivy.graphics.instructions.VertexInstruction.source` property on "
"the graphics instructions like :attr:`~kivy.graphics.Line.circle` or "
":class:`~kivy.graphics.Rectangle`, to set an image as the texture.)"
msgstr ""

#: ../../sources/tutorials/pong.rst:452
msgid ""
"Make the game end after a certain score. Maybe once a player has 10 "
"points, you can display a large \"PLAYER 1 WINS\" label and/or add a main"
" menu to start, pause and reset the game. (Hint: check out the "
":class:`~kivy.uix.button.Button` and :class:`~kivy.uix.label.Label` "
"classes, and figure out how to use their `add_widget` and `remove_widget`"
" functions to add or remove widgets dynamically."
msgstr ""

#: ../../sources/tutorials/pong.rst:460
msgid ""
"Make it a 4 player Pong Game.  Most tablets have Multi-Touch support, so "
"wouldn't it be cool to have a player on each side and have four people "
"play at the same time?"
msgstr ""

#: ../../sources/tutorials/pong.rst:464
msgid ""
"Fix the simplistic collision check so hitting the ball with an end of the"
" paddle results in a more realistic bounce."
msgstr ""

#: ../../sources/tutorials/pong.rst:469
msgid ""
"You can find the entire source code and source code files for each step "
"in the Kivy examples directory under tutorials/pong/"
msgstr ""

