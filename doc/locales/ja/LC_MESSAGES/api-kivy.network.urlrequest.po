# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-15 00:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../sources/api-kivy.network.urlrequest.rst:3
msgid "UrlRequest"
msgstr ""

#: kivy.network.urlrequest:4 of
msgid ""
"You can use the :class:`UrlRequest` to make asynchronous requests on the "
"web and get the result when the request is completed. The spirit is the "
"same as the XHR object in Javascript."
msgstr ""

#: kivy.network.urlrequest:8 of
msgid ""
"The content is also decoded if the Content-Type is application/json and "
"the result automatically passed through json.loads."
msgstr ""

#: kivy.network.urlrequest:12 of
msgid "The syntax to create a request::"
msgstr ""

#: kivy.network.urlrequest:21 of
msgid ""
"Only the first argument is mandatory: the rest are optional. By default, "
"a \"GET\" request will be sent. If the :attr:`UrlRequest.req_body` is not"
" None, a \"POST\" request will be sent. It's up to you to adjust "
":attr:`UrlRequest.req_headers` to suit your requirements and the response"
" to the request will be accessible as the parameter called \"result\" on "
"the callback function of the on_success event."
msgstr ""

#: kivy.network.urlrequest:29 of
msgid "Example of fetching JSON::"
msgstr ""

#: kivy.network.urlrequest:37 of
msgid "Example of Posting data (adapted from httplib example)::"
msgstr ""

#: kivy.network.urlrequest:52 of
msgid "If you want a synchronous request, you can call the wait() method."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`threading.Thread`"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:1 of
msgid "A UrlRequest. See module documentation for usage."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:3 of
msgid "Add `debug` parameter"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:6 of
msgid "Add `method` parameter"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:11 of
msgid ""
"Parameter `decode` added. Parameter `file_path` added. Parameter "
"`on_redirect` added. Parameter `on_failure` added."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:18 of
msgid "Parameter `ca_file` added. Parameter `verify` added."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:23 of
msgid "Parameters `proxy_host`, `proxy_port` and `proxy_headers` added."
msgstr ""

#: kivy.network.urlrequest.UrlRequest of
msgid "Parameters"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:26 of
msgid "`url`: str"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:27 of
msgid "Complete url string to call."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:28 of
msgid "`on_success`: callback(request, result)"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:29 of
msgid "Callback function to call when the result has been fetched."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:30 of
msgid "`on_redirect`: callback(request, result)"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:31 of
msgid "Callback function to call if the server returns a Redirect."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:33 of
msgid "`on_failure`: callback(request, result)"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:33 of
msgid "Callback function to call if the server returns a Client or Server Error."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:35 of
msgid "`on_error`: callback(request, error)"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:36 of
msgid "Callback function to call if an error occurs."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:40 of
msgid "`on_progress`: callback(request, current_size, total_size)"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:38 of
msgid ""
"Callback function that will be called to report progression of the "
"download. `total_size` might be -1 if no Content-Length has been reported"
" in the http response. This callback will be called after each "
"`chunk_size` is read."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:43 of
msgid "`req_body`: str, defaults to None"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:43 of
msgid ""
"Data to sent in the request. If it's not None, a POST will be done "
"instead of a GET."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:45 of
msgid "`req_headers`: dict, defaults to None"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:46 of
msgid "Custom headers to add to the request."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:51 of
msgid "`chunk_size`: int, defaults to 8192"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:48 of
msgid ""
"Size of each chunk to read, used only when `on_progress` callback has "
"been set. If you decrease it too much, a lot of on_progress callbacks "
"will be fired and will slow down your download. If you want to have the "
"maximum download speed, increase the chunk_size or don't use "
"``on_progress``."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:53 of
msgid "`timeout`: int, defaults to None"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:54 of
msgid "If set, blocking operations will timeout after this many seconds."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:55 of
msgid "`method`: str, defaults to 'GET' (or 'POST' if ``body`` is specified)"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:56 of
msgid "The HTTP method to use."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:57 of
msgid "`decode`: bool, defaults to True"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:58 of
msgid "If False, skip decoding of the response."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:60 of
msgid "`debug`: bool, defaults to False"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:60 of
msgid ""
"If True, it will use the Logger.debug to print information about url "
"access/progression/errors."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:63 of
msgid "`file_path`: str, defaults to None"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:63 of
msgid ""
"If set, the result of the UrlRequest will be written to this path instead"
" of in memory."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:66 of
msgid "`ca_file`: str, defaults to None"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:66 of
msgid ""
"Indicates a SSL CA certificate file path to validate HTTPS certificates "
"against"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:68 of
msgid "`verify`: bool, defaults to True"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:69 of
msgid "If False, disables SSL CA certificate verification"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:70 of
msgid "`proxy_host`: str, defaults to None"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:71 of
msgid "If set, the proxy host to use for this connection."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:73 of
msgid "`proxy_port`: int, defaults to None"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:73 of
msgid ""
"If set, and `proxy_host` is also set, the port to use for connecting to "
"the proxy server."
msgstr ""

#: kivy.network.urlrequest.UrlRequest:78 of
msgid "`proxy_headers`: dict, defaults to None"
msgstr ""

#: kivy.network.urlrequest.UrlRequest:76 of
msgid ""
"If set, and `proxy_host` is also set, the headers to send to the proxy "
"server in the ``CONNECT`` request."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.chunk_size:1 of
msgid ""
"Return the size of a chunk, used only in \"progress\" mode (when "
"on_progress callback is set.)"
msgstr ""

#: kivy.network.urlrequest.UrlRequest.decode_result:1 of
msgid ""
"Decode the result fetched from url according to his Content-Type. "
"Currently supports only application/json."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.error:1 of
msgid ""
"Return the error of the request. This value is not determined until the "
"request is completed."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.get_connection_for_scheme:1 of
msgid ""
"Return the Connection class for a particular scheme. This is an internal "
"function that can be expanded to support custom schemes."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.get_connection_for_scheme:5 of
msgid "Actual supported schemes: http, https."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.is_finished:1 of
msgid ""
"Return True if the request has finished, whether it's a success or a "
"failure."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.req_body:1 of
msgid "Request body passed in __init__"
msgstr ""

#: kivy.network.urlrequest.UrlRequest.req_headers:1 of
msgid "Request headers passed in __init__"
msgstr ""

#: kivy.network.urlrequest.UrlRequest.resp_headers:1 of
msgid ""
"If the request has been completed, return a dictionary containing the "
"headers of the response. Otherwise, it will return None."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.resp_status:1 of
msgid ""
"Return the status code of the response if the request is complete, "
"otherwise return None."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.result:1 of
msgid ""
"Return the result of the request. This value is not determined until the "
"request is finished."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.run:1 of
msgid "Method representing the thread's activity."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.run:3 of
msgid ""
"You may override this method in a subclass. The standard run() method "
"invokes the callable object passed to the object's constructor as the "
"target argument, if any, with sequential and keyword arguments taken from"
" the args and kwargs arguments, respectively."
msgstr ""

#: kivy.network.urlrequest.UrlRequest.url:1 of
msgid "Url of the request"
msgstr ""

#: kivy.network.urlrequest.UrlRequest.wait:1 of
msgid "Wait for the request to finish (until :attr:`resp_status` is not None)"
msgstr ""

#: kivy.network.urlrequest.UrlRequest.wait:5 of
msgid ""
"This method is intended to be used in the main thread, and the callback "
"will be dispatched from the same thread from which you're calling."
msgstr ""

