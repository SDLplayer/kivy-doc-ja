# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-15 00:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../sources/api-kivy.core.text.rst:3
msgid "Text"
msgstr ""

#: kivy.core.text:2 of
msgid ""
"An abstraction of text creation. Depending of the selected backend, the "
"accuracy of text rendering may vary."
msgstr ""

#: kivy.core.text:5 of
msgid ":attr:`LabelBase.line_height` added."
msgstr ""

#: kivy.core.text:8 of
msgid ""
"The :class:`LabelBase` does not generate any texture if the text has a "
"width <= 1."
msgstr ""

#: kivy.core.text:12 of
msgid ""
"This is the backend layer for getting text out of different text "
"providers, you should only be using this directly if your needs aren't "
"fulfilled by the :class:`~kivy.uix.label.Label`."
msgstr ""

#: kivy.core.text:16 of
msgid "Usage example::"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`builtins.object`"
msgstr ""

#: kivy.core.text.LabelBase:1 of
msgid ""
"Core text label. This is the abstract class used by different backends to"
" render text."
msgstr ""

#: kivy.core.text.LabelBase:5 of
msgid "The core text label can't be changed at runtime. You must recreate one."
msgstr ""

#: kivy.core.text.LabelBase of
msgid "Parameters"
msgstr ""

#: kivy.core.text.LabelBase:8 of
msgid "`font_size`: int, defaults to 12"
msgstr ""

#: kivy.core.text.LabelBase:9 of
msgid "Font size of the text"
msgstr ""

#: kivy.core.text.LabelBase:10 of
msgid "`font_name`: str, defaults to DEFAULT_FONT"
msgstr ""

#: kivy.core.text.LabelBase:11 of
msgid "Font name of the text"
msgstr ""

#: kivy.core.text.LabelBase:12 of
msgid "`bold`: bool, defaults to False"
msgstr ""

#: kivy.core.text.LabelBase:13 of
msgid "Activate \"bold\" text style"
msgstr ""

#: kivy.core.text.LabelBase:14 of
msgid "`italic`: bool, defaults to False"
msgstr ""

#: kivy.core.text.LabelBase:15 of
msgid "Activate \"italic\" text style"
msgstr ""

#: kivy.core.text.LabelBase:17 of
msgid "`text_size`: tuple, defaults to (None, None)"
msgstr ""

#: kivy.core.text.LabelBase:17 of
msgid ""
"Add constraint to render the text (inside a bounding box). If no size is "
"given, the label size will be set to the text size."
msgstr ""

#: kivy.core.text.LabelBase:19 of
msgid "`padding`: float, defaults to None"
msgstr ""

#: kivy.core.text.LabelBase:20 of
msgid "If it's a float, it will set padding_x and padding_y"
msgstr ""

#: kivy.core.text.LabelBase:21 of
msgid "`padding_x`: float, defaults to 0.0"
msgstr ""

#: kivy.core.text.LabelBase:22 of
msgid "Left/right padding"
msgstr ""

#: kivy.core.text.LabelBase:23 of
msgid "`padding_y`: float, defaults to 0.0"
msgstr ""

#: kivy.core.text.LabelBase:24 of
msgid "Top/bottom padding"
msgstr ""

#: kivy.core.text.LabelBase:25 of
msgid "`halign`: str, defaults to \"left\""
msgstr ""

#: kivy.core.text.LabelBase:26 of
msgid "Horizontal text alignment inside the bounding box"
msgstr ""

#: kivy.core.text.LabelBase:27 of
msgid "`valign`: str, defaults to \"bottom\""
msgstr ""

#: kivy.core.text.LabelBase:28 of
msgid "Vertical text alignment inside the bounding box"
msgstr ""

#: kivy.core.text.LabelBase:32 of
msgid "`shorten`: bool, defaults to False"
msgstr ""

#: kivy.core.text.LabelBase:30 of
msgid ""
"Indicate whether the label should attempt to shorten its textual contents"
" as much as possible if a `size` is given. Setting this to True without "
"an appropriately set size will lead to unexpected results."
msgstr ""

#: kivy.core.text.LabelBase:37 of
msgid "`shorten_from`: str, defaults to `center`"
msgstr ""

#: kivy.core.text.LabelBase:35 of
msgid ""
"The side from which we should shorten the text from, can be left, right, "
"or center. E.g. if left, the ellipsis will appear towards the left side "
"and it will display as much text starting from the right as possible."
msgstr ""

#: kivy.core.text.LabelBase:41 of
msgid "`split_str`: string, defaults to `' '` (space)"
msgstr ""

#: kivy.core.text.LabelBase:40 of
msgid ""
"The string to use to split the words by when shortening. If empty, we can"
" split after every character filling up the line as much as possible."
msgstr ""

#: kivy.core.text.LabelBase:44 of
msgid "`max_lines`: int, defaults to 0 (unlimited)"
msgstr ""

#: kivy.core.text.LabelBase:44 of
msgid ""
"If set, this indicate how maximum line are allowed to render the text. "
"Works only if a limitation on text_size is set."
msgstr ""

#: kivy.core.text.LabelBase:46 of
msgid "`mipmap`: bool, defaults to False"
msgstr ""

#: kivy.core.text.LabelBase:47 of
msgid "Create a mipmap for the texture"
msgstr ""

#: kivy.core.text.LabelBase:49 of
msgid "`strip`: bool, defaults to False"
msgstr ""

#: kivy.core.text.LabelBase:49 of
msgid ""
"Whether each row of text has its leading and trailing spaces stripped. If"
" `halign` is `justify` it is implicitly True."
msgstr ""

#: kivy.core.text.LabelBase:54 of
msgid "`strip_reflow`: bool, defaults to True"
msgstr ""

#: kivy.core.text.LabelBase:52 of
msgid ""
"Whether text that has been reflowed into a second line should be "
"stripped, even if `strip` is False. This is only in effect when "
"`size_hint_x` is not None, because otherwise lines are never split."
msgstr ""

#: kivy.core.text.LabelBase:57 of
msgid "`unicode_errors`: str, defaults to `'replace'`"
msgstr ""

#: kivy.core.text.LabelBase:57 of
msgid ""
"How to handle unicode decode errors. Can be `'strict'`, `'replace'` or "
"`'ignore'`."
msgstr ""

#: kivy.core.text.LabelBase:59 of
msgid "`outline_width`: int, defaults to None"
msgstr ""

#: kivy.core.text.LabelBase:60 of
msgid "Width in pixels for the outline."
msgstr ""

#: kivy.core.text.LabelBase:62 of
msgid "`outline_color`: tuple, defaults to (0, 0, 0)"
msgstr ""

#: kivy.core.text.LabelBase:62 of
msgid "Color of the outline."
msgstr ""

#: kivy.core.text.LabelBase:64 of
msgid "`outline_width` and `outline_color` were added."
msgstr ""

#: kivy.core.text.LabelBase:67 of
msgid ""
"`strip`, `strip_reflow`, `shorten_from`, `split_str`, and "
"`unicode_errors` were added."
msgstr ""

#: kivy.core.text.LabelBase:71 of
msgid ""
"`padding_x` and `padding_y` has been fixed to work as expected. In the "
"past, the text was padded by the negative of their values."
msgstr ""

#: kivy.core.text.LabelBase:75 of
msgid "`max_lines` parameters has been added."
msgstr ""

#: kivy.core.text.LabelBase:78 of
msgid "`size` have been deprecated and replaced with `text_size`."
msgstr ""

#: kivy.core.text.LabelBase:81 of
msgid ""
"The `valign` is now respected. This wasn't the case previously so you "
"might have an issue in your application if you have not considered this."
msgstr ""

#: kivy.core.text.LabelBase.content_height:1 of
msgid ""
"Return the content height; i.e. the height of the text without any "
"padding."
msgstr ""

#: kivy.core.text.LabelBase.content_size:1 of
msgid "Return the content size (width, height)"
msgstr ""

#: kivy.core.text.LabelBase.content_width:1 of
msgid "Return the content width; i.e. the width of the text without any padding."
msgstr ""

#: kivy.core.text.LabelBase.fontid:1 of
msgid "Return a unique id for all font parameters"
msgstr ""

#: kivy.core.text.LabelBase.get_cached_extents:1 of
msgid "Returns a cached version of the :meth:`get_extents` function."
msgstr ""

#: kivy.core.text.LabelBase.get_cached_extents:13 of
msgid ""
"This method returns a size measuring function that is valid for the font "
"settings used at the time :meth:`get_cached_extents` was called. Any "
"change in the font settings will render the returned function incorrect. "
"You should only use this if you know what you're doing."
msgstr ""

#: kivy.core.text.LabelBase.get_extents:1 of
msgid "Return a tuple (width, height) indicating the size of the specified text"
msgstr ""

#: kivy.core.text.LabelBase.get_system_fonts_dir:1 of
msgid "Return the directories used by the system for fonts."
msgstr ""

#: kivy.core.text.LabelBase.label:1 kivy.core.text.LabelBase.text:1 of
msgid "Get/Set the text"
msgstr ""

#: kivy.core.text.LabelBase.refresh:1 of
msgid "Force re-rendering of the text"
msgstr ""

#: kivy.core.text.LabelBase.register:1 of
msgid "Register an alias for a Font."
msgstr ""

#: kivy.core.text.LabelBase.register:5 of
msgid ""
"If you're using a ttf directly, you might not be able to use the "
"bold/italic properties of the ttf version. If the font is delivered in "
"multiple files (one regular, one italic and one bold), then you need to "
"register these files and use the alias instead."
msgstr ""

#: kivy.core.text.LabelBase.register:11 of
msgid ""
"All the fn_regular/fn_italic/fn_bold parameters are resolved with "
":func:`kivy.resources.resource_find`. If fn_italic/fn_bold are None, "
"fn_regular will be used instead."
msgstr ""

#: kivy.core.text.LabelBase.render:1 of
msgid ""
"Return a tuple (width, height) to create the image with the user "
"constraints. (width, height) includes the padding."
msgstr ""

#: kivy.core.text.LabelBase.shorten:1 of
msgid ""
"Shortens the text to fit into a single line by the width specified by "
":attr:`text_size` [0]. If :attr:`text_size` [0] is None, it returns text "
"text unchanged."
msgstr ""

#: kivy.core.text.LabelBase.shorten:5 of
msgid ""
":attr:`split_str` and :attr:`shorten_from` determines how the text is "
"shortened."
msgstr ""

#: kivy.core.text.LabelBase.shorten of
msgid "params"
msgstr ""

#: kivy.core.text.LabelBase.shorten:10 of
msgid ""
"`text` str, the text to be shortened. `margin` int, the amount of space "
"to leave between the margins and the text. This is in addition to "
":attr:`padding_x`."
msgstr ""

#: kivy.core.text.LabelBase.shorten of
msgid "Returns"
msgstr ""

#: kivy.core.text.LabelBase.shorten:14 of
msgid "the text shortened to fit into a single line."
msgstr ""

#: kivy.core.text.LabelBase.text_size:1 of
msgid "Get/set the (width, height) of the ' 'contrained rendering box"
msgstr ""

#: kivy.core.text.LabelBase.usersize:1 of
msgid "(deprecated) Use text_size instead."
msgstr ""

