# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-15 00:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../sources/api-kivy.input.rst:3
msgid "Input management"
msgstr ""

#: kivy.input:2 of
msgid ""
"Our input system is wide and simple at the same time. We are currently "
"able to natively support :"
msgstr ""

#: kivy.input:5 of
msgid "Windows multitouch events (pencil and finger)"
msgstr ""

#: kivy.input:6 of
msgid "OS X touchpads"
msgstr ""

#: kivy.input:7 of
msgid "Linux multitouch events (kernel and mtdev)"
msgstr ""

#: kivy.input:8 of
msgid "Linux wacom drivers (pencil and finger)"
msgstr ""

#: kivy.input:9 of
msgid "TUIO"
msgstr ""

#: kivy.input:11 of
msgid ""
"All the input management is configurable in the Kivy :mod:`~kivy.config`."
" You can easily use many multitouch devices in one Kivy application."
msgstr ""

#: kivy.input:14 of
msgid ""
"When the events have been read from the devices, they are dispatched "
"through a post processing module before being sent to your application. "
"We also have several default modules for :"
msgstr ""

#: kivy.input:18 of
msgid "Double tap detection"
msgstr ""

#: kivy.input:19 of
msgid "Decreasing jittering"
msgstr ""

#: kivy.input:20 of
msgid "Decreasing the inaccuracy of touch on \"bad\" DIY hardware"
msgstr ""

#: kivy.input:21 of
msgid "Ignoring regions"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.input.motionevent.MotionEvent`"
msgstr ""

#: kivy.input.MotionEvent:1 of
msgid "Abstract class that represents an input event (touch or non-touch)."
msgstr ""

#: kivy.input.MotionEvent of
msgid "Parameters"
msgstr ""

#: kivy.input.MotionEvent:4 of
msgid "`id`: str"
msgstr ""

#: kivy.input.MotionEvent:5 of
msgid "unique ID of the MotionEvent"
msgstr ""

#: kivy.input.MotionEvent:8 of
msgid "`args`: list"
msgstr ""

#: kivy.input.MotionEvent:7 of
msgid "list of parameters, passed to the depack() function"
msgstr ""

#: kivy.input.MotionEvent.apply_transform_2d:1 of
msgid "Apply a transformation on x, y, z, px, py, pz, ox, oy, oz, dx, dy, dz"
msgstr ""

#: kivy.input.MotionEvent.copy_to:1 of
msgid "Copy some attribute to another touch object."
msgstr ""

#: kivy.input.MotionEvent.depack:1 of
msgid "Depack `args` into attributes of the class"
msgstr ""

#: kivy.input.MotionEvent.device:1 of
msgid "Device used for creating this touch"
msgstr ""

#: kivy.input.MotionEvent.distance:1 of
msgid "Return the distance between the current touch and another touch."
msgstr ""

#: kivy.input.MotionEvent.double_tap_time:1 of
msgid ""
"If the touch is a :attr:`is_double_tap`, this is the time between the "
"previous tap and the current touch."
msgstr ""

#: kivy.input.MotionEvent.dpos:1 of
msgid ""
"Return delta between last position and current position, in the screen "
"coordinate system (self.dx, self.dy)"
msgstr ""

#: kivy.input.MotionEvent.dsx:1 of
msgid "Delta between self.sx and self.psx, in 0-1 range."
msgstr ""

#: kivy.input.MotionEvent.dsy:1 of
msgid "Delta between self.sy and self.psy, in 0-1 range."
msgstr ""

#: kivy.input.MotionEvent.dsz:1 of
msgid "Delta between self.sz and self.psz, in 0-1 range."
msgstr ""

#: kivy.input.MotionEvent.dx:1 of
msgid "Delta between self.x and self.px, in window range"
msgstr ""

#: kivy.input.MotionEvent.dy:1 of
msgid "Delta between self.y and self.py, in window range"
msgstr ""

#: kivy.input.MotionEvent.dz:1 of
msgid "Delta between self.z and self.pz, in window range"
msgstr ""

#: kivy.input.MotionEvent.grab:1 of
msgid ""
"Grab this motion event. You can grab a touch if you want to receive "
"subsequent :meth:`~kivy.uix.widget.Widget.on_touch_move` and "
":meth:`~kivy.uix.widget.Widget.on_touch_up` events, even if the touch is "
"not dispatched by the parent:"
msgstr ""

#: kivy.input.MotionEvent.grab_current:1 of
msgid ""
"Used to determine which widget the touch is being dispatched to. Check "
"the :meth:`grab` function for more information."
msgstr ""

#: kivy.input.MotionEvent.id:1 of
msgid ""
"Id of the touch, not uniq. This is generally the Id set by the input "
"provider, like ID in TUIO. If you have multiple TUIO source, the same id "
"can be used. Prefer to use :attr:`uid` attribute instead."
msgstr ""

#: kivy.input.MotionEvent.is_double_tap:1 of
msgid "Indicate if the touch is a double tap or not"
msgstr ""

#: kivy.input.MotionEvent.is_mouse_scrolling:1 of
msgid "Returns True if the touch is a mousewheel scrolling"
msgstr ""

#: kivy.input.MotionEvent.is_touch:1 of
msgid ""
"True if the Motion Event is a Touch. Can be also verified is `pos` is "
":attr:`profile`."
msgstr ""

#: kivy.input.MotionEvent.is_triple_tap:1 of
msgid "Indicate if the touch is a triple tap or not"
msgstr ""

#: kivy.input.MotionEvent.move:1 of
msgid "Move the touch to another position"
msgstr ""

#: kivy.input.MotionEvent.opos:1 of
msgid ""
"Return the initial position of the touch in the screen coordinate system "
"(self.ox, self.oy)"
msgstr ""

#: kivy.input.MotionEvent.osx:1 of
msgid "Origin X position, in 0-1 range."
msgstr ""

#: kivy.input.MotionEvent.osy:1 of
msgid "Origin Y position, in 0-1 range."
msgstr ""

#: kivy.input.MotionEvent.osz:1 of
msgid "Origin Z position, in 0-1 range."
msgstr ""

#: kivy.input.MotionEvent.ox:1 of
msgid "Origin X position, in window range"
msgstr ""

#: kivy.input.MotionEvent.oy:1 of
msgid "Origin Y position, in window range"
msgstr ""

#: kivy.input.MotionEvent.oz:1 of
msgid "Origin Z position, in window range"
msgstr ""

#: kivy.input.MotionEvent.pop:1 of
msgid "Pop attributes values from the stack"
msgstr ""

#: kivy.input.MotionEvent.pos:1 of
msgid "Position (X, Y), in window range"
msgstr ""

#: kivy.input.MotionEvent.ppos:1 of
msgid ""
"Return the previous position of the touch in the screen coordinate system"
" (self.px, self.py)"
msgstr ""

#: kivy.input.MotionEvent.profile:1 of
msgid "Profiles currently used in the touch"
msgstr ""

#: kivy.input.MotionEvent.psx:1 of
msgid "Previous X position, in 0-1 range."
msgstr ""

#: kivy.input.MotionEvent.psy:1 of
msgid "Previous Y position, in 0-1 range."
msgstr ""

#: kivy.input.MotionEvent.psz:1 of
msgid "Previous Z position, in 0-1 range."
msgstr ""

#: kivy.input.MotionEvent.push:1 of
msgid "Push attribute values in `attrs` onto the stack"
msgstr ""

#: kivy.input.MotionEvent.push_attrs_stack:1 of
msgid ""
"Attributes to push by default, when we use :meth:`push` : x, y, z, dx, "
"dy, dz, ox, oy, oz, px, py, pz."
msgstr ""

#: kivy.input.MotionEvent.px:1 of
msgid "Previous X position, in window range"
msgstr ""

#: kivy.input.MotionEvent.py:1 of
msgid "Previous Y position, in window range"
msgstr ""

#: kivy.input.MotionEvent.pz:1 of
msgid "Previous Z position, in window range"
msgstr ""

#: kivy.input.MotionEvent.scale_for_screen:1 of
msgid "Scale position for the screen"
msgstr ""

#: kivy.input.MotionEvent.shape:1 of
msgid ""
"Shape of the touch, subclass of :class:`~kivy.input.shape.Shape`. By "
"default, the property is set to None"
msgstr ""

#: kivy.input.MotionEvent.spos:1 of
msgid "Return the position in the 0-1 coordinate system (self.sx, self.sy)"
msgstr ""

#: kivy.input.MotionEvent.sx:1 of
msgid "X position, in 0-1 range"
msgstr ""

#: kivy.input.MotionEvent.sy:1 of
msgid "Y position, in 0-1 range"
msgstr ""

#: kivy.input.MotionEvent.sz:1 of
msgid "Z position, in 0-1 range"
msgstr ""

#: kivy.input.MotionEvent.time_end:1 of
msgid "Time of the end event (last touch usage)"
msgstr ""

#: kivy.input.MotionEvent.time_start:1 of
msgid "Initial time of the touch creation"
msgstr ""

#: kivy.input.MotionEvent.time_update:1 of
msgid "Time of the last update"
msgstr ""

#: kivy.input.MotionEvent.triple_tap_time:1 of
msgid ""
"If the touch is a :attr:`is_triple_tap`, this is the time between the "
"first tap and the current touch."
msgstr ""

#: kivy.input.MotionEvent.ud:1 of
msgid ""
"User data dictionary. Use this dictionary to save your own data on the "
"touch."
msgstr ""

#: kivy.input.MotionEvent.uid:1 of
msgid ""
"Uniq ID of the touch. You can safely use this property, it will be never "
"the same accross all existing touches."
msgstr ""

#: kivy.input.MotionEvent.ungrab:1 of
msgid "Ungrab a previously grabbed touch"
msgstr ""

#: kivy.input.MotionEvent.x:1 of
msgid "X position, in window range"
msgstr ""

#: kivy.input.MotionEvent.y:1 of
msgid "Y position, in window range"
msgstr ""

#: kivy.input.MotionEvent.z:1 of
msgid "Z position, in window range"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`builtins.object`"
msgstr ""

#: kivy.input.MotionEventProvider:1 of
msgid "Base class for a provider."
msgstr ""

#: kivy.input.MotionEventProvider.start:1 of
msgid ""
"Start the provider. This method is automatically called when the "
"application is started and if the configuration uses the current "
"provider."
msgstr ""

#: kivy.input.MotionEventProvider.stop:1 of
msgid "Stop the provider."
msgstr ""

#: kivy.input.MotionEventProvider.update:1 of
msgid ""
"Update the provider and dispatch all the new touch events though the "
"`dispatch_fn` argument."
msgstr ""

#: kivy.input.MotionEventFactory:1 of
msgid ""
"MotionEvent factory is a class that registers all availables input "
"factories. If you create a new input factory, you need to register it "
"here::"
msgstr ""

#: kivy.input.MotionEventFactory.get:1 of
msgid "Get a provider class from the provider id"
msgstr ""

#: kivy.input.MotionEventFactory.list:1 of
msgid "Get a list of all available providers"
msgstr ""

#: kivy.input.MotionEventFactory.register:1 of
msgid "Register a input provider in the database"
msgstr ""

