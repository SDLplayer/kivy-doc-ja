# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-30 06:27+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.base.rst:3
msgid "Kivy Base"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base:2
msgid "This module contains core Kivy functionality and is not intended for end users. Feel free to look though it, but calling any of these methods directly may well result in unpredictable behavior."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base:7
msgid "Event loop management"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoop:1
msgid "EventLoop instance"
msgstr ""

#: ../../<autodoc>:1
msgid "ベースクラス: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase:1
msgid "Main event loop. This loop handles the updating of input and dispatching events."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.add_event_listener:1
msgid "Add a new event listener for getting touch events."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.add_input_provider:1
msgid "Add a new input provider to listen for touch events."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.add_postproc_module:1
msgid "Add a postproc input module (DoubleTap, TripleTap, DeJitter RetainTouch are defaults)."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.close:1
msgid "Exit from the main loop and stop all configured input providers."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.dispatch_input:1
msgid "Called by idle() to read events from input providers, pass events to postproc, and dispatch final events."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.ensure_window:1
msgid "Ensure that we have a window."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.exit:1
msgid "Close the main loop and close the window."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.idle:1
msgid "This function is called after every frame. By default:"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.idle:3
msgid "it \"ticks\" the clock to the next frame."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.idle:4
msgid "it reads all input and dispatches events."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.idle:5
msgid "it dispatches `on_update`, `on_draw` and `on_flip` events to the window."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.on_pause:1
msgid "Event handler for `on_pause` which will be fired when the event loop is paused."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.on_start:1
msgid "Event handler for `on_start` which will be fired right after all input providers have been started."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.on_stop:1
msgid "Event handler for `on_stop` events which will be fired right after all input providers have been stopped."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.post_dispatch_input:1
msgid "This function is called by dispatch_input() when we want to dispatch an input event. The event is dispatched to all listeners and if grabbed, it's dispatched to grabbed widgets."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.remove_android_splash:1
msgid "Remove android presplash in SDL2 bootstrap."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.remove_event_listener:1
msgid "Remove an event listener from the list."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.remove_input_provider:1
msgid "Remove an input provider."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.remove_postproc_module:1
msgid "Remove a postproc module."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.run:1
msgid "Main loop"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.set_window:1
msgid "Set the window used for the event loop."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.start:1
msgid "Must be called only once before run(). This starts all configured input providers."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.stop:1
msgid "Stop all input providers and call callbacks registered using EventLoop.add_stop_callback()."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.EventLoopBase.touches:1
msgid "Return the list of all touches currently in down or move states."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
msgid "ベースクラス: :class:`builtins.object`"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.ExceptionHandler:1
msgid "Base handler that catches exceptions in :func:`runTouchApp`. You can subclass and extend it as follows::"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.ExceptionHandler:11
msgid "All exceptions will be set to PASS, and logged to the console!"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.ExceptionHandler.handle_exception:1
msgid "Handle one exception, defaults to returning ExceptionManager.STOP."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.ExceptionManagerBase:1
msgid "ExceptionManager manages exceptions handlers."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.ExceptionManagerBase.add_handler:1
msgid "Add a new exception handler to the stack."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.ExceptionManagerBase.handle_exception:1
msgid "Called when an exception occurred in the runTouchApp() main loop."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.ExceptionManagerBase.remove_handler:1
msgid "Remove a exception handler from the stack."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.ExceptionManager:1
msgid "Instance of a :class:`ExceptionManagerBase` implementation."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.runTouchApp:1
msgid "Static main function that starts the application loop. You can access some magic via the following arguments:"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.runTouchApp:8
msgid "`<empty>`"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.runTouchApp:6
msgid "To make dispatching work, you need at least one input listener. If not, application will leave. (MTWindow act as an input listener)"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.runTouchApp:13
msgid "`widget`"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.runTouchApp:11
msgid "If you pass only a widget, a MTWindow will be created and your widget will be added to the window as the root widget."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.runTouchApp:16
msgid "`slave`"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.runTouchApp:16
msgid "No event dispatching is done. This will be your job."
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.runTouchApp:21
msgid "`widget + slave`"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.runTouchApp:19
msgid "No event dispatching is done. This will be your job but we try to get the window (must be created by you beforehand) and add the widget to it. Very useful for embedding Kivy in another toolkit. (like Qt, check kivy-designed)"
msgstr ""

#: ../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/base.py:docstring of kivy.base.stopTouchApp:1
msgid "Stop the current application by leaving the main loop"
msgstr ""

