# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-15 00:59+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.graphics.rst:3
msgid "Graphics"
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:2
msgid "This package assembles many low level functions used for drawing. The whole graphics package is compatible with OpenGL ES 2.0 and has many rendering optimizations."
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:7
msgid "The basics"
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:9
msgid "For drawing on a screen, you will need :"
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:11
msgid "a :class:`~kivy.graphics.instructions.Canvas` object."
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:12
msgid ":class:`~kivy.graphics.instructions.Instruction` objects."
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:14
msgid "Each :class:`~kivy.uix.widget.Widget` in Kivy already has a :class:`Canvas` by default. When you create a widget, you can create all the instructions needed for drawing. If `self` is your current widget, you can do::"
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:27
msgid "The instructions :class:`Color` and :class:`Rectangle` are automatically added to the canvas object and will be used when the window is drawn."
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:32
msgid "Kivy drawing instructions are not automatically relative to the widgets position or size. You therefore you need to consider these factors when drawing. In order to make your drawing instructions relative to the widget, the instructions need either to be declared in the :mod:`KvLang <kivy.lang>` or bound to pos and size changes. Please see :ref:`adding_widget_background` for more detail."
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:40
msgid "GL Reloading mechanism"
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:44
msgid "During the lifetime of the application, the OpenGL context might be lost. This happens:"
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:47
msgid "when the window is resized on OS X or the Windows platform and you're using pygame as a window provider. This is due to SDL 1.2. In the SDL 1.2 design, it needs to recreate a GL context everytime the window is resized. This was fixed in SDL 1.3 but pygame is not yet available on it by default."
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:53
msgid "when Android releases the app resources: when your application goes to the background, Android might reclaim your opengl context to give the resource to another app. When the user switches back to your application, a newly created gl context is given to your app."
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:58
msgid "Starting from 1.2.0, we have introduced a mechanism for reloading all the graphics resources using the GPU: Canvas, FBO, Shader, Texture, VBO, and VertexBatch:"
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:62
msgid "VBO and VertexBatch are constructed by our graphics instructions. We have all the data needed to reconstruct when reloading."
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:65
msgid "Shader: same as VBO, we store the source and values used in the shader so we are able to recreate the vertex/fragment/program."
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:68
msgid "Texture: if the texture has a source (an image file or atlas), the image is reloaded from the source and reuploaded to the GPU."
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:71
msgid "You should cover these cases yourself:"
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:73
msgid "Textures without a source: if you manually created a texture and manually blit data / a buffer to it, you must handle the reloading yourself. Check the :doc:`api-kivy.graphics.texture` to learn how to manage that case. (The text rendering already generates the texture and handles the reloading. You don't need to reload text yourself.)"
msgstr ""

#: ../../../../venv/lib/python3.6/site-packages/kivy/graphics/__init__.py:docstring of kivy.graphics:79
msgid "FBO: if you added / removed / drew things multiple times on the FBO, we can't reload it. We don't keep a history of the instructions put on it. As for textures without a source, check the :doc:`api-kivy.graphics.fbo` to learn how to manage that case."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.VertexInstruction`"
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:1
msgid "A 2d Bezier curve."
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:0
#: ../../docstring of kivy.graphics.BindTexture:0
#: ../../docstring of kivy.graphics.BorderImage:0
#: ../../docstring of kivy.graphics.Ellipse:0
#: ../../docstring of kivy.graphics.Fbo:0
#: ../../docstring of kivy.graphics.Fbo.add_reload_observer:0
#: ../../docstring of kivy.graphics.Line:0
#: ../../docstring of kivy.graphics.Mesh:0
#: ../../docstring of kivy.graphics.Point:0
#: ../../docstring of kivy.graphics.Quad:0
#: ../../docstring of kivy.graphics.Rectangle:0
#: ../../docstring of kivy.graphics.Triangle:0
msgid "Parameters"
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:6
#: ../../docstring of kivy.graphics.Line:24
#: ../../docstring of kivy.graphics.Point:6
#: ../../docstring of kivy.graphics.Quad:6
#: ../../docstring of kivy.graphics.Triangle:6
msgid "`points`: list"
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:7
#: ../../docstring of kivy.graphics.Line:25
msgid "List of points in the format (x1, y1, x2, y2...)"
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:9
#: ../../docstring of kivy.graphics.Ellipse:9
msgid "`segments`: int, defaults to 180"
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:9
msgid "Define how many segments are needed for drawing the curve. The drawing will be smoother if you have many segments."
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:11
msgid "`loop`: bool, defaults to False"
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:12
msgid "Set the bezier curve to join the last point to the first."
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:13
#: ../../docstring of kivy.graphics.Line:26
msgid "`dash_length`: int"
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:14
#: ../../docstring of kivy.graphics.Line:27
msgid "Length of a segment (if dashed), defaults to 1."
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:18
#: ../../docstring of kivy.graphics.Line:29
msgid "`dash_offset`: int"
msgstr ""

#: ../../docstring of kivy.graphics.Bezier:16
msgid "Distance between the end of a segment and the start of the next one, defaults to 0. Changing this makes it dashed."
msgstr ""

#: ../../docstring of kivy.graphics.Bezier.dash_length:1
msgid "Property for getting/setting the length of the dashes in the curve."
msgstr ""

#: ../../docstring of kivy.graphics.Bezier.dash_offset:1
msgid "Property for getting/setting the offset between the dashes in the curve."
msgstr ""

#: ../../docstring of kivy.graphics.Bezier.points:1
msgid "Property for getting/settings the points of the triangle."
msgstr ""

#: ../../docstring of kivy.graphics.Bezier.points:5
msgid "This will always reconstruct the whole graphic from the new points list. It can be very CPU intensive."
msgstr ""

#: ../../docstring of kivy.graphics.Bezier.segments:1
msgid "Property for getting/setting the number of segments of the curve."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.ContextInstruction`"
msgstr ""

#: ../../docstring of kivy.graphics.BindTexture:1
msgid "BindTexture Graphic instruction. The BindTexture Instruction will bind a texture and enable GL_TEXTURE_2D for subsequent drawing."
msgstr ""

#: ../../docstring of kivy.graphics.BindTexture:8
msgid "`texture`: Texture"
msgstr ""

#: ../../docstring of kivy.graphics.BindTexture:7
msgid "Specifies the texture to bind to the given index."
msgstr ""

#: ../../docstring of kivy.graphics.BindTexture.source:1
msgid "Set/get the source (filename) to load for the texture."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.vertex_instructions.Rectangle`"
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:1
msgid "A 2d border image. The behavior of the border image is similar to the concept of a CSS3 border-image."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:7
msgid "`border`: list"
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:6
msgid "Border information in the format (bottom, right, top, left). Each value is in pixels."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:60
msgid "`auto_scale`: string"
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:14
msgid "This used to be a bool and has been changed to be a string state."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:17
msgid "Can be one of 'off', 'both', 'x_only', 'y_only', 'y_full_x_lower', 'x_full_y_lower', 'both_lower'."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:20
msgid "Autoscale controls the behavior of the 9-slice."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:22
msgid "By default the border values are preserved exactly, meaning that if the total size of the object is smaller than the border values you will have some 'rendering errors' where your texture appears inside out. This also makes it impossible to achieve a rounded button that scales larger than the size of its source texture. The various options for auto_scale will let you achieve some mixes of the 2 types of rendering."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:30
msgid "'off': is the default and behaves as BorderImage did when auto_scale was False before."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:33
msgid "'both': Scales both x and y dimension borders according to the size of the BorderImage, this disables the BorderImage making it render the same as a regular Image."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:37
msgid "'x_only': The Y dimension functions as the default, and the X scales to the size of the BorderImage's width."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:40
msgid "'y_only': The X dimension functions as the default, and the Y  scales to the size of the BorderImage's height."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:43
msgid "'y_full_x_lower': Y scales as in 'y_only', Y scales if the size of the scaled version would be smaller than the provided border only."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:47
msgid "'x_full_y_lower': X scales as in 'x_only', Y scales if the size of the scaled version would be smaller than the provided border only."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:51
msgid "'both_lower': This is what auto_scale did when it was True in 1.9.1 Both X and Y dimensions will be scaled if the BorderImage is smaller than the source."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage:55
msgid "If the BorderImage's size is less than the sum of it's borders, horizontally or vertically, and this property is set to True, the borders will be rescaled to accommodate for the smaller size."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage.auto_scale:1
msgid "Property for setting if the corners are automatically scaled when the BorderImage is too small."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage.border:1
msgid "Property for getting/setting the border of the class."
msgstr ""

#: ../../docstring of kivy.graphics.BorderImage.display_border:1
msgid "Property for getting/setting the border display size."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.Instruction`"
msgstr ""

#: ../../docstring of kivy.graphics.Callback:3
msgid "A Callback is an instruction that will be called when the drawing operation is performed. When adding instructions to a canvas, you can do this::"
msgstr ""

#: ../../docstring of kivy.graphics.Callback:12
msgid "The definition of the callback must be::"
msgstr ""

#: ../../docstring of kivy.graphics.Callback:19
msgid "Note that if you perform many and/or costly calls to callbacks, you might potentially slow down the rendering performance significantly."
msgstr ""

#: ../../docstring of kivy.graphics.Callback:22
msgid "The updating of your canvas does not occur until something new happens. From your callback, you can ask for an update::"
msgstr ""

#: ../../docstring of kivy.graphics.Callback:30
msgid "If you use the Callback class to call rendering methods of another toolkit, you will have issues with the OpenGL context. The OpenGL state may have been manipulated by the other toolkit, and as soon as program flow returns to Kivy, it will just break. You can have glitches, crashes, black holes might occur, etc. To avoid that, you can activate the :attr:`reset_context` option. It will reset the OpenGL context state to make Kivy's rendering correct after the call to your callback."
msgstr ""

#: ../../docstring of kivy.graphics.Callback:41
msgid "The :attr:`reset_context` is not a full OpenGL reset. If you have issues regarding that, please contact us."
msgstr ""

#: ../../docstring of kivy.graphics.Callback.ask_update:1
msgid "Inform the parent canvas that we'd like it to update on the next frame. This is useful when you need to trigger a redraw due to some value having changed for example."
msgstr ""

#: ../../docstring of kivy.graphics.Callback.reset_context:1
msgid "Set this to True if you want to reset the OpenGL context for Kivy after the callback has been called."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.CanvasBase`"
msgstr ""

#: ../../docstring of kivy.graphics.Canvas:1
msgid "The important Canvas class. Use this class to add graphics or context instructions that you want to be used for drawing."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas:6
msgid "The Canvas supports Python's ``with`` statement and its enter & exit semantics."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas:9
msgid "Usage of a canvas without the ``with`` statement::"
msgstr ""

#: ../../docstring of kivy.graphics.Canvas:14
msgid "Usage of a canvas with Python's ``with`` statement::"
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.add:1
#: ../../docstring of kivy.graphics.InstructionGroup.add:1
msgid "Add a new :class:`Instruction` to our list."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.after:1
msgid "Property for getting the 'after' group."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.ask_update:1
msgid "Inform the canvas that we'd like it to update on the next frame. This is useful when you need to trigger a redraw due to some value having changed for example."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.before:1
msgid "Property for getting the 'before' group."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.clear:1
msgid "Clears every :class:`Instruction` in the canvas, leaving it clean."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.draw:1
msgid "Apply the instruction to our window."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.has_after:1
msgid "Property to see if the :attr:`after` group has already been created."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.has_before:1
msgid "Property to see if the :attr:`before` group has already been created."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.opacity:1
msgid "Property to get/set the opacity value of the canvas."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.opacity:5
msgid "The opacity attribute controls the opacity of the canvas and its children.  Be careful, it's a cumulative attribute: the value is multiplied to the current global opacity and the result is applied to the current context color."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.opacity:10
msgid "For example: if your parent has an opacity of 0.5 and a child has an opacity of 0.2, the real opacity of the child will be 0.5 * 0.2 = 0.1."
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.opacity:13
msgid "Then, the opacity is applied on the shader as::"
msgstr ""

#: ../../docstring of kivy.graphics.Canvas.remove:1
#: ../../docstring of kivy.graphics.InstructionGroup.remove:1
msgid "Remove an existing :class:`Instruction` from our list."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.InstructionGroup`"
msgstr ""

#: ../../docstring of kivy.graphics.CanvasBase:1
msgid "CanvasBase provides the context manager methods for the :class:`Canvas`."
msgstr ""

#: ../../docstring of kivy.graphics.Color:1
msgid "Instruction to set the color state for any vertices being drawn after it."
msgstr ""

#: ../../docstring of kivy.graphics.Color:4
msgid "This represents a color between 0 and 1, but is applied as a *multiplier* to the texture of any vertex instructions following it in a canvas. If no texture is set, the vertex instruction takes the precise color of the Color instruction."
msgstr ""

#: ../../docstring of kivy.graphics.Color:9
msgid "For instance, if a Rectangle has a texture with uniform color ``(0.5, 0.5, 0.5, 1.0)`` and the preceding Color has ``rgba=(1, 0.5, 2, 1)``, the actual visible color will be ``(0.5, 0.25, 1.0, 1.0)`` since the Color instruction is applied as a multiplier to every rgba component. In this case, a Color component outside the 0-1 range gives a visible result as the intensity of the blue component is doubled."
msgstr ""

#: ../../docstring of kivy.graphics.Color:17
msgid "To declare a Color in Python, you can do::"
msgstr ""

#: ../../docstring of kivy.graphics.Color:33
msgid "You can also set color components that are available as properties by passing them as keyword arguments::"
msgstr ""

#: ../../docstring of kivy.graphics.Color:38
msgid "In kv lang you can set the color properties directly:"
msgstr ""

#: ../../docstring of kivy.graphics.Color.a:1
#: ../../docstring of kivy.graphics.ClearColor.a:1
msgid "Alpha component, between 0 and 1."
msgstr ""

#: ../../docstring of kivy.graphics.Color.b:1
#: ../../docstring of kivy.graphics.ClearColor.b:1
msgid "Blue component, between 0 and 1."
msgstr ""

#: ../../docstring of kivy.graphics.Color.g:1
#: ../../docstring of kivy.graphics.ClearColor.g:1
msgid "Green component, between 0 and 1."
msgstr ""

#: ../../docstring of kivy.graphics.Color.h:1
msgid "Hue component, between 0 and 1."
msgstr ""

#: ../../docstring of kivy.graphics.Color.hsv:1
msgid "HSV color, list of 3 values in 0-1 range, alpha will be 1."
msgstr ""

#: ../../docstring of kivy.graphics.Color.r:1
#: ../../docstring of kivy.graphics.ClearColor.r:1
msgid "Red component, between 0 and 1."
msgstr ""

#: ../../docstring of kivy.graphics.Color.rgb:1
msgid "RGB color, list of 3 values in 0-1 range. The alpha will be 1."
msgstr ""

#: ../../docstring of kivy.graphics.Color.rgba:1
msgid "RGBA color, list of 4 values in 0-1 range."
msgstr ""

#: ../../docstring of kivy.graphics.Color.s:1
msgid "Saturation component, between 0 and 1."
msgstr ""

#: ../../docstring of kivy.graphics.Color.v:1
msgid "Value component, between 0 and 1."
msgstr ""

#: ../../docstring of kivy.graphics.ContextInstruction:1
msgid "The ContextInstruction class is the base for the creation of instructions that don't have a direct visual representation, but instead modify the current Canvas' state, e.g. texture binding, setting color parameters, matrix manipulation and so on."
msgstr ""

#: ../../docstring of kivy.graphics.Ellipse:1
msgid "A 2D ellipse."
msgstr ""

#: ../../docstring of kivy.graphics.Ellipse:5
msgid "Added angle_start and angle_end."
msgstr ""

#: ../../docstring of kivy.graphics.Ellipse:9
msgid "Define how many segments are needed for drawing the ellipse. The drawing will be smoother if you have many segments."
msgstr ""

#: ../../docstring of kivy.graphics.Ellipse:11
msgid "`angle_start`: int, defaults to 0"
msgstr ""

#: ../../docstring of kivy.graphics.Ellipse:12
msgid "Specifies the starting angle, in degrees, of the disk portion."
msgstr ""

#: ../../docstring of kivy.graphics.Ellipse:15
msgid "`angle_end`: int, defaults to 360"
msgstr ""

#: ../../docstring of kivy.graphics.Ellipse:14
msgid "Specifies the ending angle, in degrees, of the disk portion."
msgstr ""

#: ../../docstring of kivy.graphics.Ellipse.angle_end:1
msgid "End angle of the ellipse in degrees, defaults to 360."
msgstr ""

#: ../../docstring of kivy.graphics.Ellipse.angle_start:1
msgid "Start angle of the ellipse in degrees, defaults to 0."
msgstr ""

#: ../../docstring of kivy.graphics.Ellipse.segments:1
msgid "Property for getting/setting the number of segments of the ellipse."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.RenderContext`"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:1
msgid "Fbo class for wrapping the OpenGL Framebuffer extension. The Fbo support \"with\" statement."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:5
msgid "`clear_color`: tuple, defaults to (0, 0, 0, 0)"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:6
msgid "Define the default color for clearing the framebuffer"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:7
msgid "`size`: tuple, defaults to (1024, 1024)"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:8
msgid "Default size of the framebuffer"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:10
msgid "`push_viewport`: bool, defaults to True"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:10
msgid "If True, the OpenGL viewport will be set to the framebuffer size, and will be automatically restored when the framebuffer released."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:12
msgid "`with_depthbuffer`: bool, defaults to False"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:13
msgid "If True, the framebuffer will be allocated with a Z buffer."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:16
msgid "`with_stencilbuffer`: bool, defaults to False"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:17
msgid "If True, the framebuffer will be allocated with a stencil buffer."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:19
msgid "`texture`: :class:`~kivy.graphics.texture.Texture`, defaults to None"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:19
msgid "If None, a default texture will be created."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo:22
msgid "Using both of ``with_stencilbuffer`` and ``with_depthbuffer`` is not supported in kivy 1.9.0"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.add_reload_observer:1
msgid "Add a callback to be called after the whole graphics context has been reloaded. This is where you can reupload your custom data in GPU."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.add_reload_observer:7
msgid "`callback`: func(context) -> return None"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.add_reload_observer:8
msgid "The first parameter will be the context itself"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.bind:1
msgid "Bind the FBO to the current opengl context. `Bind` mean that you enable the Framebuffer, and all the drawing operations will act inside the Framebuffer, until :meth:`release` is called."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.bind:6
msgid "The bind/release operations are automatically called when you add graphics objects into it. If you want to manipulate a Framebuffer yourself, you can use it like this::"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.clear_buffer:1
msgid "Clear the framebuffer with the :attr:`clear_color`."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.clear_buffer:3
msgid "You need to bind the framebuffer yourself before calling this method::"
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.clear_color:1
msgid "Clear color in (red, green, blue, alpha) format."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.get_pixel_color:1
msgid "Get the color of the pixel with specified window coordinates wx, wy. It returns result in RGBA format."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.pixels:1
msgid "Get the pixels texture, in RGBA format only, unsigned byte. The origin of the image is at bottom left."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.release:1
msgid "Release the Framebuffer (unbind)."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.remove_reload_observer:1
msgid "Remove a callback from the observer list, previously added by :meth:`add_reload_observer`."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.size:1
msgid "Size of the framebuffer, in (width, height) format."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.size:3
msgid "If you change the size, the framebuffer content will be lost."
msgstr ""

#: ../../docstring of kivy.graphics.Fbo.texture:1
msgid "Return the framebuffer texture"
msgstr ""

#: ../../docstring of kivy.graphics.GraphicException:1
msgid "Bases: :class:`Exception`"
msgstr ""

#: ../../docstring of kivy.graphics.GraphicException:1
msgid "Exception raised when a graphics error is fired."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.event.ObjectWithUid`"
msgstr ""

#: ../../docstring of kivy.graphics.Instruction:1
msgid "Represents the smallest instruction available. This class is for internal usage only, don't use it directly."
msgstr ""

#: ../../docstring of kivy.graphics.Instruction.proxy_ref:1
msgid "Return a proxy reference to the Instruction i.e. without creating a reference of the widget. See `weakref.proxy <http://docs.python.org/2/library/weakref.html?highlight=proxy#weakref.proxy>`_ for more information."
msgstr ""

#: ../../docstring of kivy.graphics.InstructionGroup:1
msgid "Group of :class:`Instructions <Instruction>`. Allows for the adding and removing of graphics instructions. It can be used directly as follows::"
msgstr ""

#: ../../docstring of kivy.graphics.InstructionGroup.clear:1
msgid "Remove all the :class:`Instructions <Instruction>`."
msgstr ""

#: ../../docstring of kivy.graphics.InstructionGroup.get_group:1
msgid "Return an iterable for all the :class:`Instructions <Instruction>` with a specific group name."
msgstr ""

#: ../../docstring of kivy.graphics.InstructionGroup.insert:1
msgid "Insert a new :class:`Instruction` into our list at index."
msgstr ""

#: ../../docstring of kivy.graphics.InstructionGroup.remove_group:1
msgid "Remove all :class:`Instructions <Instruction>` with a specific group name."
msgstr ""

#: ../../docstring of kivy.graphics.Line:1
msgid "A 2d line."
msgstr ""

#: ../../docstring of kivy.graphics.Line:3
msgid "Drawing a line can be done easily::"
msgstr ""

#: ../../docstring of kivy.graphics.Line:8
msgid "The line has 3 internal drawing modes that you should be aware of for optimal results:"
msgstr ""

#: ../../docstring of kivy.graphics.Line:11
msgid "If the :attr:`width` is 1.0, then the standard GL_LINE drawing from OpenGL will be used. :attr:`dash_length` and :attr:`dash_offset` will work, while properties for cap and joint have no meaning here."
msgstr ""

#: ../../docstring of kivy.graphics.Line:14
msgid "If the :attr:`width` is greater than 1.0, then a custom drawing method, based on triangulation, will be used. :attr:`dash_length` and :attr:`dash_offset` do not work in this mode. Additionally, if the current color has an alpha less than 1.0, a stencil will be used internally to draw the line."
msgstr ""

#: ../../docstring of kivy.graphics.Line:29
msgid "Offset between the end of a segment and the beginning of the next one, defaults to 0. Changing this makes it dashed."
msgstr ""

#: ../../docstring of kivy.graphics.Line:31
msgid "`width`: float"
msgstr ""

#: ../../docstring of kivy.graphics.Line:32
msgid "Width of the line, defaults to 1.0."
msgstr ""

#: ../../docstring of kivy.graphics.Line:33
msgid "`cap`: str, defaults to 'round'"
msgstr ""

#: ../../docstring of kivy.graphics.Line:34
msgid "See :attr:`cap` for more information."
msgstr ""

#: ../../docstring of kivy.graphics.Line:35
msgid "`joint`: str, defaults to 'round'"
msgstr ""

#: ../../docstring of kivy.graphics.Line:36
msgid "See :attr:`joint` for more information."
msgstr ""

#: ../../docstring of kivy.graphics.Line:37
msgid "`cap_precision`: int, defaults to 10"
msgstr ""

#: ../../docstring of kivy.graphics.Line:38
msgid "See :attr:`cap_precision` for more information"
msgstr ""

#: ../../docstring of kivy.graphics.Line:40
#: ../../docstring of kivy.graphics.Line:42
msgid "`joint_precision`: int, defaults to 10"
msgstr ""

#: ../../docstring of kivy.graphics.Line:40
msgid "See :attr:`joint_precision` for more information See :attr:`cap_precision` for more information."
msgstr ""

#: ../../docstring of kivy.graphics.Line:43
msgid "See :attr:`joint_precision` for more information."
msgstr ""

#: ../../docstring of kivy.graphics.Line:44
msgid "`close`: bool, defaults to False"
msgstr ""

#: ../../docstring of kivy.graphics.Line:45
#: ../../docstring of kivy.graphics.Line.close:1
msgid "If True, the line will be closed."
msgstr ""

#: ../../docstring of kivy.graphics.Line:47
msgid "`circle`: list"
msgstr ""

#: ../../docstring of kivy.graphics.Line:47
msgid "If set, the :attr:`points` will be set to build a circle. See :attr:`circle` for more information."
msgstr ""

#: ../../docstring of kivy.graphics.Line:50
msgid "`ellipse`: list"
msgstr ""

#: ../../docstring of kivy.graphics.Line:50
msgid "If set, the :attr:`points` will be set to build an ellipse. See :attr:`ellipse` for more information."
msgstr ""

#: ../../docstring of kivy.graphics.Line:53
msgid "`rectangle`: list"
msgstr ""

#: ../../docstring of kivy.graphics.Line:53
msgid "If set, the :attr:`points` will be set to build a rectangle. See :attr:`rectangle` for more information."
msgstr ""

#: ../../docstring of kivy.graphics.Line:56
msgid "`bezier`: list"
msgstr ""

#: ../../docstring of kivy.graphics.Line:56
msgid "If set, the :attr:`points` will be set to build a bezier line. See :attr:`bezier` for more information."
msgstr ""

#: ../../docstring of kivy.graphics.Line:59
msgid "`bezier_precision`: int, defaults to 180"
msgstr ""

#: ../../docstring of kivy.graphics.Line:59
msgid "Precision of the Bezier drawing."
msgstr ""

#: ../../docstring of kivy.graphics.Line:61
msgid "`dash_offset` and `dash_length` have been added."
msgstr ""

#: ../../docstring of kivy.graphics.Line:64
msgid "`width`, `cap`, `joint`, `cap_precision`, `joint_precision`, `close`, `ellipse`, `rectangle` have been added."
msgstr ""

#: ../../docstring of kivy.graphics.Line:68
msgid "`bezier`, `bezier_precision` have been added."
msgstr ""

#: ../../docstring of kivy.graphics.Line.bezier:1
msgid "Use this property to build a bezier line, without calculating the :attr:`points`. You can only set this property, not get it."
msgstr ""

#: ../../docstring of kivy.graphics.Line.bezier:4
msgid "The argument must be a tuple of 2n elements, n being the number of points."
msgstr ""

#: ../../docstring of kivy.graphics.Line.bezier:6
#: ../../docstring of kivy.graphics.Line.rectangle:11
#: ../../docstring of kivy.graphics.Line.rounded_rectangle:18
msgid "Usage::"
msgstr ""

#: ../../docstring of kivy.graphics.Line.bezier:12
msgid "Bezier lines calculations are inexpensive for a low number of points, but complexity is quadratic, so lines with a lot of points can be very expensive to build, use with care!"
msgstr ""

#: ../../docstring of kivy.graphics.Line.bezier_precision:1
msgid "Number of iteration for drawing the bezier between 2 segments, defaults to 180. The bezier_precision must be at least 1."
msgstr ""

#: ../../docstring of kivy.graphics.Line.cap:1
msgid "Determine the cap of the line, defaults to 'round'. Can be one of 'none', 'square' or 'round'"
msgstr ""

#: ../../docstring of kivy.graphics.Line.cap_precision:1
msgid "Number of iteration for drawing the \"round\" cap, defaults to 10. The cap_precision must be at least 1."
msgstr ""

#: ../../docstring of kivy.graphics.Line.circle:1
msgid "Use this property to build a circle, without calculating the :attr:`points`. You can only set this property, not get it."
msgstr ""

#: ../../docstring of kivy.graphics.Line.circle:4
msgid "The argument must be a tuple of (center_x, center_y, radius, angle_start, angle_end, segments):"
msgstr ""

#: ../../docstring of kivy.graphics.Line.circle:7
msgid "center_x and center_y represent the center of the circle"
msgstr ""

#: ../../docstring of kivy.graphics.Line.circle:8
msgid "radius represent the radius of the circle"
msgstr ""

#: ../../docstring of kivy.graphics.Line.circle:9
#: ../../docstring of kivy.graphics.Line.ellipse:9
msgid "(optional) angle_start and angle_end are in degree. The default value is 0 and 360."
msgstr ""

#: ../../docstring of kivy.graphics.Line.circle:11
#: ../../docstring of kivy.graphics.Line.ellipse:11
msgid "(optional) segments is the precision of the ellipse. The default value is calculated from the range between angle."
msgstr ""

#: ../../docstring of kivy.graphics.Line.circle:14
msgid "Note that it's up to you to :attr:`close` the circle or not."
msgstr ""

#: ../../docstring of kivy.graphics.Line.circle:16
#: ../../docstring of kivy.graphics.Line.ellipse:16
msgid "For example, for building a simple ellipse, in python::"
msgstr ""

#: ../../docstring of kivy.graphics.Line.dash_length:1
msgid "Property for getting/setting the length of the dashes in the curve"
msgstr ""

#: ../../docstring of kivy.graphics.Line.dash_offset:1
msgid "Property for getting/setting the offset between the dashes in the curve"
msgstr ""

#: ../../docstring of kivy.graphics.Line.ellipse:1
msgid "Use this property to build an ellipse, without calculating the :attr:`points`. You can only set this property, not get it."
msgstr ""

#: ../../docstring of kivy.graphics.Line.ellipse:4
msgid "The argument must be a tuple of (x, y, width, height, angle_start, angle_end, segments):"
msgstr ""

#: ../../docstring of kivy.graphics.Line.ellipse:7
msgid "x and y represent the bottom left of the ellipse"
msgstr ""

#: ../../docstring of kivy.graphics.Line.ellipse:8
msgid "width and height represent the size of the ellipse"
msgstr ""

#: ../../docstring of kivy.graphics.Line.ellipse:14
msgid "Note that it's up to you to :attr:`close` the ellipse or not."
msgstr ""

#: ../../docstring of kivy.graphics.Line.joint:1
msgid "Determine the join of the line, defaults to 'round'. Can be one of 'none', 'round', 'bevel', 'miter'."
msgstr ""

#: ../../docstring of kivy.graphics.Line.joint_precision:1
msgid "Number of iteration for drawing the \"round\" joint, defaults to 10. The joint_precision must be at least 1."
msgstr ""

#: ../../docstring of kivy.graphics.Line.points:1
msgid "Property for getting/settings points of the line"
msgstr ""

#: ../../docstring of kivy.graphics.Line.points:5
msgid "This will always reconstruct the whole graphics from the new points list. It can be very CPU expensive."
msgstr ""

#: ../../docstring of kivy.graphics.Line.rectangle:1
#: ../../docstring of kivy.graphics.Line.rounded_rectangle:1
msgid "Use this property to build a rectangle, without calculating the :attr:`points`. You can only set this property, not get it."
msgstr ""

#: ../../docstring of kivy.graphics.Line.rectangle:4
msgid "The argument must be a tuple of (x, y, width, height):"
msgstr ""

#: ../../docstring of kivy.graphics.Line.rectangle:6
#: ../../docstring of kivy.graphics.Line.rounded_rectangle:11
msgid "x and y represent the bottom-left position of the rectangle"
msgstr ""

#: ../../docstring of kivy.graphics.Line.rectangle:7
#: ../../docstring of kivy.graphics.Line.rounded_rectangle:12
msgid "width and height represent the size"
msgstr ""

#: ../../docstring of kivy.graphics.Line.rectangle:9
#: ../../docstring of kivy.graphics.Line.rounded_rectangle:16
msgid "The line is automatically closed."
msgstr ""

#: ../../docstring of kivy.graphics.Line.rounded_rectangle:4
msgid "The argument must be a tuple of one of the following forms:"
msgstr ""

#: ../../docstring of kivy.graphics.Line.rounded_rectangle:6
msgid "(x, y, width, height, corner_radius)"
msgstr ""

#: ../../docstring of kivy.graphics.Line.rounded_rectangle:7
msgid "(x, y, width, height, corner_radius, resolution)"
msgstr ""

#: ../../docstring of kivy.graphics.Line.rounded_rectangle:8
msgid "(x, y, width, height, corner_radius1, corner_radius2, corner_radius3, corner_radius4)"
msgstr ""

#: ../../docstring of kivy.graphics.Line.rounded_rectangle:9
msgid "(x, y, width, height, corner_radius1, corner_radius2, corner_radius3, corner_radius4, resolution)"
msgstr ""

#: ../../docstring of kivy.graphics.Line.rounded_rectangle:13
msgid "corner_radius is the number of pixels between two borders and the center of the circle arc joining them"
msgstr ""

#: ../../docstring of kivy.graphics.Line.rounded_rectangle:14
msgid "resolution is the number of line segment that will be used to draw the circle arc at each corner (defaults to 30)"
msgstr ""

#: ../../docstring of kivy.graphics.Line.width:1
msgid "Determine the width of the line, defaults to 1.0."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.vertex_instructions.Line`"
msgstr ""

#: ../../docstring of kivy.graphics.SmoothLine:1
msgid "Experimental line using over-draw methods to get better anti-aliasing results. It has few drawbacks:"
msgstr ""

#: ../../docstring of kivy.graphics.SmoothLine:4
msgid "drawing a line with alpha will probably not have the intended result if the line crosses itself."
msgstr ""

#: ../../docstring of kivy.graphics.SmoothLine:6
msgid ":attr:`~Line.cap`, :attr:`~Line.joint` and :attr:`~Line.dash` properties are not supported."
msgstr ""

#: ../../docstring of kivy.graphics.SmoothLine:8
msgid "it uses a custom texture with a premultiplied alpha."
msgstr ""

#: ../../docstring of kivy.graphics.SmoothLine:9
msgid "lines under 1px in width are not supported: they will look the same."
msgstr ""

#: ../../docstring of kivy.graphics.SmoothLine:13
msgid "This is an unfinished work, experimental, and subject to crashes."
msgstr ""

#: ../../docstring of kivy.graphics.SmoothLine.overdraw_width:1
msgid "Determine the overdraw width of the line, defaults to 1.2."
msgstr ""

#: ../../docstring of kivy.graphics.MatrixInstruction:1
msgid "Base class for Matrix Instruction on the canvas."
msgstr ""

#: ../../docstring of kivy.graphics.MatrixInstruction.matrix:1
msgid "Matrix property. Matrix from the transformation module. Setting the matrix using this property when a change is made is important because it will notify the context about the update."
msgstr ""

#: ../../docstring of kivy.graphics.MatrixInstruction.stack:1
#: ../../docstring of kivy.graphics.PopMatrix.stack:1
#: ../../docstring of kivy.graphics.PushMatrix.stack:1
#: ../../docstring of kivy.graphics.LoadIdentity.stack:1
msgid "Name of the matrix stack to use. Can be 'modelview_mat', 'projection_mat' or 'frag_modelview_mat'."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:1
msgid "A 2d mesh."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:3
msgid "In OpenGL ES 2.0 and in our graphics implementation, you cannot have more than 65535 indices."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:6
msgid "A list of vertices is described as::"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:12
msgid "If you want to draw a triangle, add 3 vertices. You can then make an indices list as follows:"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:15
msgid "indices = [0, 1, 2]"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:20
msgid "`vertices`: iterable"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:21
msgid "List of vertices in the format (x1, y1, u1, v1, x2, y2, u2, v2...)."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:22
msgid "`indices`: iterable"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:23
msgid "List of indices in the format (i1, i2, i3...)."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:25
msgid "`mode`: str"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:25
msgid "Mode of the vbo. Check :attr:`mode` for more information. Defaults to 'points'."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:43
msgid "`fmt`: list"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:28
msgid "The format for vertices, by default, each vertex is described by 2D coordinates (x, y) and 2D texture coordinate (u, v). Each element of the list should be a tuple or list, of the form"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:32
msgid "(variable_name, size, type)"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:34
msgid "which will allow mapping vertex data to the glsl instructions."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:36
msgid "[(b'v_pos', 2, 'float'), (b'v_tc', 2, 'float'),]"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:38
msgid "will allow using"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:40
msgid "attribute vec2 v_pos; attribute vec2 v_tc;"
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:43
msgid "in glsl's vertex shader."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:45
msgid "Before, `vertices` and `indices` would always be converted to a list, now, they are only converted to a list if they do not implement the buffer interface. So e.g. numpy arrays, python arrays etc. are used in place, without creating any additional copies. However, the buffers cannot be readonly (even though they are not changed, due to a cython limitation) and must be contiguous in memory."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh:54
msgid "When passing a memoryview or a instance that implements the buffer interface, `vertices` should be a buffer of floats (`'f'` code in python array) and `indices` should be a buffer of unsigned short (`'H'` code in python array). Arrays in other formats will still have to be converted internally, negating any potential gain."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh.indices:1
msgid "Vertex indices used to specify the order when drawing the mesh."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh.mode:1
msgid "VBO Mode used for drawing vertices/indices. Can be one of 'points', 'line_strip', 'line_loop', 'lines', 'triangles', 'triangle_strip' or 'triangle_fan'."
msgstr ""

#: ../../docstring of kivy.graphics.Mesh.vertices:1
msgid "List of x, y, u, v coordinates used to construct the Mesh. Right now, the Mesh instruction doesn't allow you to change the format of the vertices, which means it's only x, y + one texture coordinate."
msgstr ""

#: ../../docstring of kivy.graphics.Point:1
msgid "A list of 2d points. Each point is represented as a square with a width/height of 2 times the :attr:`pointsize`."
msgstr ""

#: ../../docstring of kivy.graphics.Point:6
msgid "List of points in the format (x1, y1, x2, y2...), where each pair of coordinates specifies the center of a new point."
msgstr ""

#: ../../docstring of kivy.graphics.Point:10
msgid "`pointsize`: float, defaults to 1."
msgstr ""

#: ../../docstring of kivy.graphics.Point:9
msgid "The size of the point, measured from the center to the edge. A value of 1.0 therefore means the real size will be 2.0 x 2.0."
msgstr ""

#: ../../docstring of kivy.graphics.Point:14
msgid "Starting from version 1.0.7, vertex instruction have a limit of 65535 vertices (indices of vertex to be accurate). 2 entries in the list (x, y) will be converted to 4 vertices. So the limit inside Point() class is 2^15-2."
msgstr ""

#: ../../docstring of kivy.graphics.Point.add_point:1
msgid "Add a point to the current :attr:`points` list."
msgstr ""

#: ../../docstring of kivy.graphics.Point.add_point:3
msgid "If you intend to add multiple points, prefer to use this method instead of reassigning a new :attr:`points` list. Assigning a new :attr:`points` list will recalculate and reupload the whole buffer into the GPU. If you use add_point, it will only upload the changes."
msgstr ""

#: ../../docstring of kivy.graphics.Point.points:1
msgid "Property for getting/settings the center points in the points list. Each pair of coordinates specifies the center of a new point."
msgstr ""

#: ../../docstring of kivy.graphics.Point.pointsize:1
msgid "Property for getting/setting point size. The size is measured from the center to the edge, so a value of 1.0 means the real size will be 2.0 x 2.0."
msgstr ""

#: ../../docstring of kivy.graphics.PopMatrix:1
msgid "Pop the matrix from the context's matrix stack onto the model view."
msgstr ""

#: ../../docstring of kivy.graphics.PushMatrix:1
msgid "Push the matrix onto the context's matrix stack."
msgstr ""

#: ../../docstring of kivy.graphics.Quad:1
msgid "A 2d quad."
msgstr ""

#: ../../docstring of kivy.graphics.Quad:5
msgid "List of point in the format (x1, y1, x2, y2, x3, y3, x4, y4)."
msgstr ""

#: ../../docstring of kivy.graphics.Quad.points:1
msgid "Property for getting/settings points of the quad."
msgstr ""

#: ../../docstring of kivy.graphics.Rectangle:1
msgid "A 2d rectangle."
msgstr ""

#: ../../docstring of kivy.graphics.Rectangle:4
msgid "`pos`: list"
msgstr ""

#: ../../docstring of kivy.graphics.Rectangle:5
msgid "Position of the rectangle, in the format (x, y)."
msgstr ""

#: ../../docstring of kivy.graphics.Rectangle:8
msgid "`size`: list"
msgstr ""

#: ../../docstring of kivy.graphics.Rectangle:7
msgid "Size of the rectangle, in the format (width, height)."
msgstr ""

#: ../../docstring of kivy.graphics.Rectangle.pos:1
msgid "Property for getting/settings the position of the rectangle."
msgstr ""

#: ../../docstring of kivy.graphics.Rectangle.size:1
msgid "Property for getting/settings the size of the rectangle."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.Canvas`"
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext:1
msgid "The render context stores all the necessary information for drawing, i.e.:"
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext:3
msgid "The vertex shader"
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext:4
msgid "The fragment shader"
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext:5
msgid "The default texture"
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext:6
msgid "The state stack (color, texture, matrix...)"
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext.shader:1
msgid "Return the shader attached to the render context."
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext.use_parent_frag_modelview:1
msgid "If True, the parent fragment modelview matrix will be used."
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext.use_parent_frag_modelview:5
msgid "rc = RenderContext(use_parent_frag_modelview=True)"
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext.use_parent_modelview:1
msgid "If True, the parent modelview matrix will be used."
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext.use_parent_modelview:5
#: ../../docstring of kivy.graphics.RenderContext.use_parent_projection:5
msgid "Before::"
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext.use_parent_modelview:9
#: ../../docstring of kivy.graphics.RenderContext.use_parent_projection:9
msgid "Now::"
msgstr ""

#: ../../docstring of kivy.graphics.RenderContext.use_parent_projection:1
msgid "If True, the parent projection matrix will be used."
msgstr ""

#: ../../<autodoc>:1
#: ../../<autodoc>:1
#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.context_instructions.Transform`"
msgstr ""

#: ../../docstring of kivy.graphics.Rotate:1
msgid "Rotate the coordinate space by applying a rotation transformation on the modelview matrix. You can set the properties of the instructions afterwards with e.g. ::"
msgstr ""

#: ../../docstring of kivy.graphics.Rotate.angle:1
msgid "Property for getting/setting the angle of the rotation."
msgstr ""

#: ../../docstring of kivy.graphics.Rotate.axis:1
msgid "Property for getting/setting the axis of the rotation."
msgstr ""

#: ../../docstring of kivy.graphics.Rotate.axis:3
msgid "The format of the axis is (x, y, z)."
msgstr ""

#: ../../docstring of kivy.graphics.Rotate.origin:1
msgid "Origin of the rotation."
msgstr ""

#: ../../docstring of kivy.graphics.Rotate.origin:5
#: ../../docstring of kivy.graphics.Scale.origin:5
msgid "The format of the origin can be either (x, y) or (x, y, z)."
msgstr ""

#: ../../docstring of kivy.graphics.Rotate.set:1
msgid "Set the angle and axis of rotation."
msgstr ""

#: ../../docstring of kivy.graphics.Rotate.set:7
msgid "The set() method doesn't use the new :attr:`origin` property."
msgstr ""

#: ../../docstring of kivy.graphics.Scale:1
msgid "Instruction to create a non uniform scale transformation."
msgstr ""

#: ../../docstring of kivy.graphics.Scale:3
msgid "Create using one or three arguments::"
msgstr ""

#: ../../docstring of kivy.graphics.Scale:8
msgid "Deprecated single scale property in favor of x, y, z, xyz axis independent scaled factors."
msgstr ""

#: ../../docstring of kivy.graphics.Scale.origin:1
msgid "Origin of the scale."
msgstr ""

#: ../../docstring of kivy.graphics.Scale.scale:1
msgid "Property for getting/setting the scale."
msgstr ""

#: ../../docstring of kivy.graphics.Scale.scale:3
msgid "Deprecated in favor of per axis scale properties x,y,z, xyz, etc."
msgstr ""

#: ../../docstring of kivy.graphics.Scale.x:1
msgid "Property for getting/setting the scale on the X axis."
msgstr ""

#: ../../docstring of kivy.graphics.Scale.xyz:1
msgid "3 tuple scale vector in 3D in x, y, and z axis."
msgstr ""

#: ../../docstring of kivy.graphics.Scale.y:1
msgid "Property for getting/setting the scale on the Y axis."
msgstr ""

#: ../../docstring of kivy.graphics.Scale.z:1
msgid "Property for getting/setting the scale on Z axis."
msgstr ""

#: ../../docstring of kivy.graphics.StencilPop:1
msgid "Pop the stencil stack. See the module documentation for more information."
msgstr ""

#: ../../docstring of kivy.graphics.StencilPush:1
msgid "Push the stencil stack. See the module documentation for more information."
msgstr ""

#: ../../docstring of kivy.graphics.StencilUse:1
msgid "Use current stencil buffer as a mask. Check the module documentation for more information."
msgstr ""

#: ../../docstring of kivy.graphics.StencilUse.func_op:1
msgid "Determine the stencil operation to use for glStencilFunc(). Can be one of 'never', 'less', 'equal', 'lequal', 'greater', 'notequal', 'gequal' or 'always'."
msgstr ""

#: ../../docstring of kivy.graphics.StencilUse.func_op:5
msgid "By default, the operator is set to 'equal'."
msgstr ""

#: ../../docstring of kivy.graphics.StencilUnUse:1
msgid "Use current stencil buffer to unset the mask."
msgstr ""

#: ../../docstring of kivy.graphics.Translate:1
msgid "Instruction to create a translation of the model view coordinate space."
msgstr ""

#: ../../docstring of kivy.graphics.Translate:3
msgid "Construct by either::"
msgstr ""

#: ../../docstring of kivy.graphics.Translate.x:1
msgid "Property for getting/setting the translation on the X axis."
msgstr ""

#: ../../docstring of kivy.graphics.Translate.xy:1
msgid "2 tuple with translation vector in 2D for x and y axis."
msgstr ""

#: ../../docstring of kivy.graphics.Translate.xyz:1
msgid "3 tuple translation vector in 3D in x, y, and z axis."
msgstr ""

#: ../../docstring of kivy.graphics.Translate.y:1
msgid "Property for getting/setting the translation on the Y axis."
msgstr ""

#: ../../docstring of kivy.graphics.Translate.z:1
msgid "Property for getting/setting the translation on the Z axis."
msgstr ""

#: ../../docstring of kivy.graphics.Triangle:1
msgid "A 2d triangle."
msgstr ""

#: ../../docstring of kivy.graphics.Triangle:5
msgid "List of points in the format (x1, y1, x2, y2, x3, y3)."
msgstr ""

#: ../../docstring of kivy.graphics.Triangle.points:1
msgid "Property for getting/settings points of the triangle."
msgstr ""

#: ../../docstring of kivy.graphics.VertexInstruction:1
msgid "The VertexInstruction class is the base for all graphics instructions that have a direct visual representation on the canvas, such as Rectangles, Triangles, Lines, Ellipse and so on."
msgstr ""

#: ../../docstring of kivy.graphics.VertexInstruction.source:1
msgid "This property represents the filename to load the texture from. If you want to use an image as source, do it like this::"
msgstr ""

#: ../../docstring of kivy.graphics.VertexInstruction.source:7
msgid "Here's the equivalent in Kivy language:"
msgstr ""

#: ../../docstring of kivy.graphics.VertexInstruction.source:20
msgid "The filename will be searched for using the :func:`kivy.resources.resource_find` function."
msgstr ""

#: ../../docstring of kivy.graphics.VertexInstruction.tex_coords:1
msgid "This property represents the texture coordinates used for drawing the vertex instruction. The value must be a list of 8 values."
msgstr ""

#: ../../docstring of kivy.graphics.VertexInstruction.tex_coords:4
msgid "A texture coordinate has a position (u, v), and a size (w, h). The size can be negative, and would represent the 'flipped' texture. By default, the tex_coords are::"
msgstr ""

#: ../../docstring of kivy.graphics.VertexInstruction.tex_coords:10
msgid "You can pass your own texture coordinates if you want to achieve fancy effects."
msgstr ""

#: ../../docstring of kivy.graphics.VertexInstruction.tex_coords:15
msgid "The default values just mentioned can be negative. Depending on the image and label providers, the coordinates are flipped vertically because of the order in which the image is internally stored. Instead of flipping the image data, we are just flipping the texture coordinates to be faster."
msgstr ""

#: ../../docstring of kivy.graphics.VertexInstruction.texture:1
msgid "Property that represents the texture used for drawing this Instruction. You can set a new texture like this::"
msgstr ""

#: ../../docstring of kivy.graphics.VertexInstruction.texture:10
msgid "Usually, you will use the :attr:`source` attribute instead of the texture."
msgstr ""

#: ../../docstring of kivy.graphics.ClearColor:1
msgid "ClearColor Graphics Instruction."
msgstr ""

#: ../../docstring of kivy.graphics.ClearColor:5
msgid "Sets the clear color used to clear buffers with the glClear function or :class:`ClearBuffers` graphics instructions."
msgstr ""

#: ../../docstring of kivy.graphics.ClearColor.rgb:1
msgid "RGB color, a list of 3 values in 0-1 range where alpha will be 1."
msgstr ""

#: ../../docstring of kivy.graphics.ClearColor.rgba:1
msgid "RGBA color used for the clear color, a list of 4 values in the 0-1 range."
msgstr ""

#: ../../docstring of kivy.graphics.ClearBuffers:1
msgid "Clearbuffer Graphics Instruction."
msgstr ""

#: ../../docstring of kivy.graphics.ClearBuffers:5
msgid "Clear the buffers specified by the instructions buffer mask property. By default, only the coloc buffer is cleared."
msgstr ""

#: ../../docstring of kivy.graphics.ClearBuffers.clear_color:1
msgid "If True, the color buffer will be cleared."
msgstr ""

#: ../../docstring of kivy.graphics.ClearBuffers.clear_depth:1
msgid "If True, the depth buffer will be cleared."
msgstr ""

#: ../../docstring of kivy.graphics.ClearBuffers.clear_stencil:1
msgid "If True, the stencil buffer will be cleared."
msgstr ""

#: ../../docstring of kivy.graphics.PushState:1
msgid "Instruction that pushes arbitrary states/uniforms onto the context state stack."
msgstr ""

#: ../../docstring of kivy.graphics.ChangeState:1
msgid "Instruction that changes the values of arbitrary states/uniforms on the current render context."
msgstr ""

#: ../../docstring of kivy.graphics.PopState:1
msgid "Instruction that pops arbitrary states/uniforms off the context state stack."
msgstr ""

#: ../../docstring of kivy.graphics.ApplyContextMatrix:1
msgid "Pre-multiply the matrix at the top of the stack specified by `target_stack` by the matrix at the top of the 'source_stack'"
msgstr ""

#: ../../docstring of kivy.graphics.ApplyContextMatrix.source_stack:1
msgid "Name of the matrix stack to use as a source. Can be 'modelview_mat', 'projection_mat' or 'frag_modelview_mat'."
msgstr ""

#: ../../docstring of kivy.graphics.ApplyContextMatrix.target_stack:1
msgid "Name of the matrix stack to use as a target. Can be 'modelview_mat', 'projection_mat' or 'frag_modelview_mat'."
msgstr ""

#: ../../docstring of kivy.graphics.UpdateNormalMatrix:1
msgid "Update the normal matrix 'normal_mat' based on the current modelview matrix. This will compute 'normal_mat' uniform as: `inverse( transpose( mat3(mvm) ) )`"
msgstr ""

#: ../../docstring of kivy.graphics.LoadIdentity:1
msgid "Load the identity Matrix into the matrix stack specified by the instructions stack property (default='modelview_mat')"
msgstr ""

