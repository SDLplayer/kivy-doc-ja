# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-13 08:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: JUN OKAZAKI <okazakijun54392@gmail.com>, 2017\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/python_kivy_doc_ja/teams/74810/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sources/guide/lang.rst:4
msgid "Kv language"
msgstr "Kv language(翻訳済み)"

#: ../../sources/guide/lang.rst:7
msgid "Concept behind the language"
msgstr "Concept behind the language(背景とコンセンプト)"

#: ../../sources/guide/lang.rst:9
msgid ""
"As your application grow more complex, it's common that the construction of "
"widget trees and explicit declaration of bindings, becomes verbose and hard "
"to maintain. The `KV` Language is a attempt to overcome these short-comings."
msgstr ""
"アプリケーションがより複雑になるにつれて、widgetツリーとバインディングの明示的な宣言の構築は、一般的に冗長になり保守が困難となります。`KV` "
"Language はこの問題を克服しようとする試みです。"

#: ../../sources/guide/lang.rst:13
msgid ""
"The `KV` language (sometimes called kvlang, or kivy language), allows you to"
" create your widget tree in a declarative way and to bind widget properties "
"to each other or to callbacks in a natural manner. It allows for very fast "
"prototyping and agile changes to your UI. It also facilitates a good "
"separation between the logic of your application and its User Interface."
msgstr ""
"`KV` language（kvlang、またはkivy言語と呼ばれることがあります）、\n"
"宣言型でwidgetツリーを作成し、自然な方法でwidgetのプロパティを\n"
"相互またはコールバックしてバインドできます。 これはUIにアジャイル的な変更と非常に高速なプロトタイプピングを可能にします。アプリケーションのロジックとユーザーインタフェース間の分離を容易にします。"

#: ../../sources/guide/lang.rst:20
msgid "How to load KV"
msgstr "How to load KV(KV のロードについて)"

#: ../../sources/guide/lang.rst:22
msgid "There are two ways to load Kv code into your application:"
msgstr "アプリケーションにKvコードをロードする方法は2つあります。"

#: ../../sources/guide/lang.rst:24
msgid "By name convention:"
msgstr "命名規則から:"

#: ../../sources/guide/lang.rst:26
msgid ""
"Kivy looks for a Kv file with the same name as your App class in lowercase,"
"  minus \"App\" if it ends with 'App' e.g::"
msgstr "'App'で終わる場合、Kivyはアプリのクラスから'App'を引いた、小文字で同じ名前を持つKvファイルを検索します。例えば："

#: ../../sources/guide/lang.rst:31
msgid ""
"If this file defines a `Root Widget` it will be attached to the App's `root`"
" attribute and used as the base of the application widget tree."
msgstr ""
"このファイルは`Root Widget`を定義している場合には、アプリケーションの `root` "
"属性に所属しており、アプリケーションのwidgetツリーのベースとして使用されます。"

#: ../../sources/guide/lang.rst:34
msgid ""
":obj:`~kivy.lang.Builder`: You can tell Kivy to directly load a string or a "
"file. If this string or file defines a root widget, it will be returned by "
"the method::"
msgstr ""
":obj:`~kivy.lang.Builder`:  文字列またはファイルをロードしてKivyに直接伝えられます。文字列またはファイルがroot "
"widgetを定義している場合は、メソッドとして返されます。::"

#: ../../sources/guide/lang.rst:40
msgid "or::"
msgstr "または::"

#: ../../sources/guide/lang.rst:45
msgid "Rule context"
msgstr "Rule context(ルールコンテキスト)"

#: ../../sources/guide/lang.rst:47
msgid ""
"A Kv source constitutes of `rules`, which are used to describe the content "
"of a Widget, you can have one `root` rule, and any number of `class` or "
"`template` rules."
msgstr ""
"KvソースはWidgetのコンテンツを記述するために使用されるルールの構成は、1つの`root` ルール、およびの任意の`class` "
"または`template`ルールを有します。"

#: ../../sources/guide/lang.rst:51
msgid ""
"The `root` rule is declared by declaring the class of your root widget, "
"without any indentation, followed by `:` and will be set as the `root` "
"attribute of the App instance::"
msgstr ""
"`root` ルールは、任意のインデントなしで、「：」と宣言することによって、あなたのroot "
"widgetクラスを宣言が続いている、Appインスタンスのルート属性として設定されます。::"

#: ../../sources/guide/lang.rst:57
msgid ""
"A `class` rule, declared by the name of a widget class between `< >` and "
"followed by `:`, defines how any instance of that class will be graphically "
"represented::"
msgstr ""
"`class` ルールは、`< >` "
"の中で、widgetクラスの名前を宣言し、「:」の後は、クラスのすべてのインスタンスをグラフィカルに表現する方法を定義します。"

#: ../../sources/guide/lang.rst:63
msgid ""
"Rules use indentation for delimitation, as python, indentation should be of "
"four spaces per level, like the python good practice recommendations."
msgstr ""
"ルールはPythonのような区切りのためにインデントを使用し、インデントはPythonのグットプラクティスの推奨設定のように、レベルごとに4つのスペースでなければなりません。"

#: ../../sources/guide/lang.rst:66
msgid "There are three keywords specific to Kv language:"
msgstr "Kv languageには固有の3つのキーワードがあります:"

#: ../../sources/guide/lang.rst:68
msgid "`app`: always refers to the instance of your application."
msgstr "`app`: 常にアプリケーションのインスタンスを参照します。"

#: ../../sources/guide/lang.rst:69
msgid "`root`: refers to the base widget/template in the current rule"
msgstr "`root`: 現在のルールでベースの「widget/template」を参照します。"

#: ../../sources/guide/lang.rst:70
msgid "`self`: always refer to the current widget"
msgstr "`self`: 常にカレントのwidgetを参照します。"

#: ../../sources/guide/lang.rst:73
msgid "Special syntaxes"
msgstr "Special syntaxes(特別な構文)"

#: ../../sources/guide/lang.rst:75
msgid ""
"There are two special syntaxes to define values for the whole Kv context:"
msgstr "Kvコンテキスト全体を定義するには、2つの特別な構文があります:"

#: ../../sources/guide/lang.rst:77
msgid "To access python modules and classes from kv, ::"
msgstr "KvからPythonモジュールとクラスにアクセスするには："

#: ../../sources/guide/lang.rst:83 ../../sources/guide/lang.rst:95
msgid "is equivalent to::"
msgstr "これは以下と同等です::"

#: ../../sources/guide/lang.rst:89 ../../sources/guide/lang.rst:99
msgid "in python."
msgstr "Pythonではこうなります。"

#: ../../sources/guide/lang.rst:91
msgid "To set a global value, ::"
msgstr "グローバルな値をセットするには::"

#: ../../sources/guide/lang.rst:102
msgid "Instantiate children"
msgstr "子をインスタンス化"

#: ../../sources/guide/lang.rst:104
msgid ""
"To declare the widget has a child widget, instance of some class, just "
"declare this child inside the rule:"
msgstr "widgetが子widgetを持ついくつかのクラスのインスタンスを宣言するためには、ルールの内部にその子を宣言します:"

#: ../../sources/guide/lang.rst:114
msgid ""
"The example above defines that our root widget, an instance of "
"`MyRootWidget`, which has a child that is an instance of the "
":class:`~kivy.uix.boxlayout.BoxLayout`.  That BoxLayout further has two "
"children, instances of the :class:`~kivy.uix.button.Button` class."
msgstr ""
"上記の例では、root "
"widget、`MyRootWidget`のインスタンスは、:class:`~kivy.uix.boxlayout.BoxLayout`の子のインスタンスを有しています"
" 。BoxLayoutは、さらに、:class:`~kivy.uix.button.Button` クラスのインスタンスである2つの子の親です。\""

#: ../../sources/guide/lang.rst:119
msgid "A python equivalent of this code could be:"
msgstr "Pythonコードでの同じ内容は次のようになります:"

#: ../../sources/guide/lang.rst:129
msgid "Which you may find less nice, both to read and to write."
msgstr "どぢらでも読み込み、書き込みできます。"

#: ../../sources/guide/lang.rst:131
msgid ""
"Of course, in python, you can pass keyword arguments to your widgets at "
"creation to specify their behaviour.  For example, to set the number of "
"columns of a :mod:`~kivy.uix.gridlayout`, we would do::"
msgstr ""
"もちろん、Pythonでも動作を指定するために、作成時にwidgetにキーワード引数を渡せます。例えば、列の数を数を設定する :mod:`~kivy.uix.gridlayout` 　\n"
" の場合はこうなります："

#: ../../sources/guide/lang.rst:137
msgid ""
"To do the same thing in kv, you can set properties of the child widget "
"directly in the rule:"
msgstr "KVで同じことを行うには、ルールで直接、子のwidgetのプロパティを設定できます:"

#: ../../sources/guide/lang.rst:145
msgid ""
"The value is evaluated as a python expression, and all the properties used "
"in the expression will be observed, that means that if you had something "
"like this in python (this assume `self` is a widget with a `data` "
":class:`~kivy.property.ListProperty`)::"
msgstr ""
"値はPythonの式として評価され、式の中で使用されるすべてのプロパティが表現され、Pythonでもいくつかを表現出来ることを意味します。(`self`"
" widget は　:class:`~kivy.property.ListProperty` の`data` を保持していると推測)::"

#: ../../sources/guide/lang.rst:153
msgid ""
"To have your display updated when your data change, you can now have just:"
msgstr "現在のデータの変更がされたときに、表示が更新されます："

#: ../../sources/guide/lang.rst:161
msgid ""
"Widget names should start with upper case letters while property names "
"should start with lower case ones. Following the `PEP8 Naming Conventions "
"<https://www.python.org/dev/peps/pep-0008/#naming-conventions>`_ is "
"encouraged."
msgstr ""
"プロパティ名は先頭小文字で、wigdet名の先頭は大文字で書く必要があります。以下の `PEP8の命名規則 "
"<https://www.python.org/dev/peps/pep-0008/#naming-conventions>`_  が奨励されています。"

#: ../../sources/guide/lang.rst:167
msgid "Event Bindings"
msgstr "Event Bindings(イベントバインディング)"

#: ../../sources/guide/lang.rst:169
msgid ""
"You can bind to events in Kv using the \":\" syntax, that is, associating a "
"callback to an event:"
msgstr "コールバックをイベントに関連付ける \"：\"構文を使用して、Kvのイベントにバインドできます。"

#: ../../sources/guide/lang.rst:177
msgid ""
"You can pass the values dispatched by the signal using the `args` keyword:"
msgstr "`args`  キーワードを使用することで、シグナルによってディスパッチした値を渡せます:"

#: ../../sources/guide/lang.rst:184
msgid "More complex expressions can be used, like:"
msgstr "より複雑な式は次の様に使用できます："

#: ../../sources/guide/lang.rst:190
msgid ""
"This expression listens for a change in ``center_x``, ``center_y``, and "
"``texture_size``. If one of them changes, the expression will be re-"
"evaluated to update the ``pos`` field."
msgstr ""
"この式は ``center_x`` 、``center_y`` 、``texture_size`` "
"の変化を表示しています。一方が変化した場合、再評価され, ``pos`` フィールドは更新されます。"

#: ../../sources/guide/lang.rst:194
msgid ""
"You can also handle ``on_`` events inside your kv language. For example the "
"TextInput class has a ``focus`` property whose auto-generated ``on_focus`` "
"event can be accessed inside the kv language like so:"
msgstr ""
"kv language内で ``on_`` イベントをハンドル出来ます。 "
"例えばTextInputクラスが持つ`focus``プロパティは、自動生成される ``on_focus``イベントでkv language "
"の内部にアクセスできます。"

#: ../../sources/guide/lang.rst:205
msgid "Extend canvas"
msgstr "キャンバスを拡張する"

#: ../../sources/guide/lang.rst:207
msgid ""
"Kv lang can be used to define the canvas instructions of your widget like "
"this:"
msgstr "KV langは、このようなwidgetのキャンバス命令を定義するために使用できます:"

#: ../../sources/guide/lang.rst:218
msgid "And they get updated when properties values change."
msgstr "\"プロパティの値が変更されたときに更新されます。"

#: ../../sources/guide/lang.rst:220
msgid "Of course you can use `canvas.before` and `canvas.after`."
msgstr "もちろん、`canvas.before` と `canvas.after`を使用できます 。"

#: ../../sources/guide/lang.rst:223
msgid "Referencing Widgets"
msgstr "Referencing Widgets(Widgetを参照する)"

#: ../../sources/guide/lang.rst:225
msgid ""
"In a widget tree there is often a need to access/reference other widgets. "
"The Kv Language provides a way to do this using id's. Think of them as class"
" level variables that can only be used in the Kv language. Consider the "
"following:"
msgstr ""
"widgetツリーで、他のwidgetにaccess/referenceするのが必要になることがあります。Kv "
"Languageは「ID」を使用して実行する方法を提供しています。Kv "
"Languageのみで使用でき、クラスレベルの変数と考えます。次の点を考慮します:"

#: ../../sources/guide/lang.rst:244
msgid ""
"An ``id`` is limited in scope to the rule it is declared in, so in the code "
"above ``s_but`` can not be accessed outside the ``<MySecondWidget>`` rule."
msgstr ""
"``id``はルール内で制限されており、上記のコードでは``s_but``は ``<MySecondWidget>``  "
"ルールの外にはアクセス出来ません:"

#: ../../sources/guide/lang.rst:248
msgid ""
"When assigning a value to ``id``, remember that the value isn't a string. "
"There are no quotes: good -> ``id: value``, bad -> ``id: 'value'``"
msgstr ""
"idに値を代入するときは、その値が文字列ではないことに注意してください。引用符(’)はありません：良い例  - > id：value、b悪い例 - > "
"id： 'value'"

#: ../../sources/guide/lang.rst:251
msgid ""
"An ``id`` is a ``weakref`` to the widget and not the widget itself. As a "
"consequence, storing the ``id`` is not sufficient to keep the widget from "
"being garbage collected. To demonstrate:"
msgstr ""
"``id`` はwidgetの``weakref（弱い参照）`` でありwidget自身ではありません。その結果、``id`` "
"はガベージコレクションを行ってからの保存は十分ではありません。実証するためには:"

#: ../../sources/guide/lang.rst:269
msgid ""
"Although a reference to ``label_widget`` is stored in ``MyWidget``, it is "
"not sufficient to keep the object alive once other references have been "
"removed because it's only a weakref. Therefore, after the remove button is "
"clicked (which removes any direct reference to the widget) and the window is"
" resized (which calls the garbage collector resulting in the deletion of "
"``label_widget``), when the add button is clicked to add the widget back, a "
"``ReferenceError: weakly-referenced object no longer exists`` will be "
"thrown."
msgstr ""
"`MyWidget``内の``label_widget``参照は "
"、weakref(弱い参照)のみなので、他の参照が削除された後に生存しているオブジェクトを保持するのに十分ではないです。したがって、削除ボタンをクリックして（ウィジェットへの直接参照を除去する）、ウィンドウがリサイズされ（``label_widget``の欠失をもたらすガベージコレクタを呼び出す）、追加ボタンがクリックされ、widgetを追加するために戻ると、"
" ``ReferenceError: weakly-referenced object no longer exists``がスローされます。"

#: ../../sources/guide/lang.rst:278
msgid ""
"To keep the widget alive, a direct reference to the ``label_widget`` widget "
"must be kept. This is achieved using ``id.__self__`` or "
"``label_widget.__self__`` in this case. The correct way to do this would be:"
msgstr ""
"生存しているウィジェットを保つために、``label_widget`` widget への直接参照は維持されなければなりません。 "
"このケースでは使用して達成した、``id.__self__`` "
"または``label_widget.__self__``です。これを行うための正しい方法は次のようになります:"

#: ../../sources/guide/lang.rst:288
msgid "Accessing Widgets defined inside Kv lang in your python code"
msgstr "PythonコードからKv lang の内部で定義されたwigetsにアクセスする"

#: ../../sources/guide/lang.rst:290 ../../sources/guide/lang.rst:424
msgid "Consider the code below in my.kv:"
msgstr "my.kvで次のコードを考えてみます:"

#: ../../sources/guide/lang.rst:306 ../../sources/guide/lang.rst:440
msgid "In myapp.py:"
msgstr "myapp.py では:"

#: ../../sources/guide/lang.rst:320
msgid ""
"`txt_inpt` is defined as a :class:`~kivy.properties.ObjectProperty` "
"initialized to `None` inside the Class. ::"
msgstr ""
"`txt_inpt`は:class:`~kivy.properties.ObjectProperty`で定義されてクラス内で `None` "
"に初期化されます。"

#: ../../sources/guide/lang.rst:325
msgid ""
"At this point self.txt_inpt is `None`. In Kv lang this property is updated "
"to hold the instance of the :class:`~kivy.uix.TextInput` referenced by the "
"id `txt_inpt`.::"
msgstr ""
"この時点でself.txt_inptは`None`です。Kv lang プロパティはid `txt_inpt`によって参照された "
":class:`~kivy.uix.TextInput`インスタンスを保持するように更新されます::"

#: ../../sources/guide/lang.rst:331
msgid ""
"From this point onwards, `self.txt_inpt` holds a reference to the widget "
"identified by the id `txt_input` and can be used anywhere in the class, as "
"in the function `check_status`. In contrast to this method you could also "
"just pass the `id` to the function that needs to use it, like in case of "
"`f_but` in the code above."
msgstr ""
"これ以降、`self.txt_inpt`は、ID "
"`txt_input`によって識別されるwidgetへの参照を保持し、`check_status`機能のように、クラス内のどこにでも使用することができます。"
" この方法とは対照的に、また、単に上記のコードで `f_but` の場合のように、使用する必要がある関数にIDを渡せます。"

#: ../../sources/guide/lang.rst:337
msgid ""
"There is a simpler way to access objects with `id` tags in Kv using the "
"`ids` lookup object. You can do this as follows:"
msgstr ""
"参照オブジェクト`ids` を使用して、Kvで`id`タグを持つオブジェクトにアクセスするための簡単な方法があります。 \"\n"
"\"次のように行えます："

#: ../../sources/guide/lang.rst:351
msgid "In your python code:"
msgstr "Pythonコードでは:"

#: ../../sources/guide/lang.rst:361
msgid ""
"When your kv file is parsed, kivy collects all the widgets tagged with id's "
"and places them in this `self.ids` dictionary type property. That means you "
"can also iterate over these widgets and access them dictionary style::"
msgstr ""
"KVファイルがパース(解析)されると、kivyは、IDでタグ付けされたすべてのwidgetを収集し、dict型のプロパティ `self.ids` "
"に配置します。また、widgetを反復処理し、dict形式でアクセスできることを意味します："

#: ../../sources/guide/lang.rst:370
msgid ""
"Although the `self.ids` method is very concise, it is generally regarded as "
"'best practice' to use the ObjectProperty. This creates a direct reference, "
"provides faster access and is more explicit."
msgstr ""
"「self.ids」 の使用する方法は非常に簡潔であるが、通常はObjectPropertyを使用する方が「ベストプラクティス」です。 "
"より高速なアクセスが提供されてより明示的になります。"

#: ../../sources/guide/lang.rst:375
msgid "Dynamic Classes"
msgstr "Dynamic Classes(ダイナミッククラス)"

#: ../../sources/guide/lang.rst:376
msgid "Consider the code below:"
msgstr "以下のコードを考えてみましょう："

#: ../../sources/guide/lang.rst:398
msgid ""
"Instead of having to repeat the same values for every button, we can just "
"use a template instead, like so:"
msgstr "代わりにテンプレートを使用することで、すべてのボタンに対して同じ値を返せます:"

#: ../../sources/guide/lang.rst:417
msgid ""
"This class, created just by the declaration of this rule, inherits from the "
"Button class and allows us to change default values and create bindings for "
"all its instances without adding any new code on the Python side."
msgstr ""
"このルールの宣言によって作成されたクラスは、Buttonクラスを継承し、デフォルト値を変更し、Python側で任意の新しいコードを追加することなく、すべてのインスタンスのバインディングを作成できます。"

#: ../../sources/guide/lang.rst:422
msgid "Re-using styles in multiple widgets"
msgstr "Re-using styles in multiple widgets(複数のwidgetでのスタイルの再使用)"

#: ../../sources/guide/lang.rst:456
msgid ""
"Because both classes share the same .kv style, this design can be simplified"
" if we reuse the style for both widgets. You can do this in .kv as follows. "
"In my.kv:"
msgstr ""
"両方のクラスで同じ.kvスタイルを共有するため、両方のwidgetのスタイルを再利用する場合は、設計を簡素できます。次のように.kvで行えます。my.kvだと:"

#: ../../sources/guide/lang.rst:468
msgid ""
"By separating the class names with a comma, all the classes listed in the "
"declaration will have the same kv properties."
msgstr "カンマでクラス名を分離することで、宣言に記載されているすべてのクラスが同じkv プロパティを持つことになります。"

#: ../../sources/guide/lang.rst:472
msgid "Designing with the Kivy Language"
msgstr "Designing with the Kivy Language(Kivy Languageを使用した設計)"

#: ../../sources/guide/lang.rst:474
msgid ""
"One of aims of the Kivy language is to `Separate the concerns "
"<https://en.wikipedia.org/wiki/Separation_of_concerns>`_ of presentation and"
" logic. The presentation (layout) side is addressed by your kv file and the "
"logic by your py file."
msgstr ""
"Kivy language "
"の目的の一つは、プレゼンテーションとロジックの`関心の分離<hhttps://ja.wikipedia.org/wiki/%E9%96%A2%E5%BF%83%E3%81%AE%E5%88%86%E9%9B%A2>`_"
" 、を実現することにあります。 プレゼンテーション（レイアウト）側は、あなたのkvファイル、ロジック側はpyファイルによって対処されます。"

#: ../../sources/guide/lang.rst:480
msgid "The code goes in py files"
msgstr "The code goes in py files(pyファイルのコードにいく)"

#: ../../sources/guide/lang.rst:482
msgid ""
"Let's start with a little example. First, the Python file named `main.py`:"
msgstr "少し例を見てみましょう。 まず、main.pyという名前のPythonのファイル："

#: ../../sources/guide/lang.rst:487
msgid "In this example, we are creating a Controller class with 2 properties:"
msgstr "この例では、2つのプロパティを持つControllerクラスを作成しています："

#: ../../sources/guide/lang.rst:489
msgid "``info`` for receving some text"
msgstr "テキストを受信するための``info`` "

#: ../../sources/guide/lang.rst:490
msgid "``label_wid`` for receving the label widget"
msgstr "label widgetを受信するための``label_wid``"

#: ../../sources/guide/lang.rst:492
msgid ""
"In addition, we are creating a ``do_action()`` method that will use both of "
"these properties. It will change the ``info`` text and change text in the "
"``label_wid`` widget."
msgstr ""
"加えて、``do_action()`` メソッドで両方のプロパティを作成している。これは``info`` テキストの変更と ``label_wid`` "
"widgetのテキスト変更。"

#: ../../sources/guide/lang.rst:497
msgid "The layout goes in controller.kv"
msgstr "The layout goes in controller.kv(レイアウトはcontroller.kvに行く)"

#: ../../sources/guide/lang.rst:499
msgid ""
"Executing this application without a corresponding `.kv` file will work, but"
" nothing will be shown on the screen. This is expected, because the "
"``Controller`` class has no widgets in it, it's just a ``FloatLayout``. We "
"can create the UI around the ``Controller`` class in a file named "
"`controller.kv`, which will be loaded when we run the ``ControllerApp``. How"
" this is done and what files are loaded is described in the "
":meth:`kivy.app.App.load_kv` method."
msgstr ""
"対応する`.kv` "
"ファイルを使用せずにアプリケーションを実行すると動作はしますが画面に何も表示されません。期待されている``Controller``クラスは、``FloatLayout``のようなwidgetを持っていないためです"
" 。``Controller``クラス周りのUI、ファイル名が`controller.kv`に実行時にロードする``ControllerApp`` "
"を作成できます。ファイルのロードや実行方法は :meth:`kivy.app.App.load_kv` メソッドで説明されます。"

#: ../../sources/guide/lang.rst:510
msgid ""
"One label and one button in a vertical ``BoxLayout``. Seems very simple. "
"There are 3 things going on here:"
msgstr ""
"vertical な``BoxLayout``で一つのラベルと一つのボタンです。\n"
"”非常に単純です。 同時に3つの事が起こっています:"

#: ../../sources/guide/lang.rst:513
msgid ""
"Using data from the ``Controller``. As soon as the ``info`` property is "
"changed in the controller, the expression ``text: 'My controller info is: ' "
"+ root.info`` will automatically be re-evaluated, changing the text in the "
"``Button``."
msgstr ""
"text: 'My controller info is: ' + root.info`` "
"は自動的にテキストに変更されて\"Buttonは再評価され、``info``プロパティはすぐにコントローラに変化します。"

#: ../../sources/guide/lang.rst:518
msgid ""
"Giving data to the ``Controller``. The expression ``id: my_custom_label`` is"
" assigning the created ``Label`` the id of ``my_custom_label``. Then, using "
"``my_custom_label`` in the expression ``label_wid: my_custom_label`` gives "
"the instance of that ``Label`` widget to your ``Controller``."
msgstr ""
" ``Controller``はデータを与えます。 ``id: my_custom_label``は``my_custom_label``の Label ID の作成に割り当てされます。\n"
"次に、``label_wid: my_custom_label``式で``my_custom_label``を使用すると``Label`` widgetのインスタンスは``Controller``を与えます 。"

#: ../../sources/guide/lang.rst:524
msgid ""
"Creating a custom callback in the ``Button`` using the ``Controller``'s "
"``on_press`` method."
msgstr "``Controller``の``on_press``方法を使用して``Button`` のカスタムコールバックを作成します。"

#: ../../sources/guide/lang.rst:527
msgid ""
"``root`` and ``self`` are reserved keywords, useable anywhere. ``root`` "
"represents the top widget in the rule and ``self`` represents the current "
"widget."
msgstr ""
"``root`` と ``self`` は予約済みのキーワードで任意の場所で使用可能です。 ``root`` はルールでトップwidgetを表し、 "
"``self`` は現在のwidgetを表します。"

#: ../../sources/guide/lang.rst:531
msgid ""
"You can use any id declared in the rule the same as ``root`` and ``self``. "
"For example, you could do this in the ``on_press()``:"
msgstr "``root`` と ``self`` 同じルールで宣言されたIDを使用できます。たとえば、\"on_press()\" で行えます ："

#: ../../sources/guide/lang.rst:539
msgid ""
"And that's that. Now when we run `main.py`, `controller.kv` will be loaded "
"so that the ``Button`` and ``Label`` will show up and respond to our touch "
"events."
msgstr ""
"これでおしまいです。`main.py`を実行したとき、`controller.kv` がロードされて\"``Button`` や "
"``Label``が表示され、タッチイベントに応答します。"
