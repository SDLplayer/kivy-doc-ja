# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-13 08:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: JUN OKAZAKI <okazakijun54392@gmail.com>, 2017\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/python_kivy_doc_ja/teams/74810/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sources/guide/packaging-windows.rst:2
msgid "Create a package for Windows"
msgstr "Create a package for Windows（翻訳済み）"

#: ../../sources/guide/packaging-windows.rst:6
msgid "This document only applies for kivy ``1.9.1`` and greater."
msgstr "この文章はkivy ``1.9.1`` 以降のバージョンが対象です。"

#: ../../sources/guide/packaging-windows.rst:8
msgid ""
"Packaging your application for the Windows platform can only be done inside "
"the Windows OS. The following process has been tested on Windows with the "
"Kivy **wheels** installation, see at the end for alternate installations."
msgstr ""
"Windowsプラットフォーム用のアプリケーションのパッケージは、Windows OS内でできます。次のプロセスはKivy "
"wheelsのインストールをwindowsにインストールし、インストールの終了までテストされています。 "

#: ../../sources/guide/packaging-windows.rst:12
msgid ""
"The package will be either 32 or 64 bits depending on which version of "
"Python you ran it with."
msgstr "パッケージは実行したPythonのバージョンに応じて32bit,64bitのどちらかになります。"

#: ../../sources/guide/packaging-windows.rst:18
msgid "Requirements"
msgstr "Requirements(要件)"

#: ../../sources/guide/packaging-windows.rst:20
msgid "Latest Kivy (installed as described in :ref:`installation_windows`)."
msgstr "Kivyの最新バージョン（ :ref:`installation_windows` の記載の通りインストール ）。"

#: ../../sources/guide/packaging-windows.rst:21
msgid "PyInstaller 3.1+ (``pip install --upgrade pyinstaller``)."
msgstr "PyInstallerは3.1以上 (``pip install --upgrade pyinstaller`"

#: ../../sources/guide/packaging-windows.rst:26
msgid "PyInstaller default hook"
msgstr "PyInstaller default hook(PyInstallerのデフォルトhookについて)"

#: ../../sources/guide/packaging-windows.rst:28
msgid ""
"This section applies to PyInstaller (>= 3.1) that includes the kivy hooks. "
"To overwrite the default hook the following examples need to be slightly "
"modified. See :ref:`overwrite-win-hook`."
msgstr ""
"このセクションはKivy hookを含むPyInstaller（> = "
"3.1）に適用されます。デフォルトのhookを上書きするには、以下の例を少し変更する必要があります。:ref:`overwrite-win-hook` "
"を参照してください。"

#: ../../sources/guide/packaging-windows.rst:33
msgid "Packaging a simple app"
msgstr "Packaging a simple app(シンプルなアプリのパッケージ化)"

#: ../../sources/guide/packaging-windows.rst:35
msgid ""
"For this example, we'll package the **touchtracer** example project and "
"embed a custom icon. The location of the kivy examples is, when using the "
"wheels, installed to ``python\\\\share\\\\kivy-examples`` and when using the"
" github source code installed as ``kivy\\\\examples``. We'll just refer to "
"the full path leading to the examples as ``examples-path``. The touchtracer "
"example is in ``examples-path\\\\demo\\\\touchtracer`` and the main file is "
"named ``main.py``."
msgstr ""
"この例では、touchtracerサンプルプロジェクトをパッケージ化し、カスタムアイコンを埋め込みます。wheelを使用してインストールしている場合、kivyのサンプルコードの場所は「python\\\\\\\\share"
"\\\\\\\\kivy-examples」にgithubのソースコードをインストールして使用するときは 「kivy\\\\\\\\examples」 "
"にあります 。サンプルコードに至る絶対パスexamples-pathパスを参照します。touchtracerの例があるexamples-"
"path\\\\demo\\\\touchtracerとメインファイルは「main.py」です"

#: ../../sources/guide/packaging-windows.rst:42
msgid ""
"Open your command line shell and ensure that python is on the path (i.e. "
"``python`` works)."
msgstr "コマンドラインシェルを開き、pythonがパス上にあることを確認します（つまり、pythonが動作する事）"

#: ../../sources/guide/packaging-windows.rst:44
msgid ""
"Create a folder into which the packaged app will be created. For example "
"create a ``TouchApp`` folder and `change to that directory "
"<http://www.computerhope.com/cdhlp.htm>`_ with e.g. ``cd TouchApp``. Then "
"type::"
msgstr ""
"パッケージ化するアプリを作成するフォルダを作成します。例えば「TouchApp」フォルダを作成し、  「cd TouchApp」のように入力してその "
"`ディレクトリに移動します<http://www.computerhope.com/cdhlp.htm>`_  。以下のように入力します\""

#: ../../sources/guide/packaging-windows.rst:51
msgid ""
"You can also add an `icon.ico` file to the application folder in order to "
"create an icon for the executable. If you don't have a .ico file available, "
"you can convert your `icon.png` file to ico using the web app `ConvertICO "
"<http://www.convertico.com>`_. Save the `icon.ico` in the touchtracer "
"directory and type::"
msgstr ""
"また実行可能ファイルのアイコンを作成するために、アプリケーションフォルダに `icon.ico` "
"ファイルを追加できます。利用可能な.icoファイルがない場合は、Webアプリケーションの `ConvertICO "
"<http://www.convertico.com>`_ "
"を使用して「icon.png」ファイルを変換することができます。touchtracerディレクトリに 「icon.ico」 を保存して入力します::"

#: ../../sources/guide/packaging-windows.rst:59
msgid ""
"For more options, please consult the `PyInstaller Manual "
"<http://pythonhosted.org/PyInstaller/>`_."
msgstr ""
"より多くのオプションについては、`pyInstallerのマニュアル<http://pythonhosted.org/PyInstaller/>`_ "
"を参照してください 。"

#: ../../sources/guide/packaging-windows.rst:62
msgid ""
"The spec file will be ``touchtracer.spec`` located in ``TouchApp``. Now we "
"need to edit the spec file to add the dependencies hooks to correctly build "
"the exe. Open the spec file with your favorite editor and add these lines at"
" the beginning of the spec (assuming sdl2 is used, the default now)::"
msgstr ""
"specファイルは「TouchApp」の場合は「touchtracer.spec」 として配置されています "
"。正しく動作するexeファイルを構築するためには、依存関係のhookを追加するためにspecファイルを編集する必要があります。 "
"お気に入りのエディタでspecファイルを開いて、仕様の先頭に次の行を追加します（仮にsdl2がデフォルトで使用されている場合）::"

#: ../../sources/guide/packaging-windows.rst:69
msgid ""
"Then, find ``COLLECT()`` and add the data for touchtracer (`touchtracer.kv`,"
" `particle.png`, ...): Change the line to add a ``Tree()`` object, e.g. "
"``Tree('examples-path\\\\demo\\\\touchtracer\\\\')``. This Tree will search "
"and add every file found in the touchtracer directory to your final package."
msgstr ""
"「COLLECT()」 にtouchtracerのデータ（「touchtracer.kv」, "
"「particle.png」、...）を追加します。「Tree()」オブジェクトに追加する行を加えます（例：「Tree('examples-"
"path\\\\\\\\demo\\\\\\\\touchtracer\\\\\\\\')」）。Treeはtouchtracerディレクトリにあるすべてのファイルを検索して最終的なパッケージに追加します。"

#: ../../sources/guide/packaging-windows.rst:75
msgid ""
"To add the dependencies, before the first keyword argument in COLLECT add a "
"Tree object for every path of the dependencies. E.g. ``*[Tree(p) for p in "
"(sdl2.dep_bins + glew.dep_bins)]`` so it'll look something like::"
msgstr ""
"COLLECT依存関係の最初のキーワード引数の前にTreeオブジェクトのすべてのパスに依存関係を追加します。例えば「*[Tree(p) for p in"
" (sdl2.dep_bins + glew.dep_bins)]」 の場合は次のようになります： "

#: ../../sources/guide/packaging-windows.rst:89
msgid "Now we build the spec file in ``TouchApp`` with::"
msgstr "「TouchApp」 のspecファイルをビルドします::"

#: ../../sources/guide/packaging-windows.rst:93
msgid ""
"The compiled package will be in the `TouchApp\\\\dist\\\\touchtracer` "
"directory."
msgstr "コンパイルされたパッケージは「TouchApp\\\\\\\\dist\\\\\\\\touchtracer」ディレクトリに生成されます。"

#: ../../sources/guide/packaging-windows.rst:96
msgid "Packaging a video app with gstreamer"
msgstr "Packaging a video app with gstreamer(gstreamerのビデオアプリをパッケージ化)"

#: ../../sources/guide/packaging-windows.rst:98
msgid ""
"Following we'll slightly modify the example above to package a app that uses"
" gstreamer for video. We'll use the ``videoplayer`` example found at "
"``examples-path\\widgets\\videoplayer.py``. Create a folder somewhere called"
" ``VideoPlayer`` and on the command line change your current directory to "
"that folder and do::"
msgstr ""
"後はビデオ用のgstreamerを使用するアプリケーションをパッケージ化するために上記の例を少し修正します。使用する 「videoplayer」 は"
"「examples-path\\\\widgets\\\\videoplayer.py」 "
"にあります。「VideoPlayer」フォルダを作成してコマンドラインでそのフォルダにカレントディレクトリを変更し次を実行します::"

#: ../../sources/guide/packaging-windows.rst:106
msgid ""
"to create the ``gstvideo.spec`` file. Edit as above and this time include "
"the gstreamer dependency as well::"
msgstr "「gstvideo.spec」 ファイルを作成します。そのうえで、この時gstreamerをインクルードするように編集してください::"

#: ../../sources/guide/packaging-windows.rst:111
msgid ""
"and add the ``Tree()`` to include the video files, e.g. ``Tree('examples-"
"path\\\\widgets')`` as well as the gstreamer dependencies so it should look "
"something like::"
msgstr ""
"「Tree()」 にビデオファイルをインクルードしたように追加をします。gstreamerの依存関係と同様に ``Tree('examples-"
"path\\\\\\\\widgets')`` にこのように追加します。"

#: ../../sources/guide/packaging-windows.rst:124
msgid "Then build the spec file in ``VideoPlayer`` with::"
msgstr "「VideoPlayer」 のspecファイルをビルドします::"

#: ../../sources/guide/packaging-windows.rst:128
msgid ""
"and you should find gstvideo.exe in ``VideoPlayer\\dist\\gstvideo``, which "
"when run will play a video."
msgstr "ビデオを再生するときには 「VideoPlayer\\\\dist\\\\gstvideo」でgstvideo.exeが存在している必要があります。"

#: ../../sources/guide/packaging-windows.rst:133
msgid ""
"If you're using Pygame and need PyGame in your packaging app, you'll have to"
" add the following code to your spec file due to kivy issue #1638. After the"
" imports add the following::"
msgstr ""
"Pygameを使用していて、アプリのパッケージにPygameが必要な場合は、 kivy issue "
"#1638にあるようにspecファイルに次のコードを追加してください。importの後に追加します::"

#: ../../sources/guide/packaging-windows.rst:149
msgid "Overwriting the default hook"
msgstr "Overwriting the default hook(デフォルトhookを上書きします)"

#: ../../sources/guide/packaging-windows.rst:152
msgid "Including/excluding video and audio and reducing app size"
msgstr ""
"Including/excluding video and audio and reducing app "
"size（Videoとaudioを引き込むのを除くことでアプリのサイズを縮小する）"

#: ../../sources/guide/packaging-windows.rst:154
msgid ""
"PyInstaller includes a hook for kivy that by default adds **all** the core "
"modules used by kivy, e.g. audio, video, spelling etc (you still need to "
"package the gstreamer dlls manually with ``Tree()`` - see the example above)"
" and their dependencies. If the hook is not installed or to reduce app size "
"some of these modules may be excluded, e.g. if no audio/video is used, with "
"an alternative hook."
msgstr ""
"PyInstallerのデフォルトはkivy、例えばオーディオ、ビデオ、スペルなど使用される  **すべての** "
"のコアモジュールをhookに追加します。（「Tree()」を使用して手動でgstreamerのDLLをパッケージ化する必要があります - "
"下記の例を参照してください。）。hookがインストールされていないか、オーディオ/ビデオを使用しない場合でアプリケーションサイズを縮小する場合はこれらのモジュールのいくつかは、別のhookにするか除外してもよいです"

#: ../../sources/guide/packaging-windows.rst:161
msgid ""
"Kivy provides the alternate hook at "
":func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath`. In addition, if "
"and only if PyInstaller doesn't have the default hooks "
":func:`~kivy.tools.packaging.pyinstaller_hooks.runtime_hooks` must also be "
"provided. When overwriting the hook, the latter one typically is not "
"required to be overwritten."
msgstr ""
"Kivyは :func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath` "
"で代替hookを提供します 。 PyInstallerのデフォルトのhookがない場合に限り、 "
":func:`~kivy.tools.packaging.pyinstaller_hooks.runtime_hooks` も提供されなければなりません。"
" hookを上書きするときに、 runtime_hooks()は通常は上書きする必要はありません。"

#: ../../sources/guide/packaging-windows.rst:168
msgid ""
"The alternate :func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath` hook"
" does not include any of the kivy providers. To add them, they have to be "
"added with :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal` "
"or :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all`. See their "
"documentation and :mod:`~kivy.tools.packaging.pyinstaller_hooks` for more "
"details. But essentially, "
":func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all` add all the "
"providers like in the default hook while "
":func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal` only adds "
"those that are loaded when the app is run. Each method provides a list of "
"hidden kivy imports and excluded imports that can be passed on to "
"``Analysis``."
msgstr ""
":func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath`  の代替hockはkivyプロバイダのどれかが含まれてません。追加するには、:func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal` \n"
"または :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all`  で追加する必要があります。詳細については、 :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal`  と :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all`  ドキュメントと\"\n"
"\":mod:`~kivy.tools.packaging.pyinstaller_hooks` を参照してください。しかしながら本質的には、 :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all`  でデフォルトhookにすべてのプロバイダを追加するか :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal`  でアプリの実行時にロードされているものを追加します。それぞれの方法は「Analysis」に渡せます。そしてkivyの隠れたimport、または除外されたimportのリストを提供します。"

#: ../../sources/guide/packaging-windows.rst:181
msgid ""
"One can also generate a alternate hook which literally lists every kivy "
"provider module and those not required can be commented out. See "
":mod:`~kivy.tools.packaging.pyinstaller_hooks`."
msgstr ""
"1つの方法は、文字通りすべてのkivyプロバイダモジュールをリスト化し、必要でないものはコメントアウトして代替hookを生成します。:mod:`~kivy.tools.packaging.pyinstaller_hooks`"
" を参照してください。"

#: ../../sources/guide/packaging-windows.rst:185
msgid ""
"To use the the alternate hooks with the examples above modify as following "
"to add the hooks with ``hookspath()`` and ``runtime_hooks`` (if required) "
"and ``**get_deps_minimal()`` or ``**get_deps_all()`` to specify the "
"providers."
msgstr ""
"上記の例と代替hookにhookを追加するには、次のように``hookspath()`` と ``runtime_hooks``  "
"（必要な場合）と``**get_deps_minimal()``または``**get_deps_all()``プロバイダを指定して使用します。"

#: ../../sources/guide/packaging-windows.rst:189
msgid "For example, add the import statement::"
msgstr "たとえば、import文を追加します::"

#: ../../sources/guide/packaging-windows.rst:193
msgid "and then modify ``Analysis`` as follows::"
msgstr "次のように ``Analysis`` を変更します。"

#: ../../sources/guide/packaging-windows.rst:202
msgid "to include everything like the default hook. Or::"
msgstr "デフォルトのhookのようなものがすべて含まれています。または："

#: ../../sources/guide/packaging-windows.rst:211
msgid ""
"e.g. to exclude the audio and video providers and for the other core modules"
" only use those loaded."
msgstr "例えばオーディオプロバイダとビデオプロバイダを除外した上で他のコアモジュールはロードされたもののみを使用します。"

#: ../../sources/guide/packaging-windows.rst:214
msgid ""
"The key points is to provide the alternate "
":func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath` which does not "
"list by default all the kivy providers and instead manually to hiddenimports"
" add the required providers while removing the undesired ones (audio and "
"video in this example) with "
":func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal`."
msgstr ""
"キーポイントは、代替を提供する :func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath`  "
"代わりに手動で含まれていない隠れたimportsとデフォルトで表示されないすべてのkivyプロバイダーと望ましくないもの（この例ではaudioとvideo）を"
" :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal` "
"で除去し、必要なプロバイダを追加します。"

#: ../../sources/guide/packaging-windows.rst:222
msgid "Alternate installations"
msgstr "Alternate installations(インストールの代替)"

#: ../../sources/guide/packaging-windows.rst:224
msgid ""
"The previous examples used e.g. ``*[Tree(p) for p in (sdl2.dep_bins + "
"glew.dep_bins + gstreamer.dep_bins)],`` to make PyInstaller add all the dlls"
" used by these dependencies. If kivy was not installed using the wheels "
"method these commands will not work and e.g. ``kivy.deps.sdl2`` will fail to"
" import. Instead, one must find the location of these dlls and manually pass"
" them to the ``Tree`` class in a similar fashion as the example."
msgstr ""
"前の例は、「*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins + "
"gstreamer.dep_bins)],」 を使用する場合は pyInstallerでの作成ですべてのDLLを追加し、依存関係で使用されます。 "
"kivy wheel "
"メソッドを使用してインストールされていない場合、これらのコマンドは動作しませんし例えば「kivy.deps.sdl2」のimportに失敗します。その代わりに、一つの方法としてはこれらのDLLの場所を見つけて「Tree」クラスの例と同様の方法で手動に渡す必要があります。"
