# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-13 08:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: JUN OKAZAKI <okazakijun54392@gmail.com>, 2017\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/python_kivy_doc_ja/teams/74810/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sources/api-kivy.clock.rst:3
msgid "Clock object"
msgstr "Clock object(翻訳ずみ)"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:2
msgid ""
"The :class:`Clock` object allows you to schedule a function call in the "
"future; once or repeatedly at specified intervals. You can get the time "
"elapsed between the scheduling and the calling of the callback via the `dt` "
"argument::"
msgstr ""
":class:`Clock`  オブジェクトを使用すると未来の関数呼び出しをスケジュールできます。 指定された間隔で1回または繰り返しを 引数  "
"`dt`  を使用して、スケジューリングとコールバックの呼び出しの間に経過した時間を取得できます::"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:22
msgid ""
"If the callback returns False, the schedule will be canceled and won't "
"repeat."
msgstr "コールバックのリターン値がFalseの場合はスケジュールはキャンセルされて繰り返されません。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:25
msgid ""
"If you want to schedule a function to call with default arguments, you can "
"use the `functools.partial "
"<http://docs.python.org/library/functools.html#functools.partial>`_ python "
"module::"
msgstr ""
"デフォルトの引数で呼び出す関数をスケジュールする場合は、 `functools.partial "
"<http://docs.python.org/library/functools.html#functools.partial>`_  "
"のpythonモジュールを使用できます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:37
msgid ""
"Conversely, if you want to schedule a function that doesn't accept the dt "
"argument, you can use a `lambda "
"<http://docs.python.org/2/reference/expressions.html#lambda>`_ expression to"
" write a short function that does accept dt. For Example::"
msgstr "逆にdt引き数を受け入れない関数をスケジュールする場合はラムダ式を使用してdtを受け入れる短い関数を書けます。例えば："

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:49
msgid ""
"You cannot unschedule an anonymous function unless you keep a reference to "
"it. It's better to add \\*args to your function definition so that it can be"
" called with an arbitrary number of parameters."
msgstr ""
"無名関数を参照しない限り、無名関数のスケジュール解除はできません。　　\n"
" \\*argsを関数定義に追加して、任意の数のパラメータで呼び出すことができます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:56
msgid ""
"The callback is weak-referenced: you are responsible for keeping a reference"
" to your original object/callback. If you don't keep a reference, the "
"ClockBase will never execute your callback. For example::"
msgstr ""
"コールバックは弱い参照です。元のオブジェクト/コールバックへの参照を保持する責任があります。 "
"参照を保持しないとClockBaseはコールバックを実行しません。 例えば："

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:83
msgid "Schedule before frame"
msgstr "Schedule before frame(フレーム前のスケジュール)"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:87
msgid ""
"Sometimes you need to schedule a callback BEFORE the next frame. Starting "
"from 1.0.5, you can use a timeout of -1::"
msgstr "場合によっては、次のフレームの前にコールバックをスケジュールする必要があります。 1.0.5から、-1のタイムアウトを使用できます::"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:93
msgid ""
"The Clock will execute all the callbacks with a timeout of -1 before the "
"next frame even if you add a new callback with -1 from a running callback. "
"However, :class:`Clock` has an iteration limit for these callbacks: it "
"defaults to 10."
msgstr ""
"実行中のコールバックから-1で新しいコールバックを追加した場合でも、Clockは次のフレームの前のタイムアウト-1のですべてのコールバックを実行します。 ただし、 \n"
" :class:`Clock`  にはこれらのコールバックの反復制限があります。デフォルトは10です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:98
msgid ""
"If you schedule a callback that schedules a callback that schedules a ... "
"etc more than 10 times, it will leave the loop and send a warning to the "
"console, then continue after the next frame. This is implemented to prevent "
"bugs from hanging or crashing the application."
msgstr ""
"...などをスケジュールするコールバックをスケジュールするコールバックをスケジュールが10より多いと、ループが終了してコンソールに警告が送信されて次のフレームの後に続きます。"
" これはバグがアプリケーションを停止またはクラッシュするのを防ぐために実装されています。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:103
msgid ""
"If you need to increase the limit, set the :attr:`max_iteration` property::"
msgstr "制限を増やす必要がある場合は、 :attr:`max_iteration` プロパティを設定します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:111
msgid "Triggered Events"
msgstr "Triggered Events(トリガーイベント)"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:115
msgid ""
"A triggered event is a way to defer a callback. It functions exactly like "
"schedule_once() and schedule_interval() except that it doesn't immediately "
"schedule the callback. Instead, one schedules the callback using the "
":class:`ClockEvent` returned by it. This ensures that you can call the event"
" multiple times but it won't be scheduled more than once. This is not the "
"case with :meth:`Clock.schedule_once`::"
msgstr ""
"トリガイベントはコールバックを延期する方法です。これはすぐにコールバックをスケジュールしないことを除いて、schedule_once() "
"およびchedule_interval() とまったく同じように機能します。代わりに返された :class:`ClockEvent`  "
"を使用してコールバックをスケジュールします。これにより、イベントを複数回呼び出すことができますが、複数回スケジュールされることはありません。  "
":meth:`Clock.schedule_once` ではそうではありません："

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:136
msgid ""
"In addition, it is more convenient to create and bind to the triggered event"
" than using :meth:`Clock.schedule_once` in a function::"
msgstr ""
"くわえて関数内で :meth:`Clock.schedule_once`  を使用するよりも、トリガーされたイベントを作成してバインドする方が便利です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:151
msgid ""
"Even if x and y changes within one frame, the callback is only run once."
msgstr "1フレーム内でxとyが変化してもコールバックは1回だけ実行されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:153
msgid ""
":meth:`CyClockBase.create_trigger` has a timeout parameter that behaves "
"exactly like :meth:`CyClockBase.schedule_once`."
msgstr ""
":meth:`CyClockBase.create_trigger` は、:meth:`CyClockBase.schedule_once` "
"とまったく同じように動作するタイムアウトパラメータを持っています。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:158
msgid ""
":meth:`CyClockBase.create_trigger` now has a ``interval`` parameter. If "
"False, the default, it'll create an event similar to "
":meth:`CyClockBase.schedule_once`. Otherwise it'll create an event similar "
"to :meth:`CyClockBase.schedule_interval`."
msgstr ""
":meth:`CyClockBase.create_trigger`  にパラメータ「interval」が追加されました。 "
"デフォルトのFalseの場合、 :meth:`CyClockBase.schedule_once` と同様のイベントが作成されます。 それ以外の場合は、"
" :meth:`CyClockBase.schedule_interval` と同様のイベントが作成されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:164
msgid "Unscheduling"
msgstr "Unscheduling(スケジュール解除)"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:166
msgid ""
"An event scheduled with :meth:`CyClockBase.schedule_once`, "
":meth:`CyClockBase.schedule_interval`, or with "
":meth:`CyClockBase.create_trigger` and then triggered can be unscheduled in "
"multiple ways. E.g::"
msgstr ""
":meth:`CyClockBase.schedule_once` 、:meth:`CyClockBase.schedule_interval` "
"、または:meth:`CyClockBase.create_trigger`  "
"を使用してスケジュールされてトリガーされたイベントは、複数の方法でスケジュール解除されていることがあります。 例えば："

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:193
msgid ""
"The best way to unschedule a callback is with :meth:`ClockEvent.cancel`. "
":meth:`CyClockBase.unschedule` is mainly an alias for that for that "
"function. However, if the original callback itself is passed to "
":meth:`CyClockBase.unschedule`, it'll unschedule all instances of that "
"callback (provided ``all`` is True, the default, other just the first match "
"is removed)."
msgstr ""
"コールバックをスケジュール解除する最も良い方法は、 :meth:`ClockEvent.cancel` を使用することです。 "
":meth:`CyClockBase.unschedule`  は主にその関数のエイリアスです。 ただし、元のコールバック自体が  "
":meth:`CyClockBase.unschedule` "
"に渡された場合はそのコールバックのすべてのインスタンスのスケジューリングが解除されます（すべてTrue、デフォルト、最初の一致のみが削除されている場合）。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:200
msgid ""
"Calling :meth:`CyClockBase.unschedule` on the original callback is highly "
"discouraged because it's significantly slower than when using the event."
msgstr ""
"元のコールバックで  :meth:`CyClockBase.unschedule` "
"を呼び出すことは、イベントを使用する場合よりも大幅に遅いために避けてください。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:204
msgid "Threading and Callback Order"
msgstr "Threading and Callback Order(スレッディングとコールバックの順序)"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:206
msgid ""
"Beginning with 1.10.0, all the events scheduled for the same frame, e.g. all"
" the events scheduled in the same frame with a ``timeout`` of ``0``, well be"
" executed in the order they were scheduled."
msgstr ""
"1.10.0から同じフレームに対して予定されているすべてのイベントが実行されます。 "
"例えば「タイムアウト」が「0」の同じフレームでスケジュールされたすべてのイベントは、スケジュールされた順に実行されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:210
msgid ""
"Also, all the scheduling and canceling methods are fully thread safe and can"
" be safely used from external threads."
msgstr "またスケジューリングとキャンセルのメソッドはすべてスレッドセーフになり外部スレッドから安全に使用できます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:213
msgid ""
"As a a consequence, calling :meth:`CyClockBase.unschedule` with the original"
" callback is now significantly slower and highly discouraged. Instead, the "
"returned events should be used to cancel. As a tradeoff, all the other "
"methods are now significantly faster than before."
msgstr ""
"その結果、元のコールバックを使用して :meth:`CyClockBase.unschedule`  を呼び出すとかなり遅くなり非常にがっかりします。 "
"代わりに返されたイベントを使用して取り消す必要があります。 トレードオフとして他のすべての方法は以前よりも大幅に高速になりました。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:219
msgid "Advanced Clock Details"
msgstr "Advanced Clock Details(高度なクロックの詳細)"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:221
msgid ""
"The following section goes into the internal kivy clock details as well as "
"the various clock options. It is meant only for advanced users."
msgstr ""
"次のセクションでは内部のKivy Clockの詳細とさまざまなClock オプションについて説明します。これは上級ユーザーのみを対象としています。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:224
msgid ""
"Fundamentally, the Kivy clock attempts to execute any scheduled callback "
"rhythmically as determined by the specified fps (frame per second, see "
"``maxfps`` in :mod:`~kivy.config`). That is, ideally, given e.g. a desired "
"fps of 30, the clock will execute the callbacks at intervals of 1 / 30 "
"seconds, or every 33.33 ms. All the callbacks in a frame are given the same "
"timestamp, i.e. the ``dt`` passed to the callback are all the same and it's "
"the difference in time between the start of this and the previous frame."
msgstr ""
"基本的に、Kivyのクロックは、指定されたfps（1秒あたりのフレーム数、 :mod:`~kivy.config` の ``maxfps``  "
"を参照）で決定される予定のコールバックをリズミカルに実行しようとします。すなわち、理想的には例えば以下のように与えられます。希望のfpsが30の場合、クロックは1/30秒間隔で、または33.33"
" "
"ms間隔でコールバックを実行します。フレーム内のすべてのコールバックには同じタイムスタンプが与えられます。つまりコールバックに渡された「dt」はすべて同じで、dtと前のフレームの開始時刻の差です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:232
msgid ""
"Because of inherent indeterminism, the frames do not actually occur exactly "
"at intervals of the fps and ``dt`` may be under or over the desired fps. "
"Also, once the timeout is \"close enough\" to the desired timeout, as "
"determined internally, Kivy will execute the callback in the current frame "
"even when the \"actual time\" has not elapsed the ``timeout`` amount."
msgstr ""
"固有の非確定性のために、フレームは実際にはfpsの間隔で正確には発生せず、「dt」は所望のfpsの下または上にいることもあります。また内部的に決定されるようにタイムアウトが希望のタイムアウトに「十分近い」と「実際の時間」がタイムアウト時間を経過していなくても、現在のフレームでコールバックを実行します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:238
msgid ""
"Kivy offers now, since ``1.10.0``, multiple clocks with different behaviors."
msgstr "Kivyは、1.10.0から、異なる動作の複数のクロックを提供しています。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:241
msgid "Default Clock"
msgstr "Default Clock(デフォルトクロック)"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:243
msgid ""
"The default clock (``default``) behaves as described above. When a callback "
"with a timeout of zero or non-zero is scheduled, they are executed at the "
"frame that is near the timeout, which is a function of the fps. So a timeout"
" of zero would still result in a delay of one frame or about 1 / fps, "
"typically a bit less but sometimes more depending on the CPU usage of the "
"other events scheduled for that frame."
msgstr ""
"デフォルトのクロック（「default」）は、上記のように動作します。タイムアウトが0または非ゼロのコールバックがスケジュールされるとタイムアウトに近いフレームで実行されます。これはfpsの関数です。そのためタイムアウトが0になると、1フレームまたは約1"
" / fpsの遅延が発生します。通常はそのフレームに対してスケジュールされた他のイベントのCPU使用率に応じて、通常は少し下がります。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:250
msgid ""
"In a test using a fps of 30, a callback with a timeout of 0, 0.001, and "
"0.05, resulted in a mean callback delay of 0.02487, 0.02488, and 0.05011 "
"seconds, respectively. When tested with a fps of 600 the delay for 0.05 was "
"similar, except the standard deviation was reduced resulting in overall "
"better accuracy."
msgstr ""
"30のfpsを使用するテストでは0、0.001、および0.05のタイムアウトを伴うコールバックにより、それぞれ平均で0.02487秒、0.02488秒および0.05011秒のコールバック遅延が発生しました。"
" 600fpsでテストした場合も標準偏差が減少して全体的により良い精度が得られることを除いては0.05の遅延は同様でした。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:256
msgid "Interruptible Clock"
msgstr "Interruptible Clock(割り込み可能なクロック)"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:258
msgid ""
"The default clock suffers from the quantization problem, as frames occur "
"only on intervals and any scheduled timeouts will not be able to occur "
"during an interval. For example, with the timeout of 0.05, while the mean "
"was 0.05011, its values ranged between 0.02548 - 0.07348 and a standard "
"deviation of 0.002. Also, there's the minimum timeout of about 0.02487."
msgstr ""
"デフォルトクロックはフレームがインターバル上でのみ発生しインターバル中にスケジュールされたタイムアウトが発生しないために量子化の問題をもっています。たとえば、タイムアウトが0.05の場合は平均値は0.05011でしたが、その値は0.02548〜0.07348の範囲で、標準偏差は0.002の範囲でした。また最小タイムアウトは約0.02487です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:264
msgid ""
"The interruptible clock (``interrupt``) will execute timeouts even during a "
"frame. So a timeout of zero will execute as quickly as possible and "
"similarly a non-zero timeout will be executed even during the interval."
msgstr ""
"割り込み可能なClock（「interrupt」）は、フレーム中であってもタイムアウトを実行します。したがってゼロのタイムアウトは可能な限り迅速に実行されて、同様にその間にもゼロ以外のタイムアウトが実行されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:268
msgid ""
"This clock, and all the clocks described after this have an option, "
":attr:`ClockBaseInterruptBehavior.interupt_next_only`. When True, any of the"
" behavior new behavior will only apply to the callbacks with a timeout of "
"zero. Non-zero timeouts will behave like in the default clock. E.g. for this"
" clock when True, only zero timeouts will execute during the the interval."
msgstr ""
"このクロックとこれ以降に記述されているすべてのクロックには、 \n"
" :attr:`ClockBaseInterruptBehavior.interupt_next_only` というオプションがあります。 Trueの場合、動作のいずれかで新しい動作はタイムアウトゼロのコールバックにのみ適用されます。ゼロ以外のタイムアウトはデフォルトクロックの場合と同じように動作します。例えば。このクロックでTrueの場合、その時間間隔の間にゼロタイムアウトのみが実行されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:274
msgid ""
"In a test using a fps of 30, a callback with a timeout of 0, 0.001, and "
"0.05, resulted in a mean callback delay of 0.00013, 0.00013, and 0.04120 "
"seconds, respectively when "
":attr:`ClockBaseInterruptBehavior.interupt_next_only` was False. Also, "
"compared to the default clock the standard deviation was reduced. When "
":attr:`ClockBaseInterruptBehavior.interupt_next_only` was True, the values "
"were 0.00010, 0.02414, and 0.05034, respectively."
msgstr ""
"30fpsを使用するテストでは "
":attr:`ClockBaseInterruptBehavior.interupt_next_only`がFalseの場合は、0、0.001、および0.05のタイムアウトを持つコールバックにより、それぞれ0.00013秒、0.00013秒および0.04120秒の平均コールバック遅延が発生しました。またデフォルトクロックと比較して、標準偏差が減少しました。"
" :attr:`ClockBaseInterruptBehavior.interupt_next_only`  "
"がTrueの場合、値はそれぞれ0.00010,0.02414,0.05034でした。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:282
msgid "Free Clock"
msgstr "Free Clock（フリークロック）"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:284
msgid ""
"The interruptible clock may not be ideal for all cases because all the "
"events are executed during the intervals and events are not executed anymore"
" rhythmically as multiples of the fps. For example, there may not be any "
"benefit for the graphics to update in a sub-interval, so the additional "
"accuracy wastes CPU."
msgstr ""
"割り込み可能なクロックはすべてのイベントがインターバル中に実行され、イベントがフェイズの倍数としてリズミカルに実行されないため理想的でない可能性があります。たとえばサブインターバルでグラフィックスを更新するメリットがない可能性があるため、追加の精度でCPUを浪費します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:290
msgid ""
"The Free clock (``free_all``) solves this by having ``Clock.xxx_free`` "
"versions of all the Clock scheduling methods. By free, we mean the event is "
"free from the fps because it's not fps limited. E.g. "
":meth:`CyClockBaseFree.create_trigger_free` corresponds to "
":meth:`CyClockBase.create_trigger`. Only when an event scheduled using the "
"``Clock.xxx_free`` methods is present will the clock interrupt and execute "
"the events during the interval. So, if no ``free`` event is present the "
"clock behaves like the ``default`` clock, otherwise it behaves like the "
"``interrupt`` clock."
msgstr ""
"フリー・クロック（「free_all」）は、すべてのクロック・スケジューリング方式の「Clock.xxx_free」バージョンを使用することでこれを解決します。フリーだとfpsが制限されていないためイベントにfpsがないことを意味します。例えば、"
"   :meth:`CyClockBaseFree.create_trigger_free` は "
":meth:`CyClockBase.create_trigger` に対応します。 "
"「Clock.xxx_free」メソッドを使用してスケジュールされたイベントが存在する場合のみ、clock "
"interruptが発生してその間にイベントが実行されます。したがって、「free」イベントが存在しない場合、クロックは「default」クロックのように動作し、それ以外の場合は「interrupt」クロックのように動作します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:300
msgid ""
"In a test using a fps of 30, a callback with a timeout of 0s, 0.001s, and "
"0.05s, resulted in a mean callback delay of 0.00012s, 0.00017s, and 0.04121s"
" seconds, respectively when it was a free event and 0.02403s, 0.02405s, and "
"0.04829s, respectively when it wasn't."
msgstr ""
"30fpsを使用するテストでは、0秒、0.001秒、および0.05秒のタイムアウトを持つコールバックにより、フリーイベントであったときにそれぞれ0.00012秒、0.00017秒、0.04121秒の平均コールバック遅延が発生して"
" 0.02403秒、0.02405秒、および0.04829秒でした。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:306
msgid "Free Only Clock"
msgstr "Free Only Clock(フリークロックのみ)"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:308
msgid ""
"The Free clock executes all events when a free event was scheduled. This "
"results in normal events also being execute in the middle of the interval "
"when a free event is scheduled. For example, above, when a free event was "
"absent, a normal event with a 0.001s timeout was delayed for 0.02405s. "
"However, if a free event happened to be also scheduled, the normal event was"
" only delayed 0.00014s, which may be undesirable."
msgstr ""
"フリー・クロックは、フリー・イベントがスケジュールされたときにすべてのイベントを実行します。 "
"この結果、通常のイベントが、空きイベントがスケジュールされている期間の途中で実行されます。 "
"例えば、上記のフリーイベントがなかった場合、0.001秒のタイムアウトを伴う通常のイベントは0.02405秒遅れました。 "
"しかし、フリーイベントが予定されていた場合、通常のイベントは0.00014秒遅れてしまい望ましくない可能性があります。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:315
msgid ""
"The Free only clock (``free_only``) solves it by only executing free events "
"during the interval and normal events are always executed like with the "
"default clock. For example, in the presence of a free event, a normal event "
"with a timeout of 0.001s still had a delay of 0.02406. So this clock, treats"
" free and normal events independently, with normal events always being fps "
"limited, but never the free events."
msgstr ""
"Free "
"onlyクロック（「free_only」）はその間にフリーイベントを実行するだけで解決して通常のイベントは常にデフォルトクロックのように実行されます。例えばフリーイベントが存在する場合、0.001秒のタイムアウトを伴う通常のイベントは、0.02406の遅延が存在していましいた。したがって、この時計は、freeイベントと通常イベントを独立して扱います。通常イベントは常にfpsに制限されていますがフリーイベントでは決してありません。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:323
msgid "Summary"
msgstr "Summary(概要)"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:325
msgid ""
"The kivy clock type to use can be set with the ``kivy_clock`` option the "
":mod:`~kivy.config`. If ``KIVY_CLOCK`` is present in the environment it "
"overwrites the config selection. Its possible values are as follows:"
msgstr ""
"使用するkivyのクロックタイプは、「kivy_clock」オプションの  :mod:`~kivy.config` で設定できます。 "
"「KIVY_CLOCK」が環境内に存在する場合は、configの設定を上書きします。可能な値は次のとおりです:"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:329
msgid ""
"When ``kivy_clock`` is ``default``, the normal clock, :class:`ClockBase`, "
"which limits callbacks to the maxfps quantization - is used."
msgstr ""
"「kivy_clock」が「default」の場合はコールバックをmaxfps の量子化に限定する通常のクロック :class:`ClockBase` "
"が使用されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:331
msgid ""
"When ``kivy_clock`` is ``interrupt``, a interruptible clock, "
":class:`ClockBaseInterrupt`, which doesn't limit any callbacks to the maxfps"
" - is used. Callbacks will be executed at any time."
msgstr ""
"「kivy_clock」が「interrupt」の場合はmaxfpsへのコールバックを制限しない割り込み可能なクロック "
":class:`ClockBaseInterrupt` が使用されます。コールバックはいつでも実行されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:334
msgid ""
"When ``kivy_clock`` is ``free_all``, a interruptible clock, "
":class:`ClockBaseFreeInterruptAll`, which doesn't limit any callbacks to the"
" maxfps in the presence of free events, but in their absence it limits "
"events to the fps quantization interval - is used."
msgstr ""
"「kivy_clock」が「free_all」の場合は割り込み可能なクロック   :class:`ClockBaseFreeInterruptAll` "
"は、フリーイベントの存在下ではmaxfpsへのコールバックを制限しませんが、フリーイベントが存在していない場合にはイベントをfpsの量子化間隔に制限します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock:338
msgid ""
"When ``kivy_clock`` is ``free_only``, a interruptible clock, "
":class:`ClockBaseFreeInterruptAll`, which treats free and normal events "
"independently; normal events are fps limited while free events are not - is "
"used."
msgstr ""
"「kivy_clock」が「free_only」の場合は割り込み可能なクロック \n"
" :class:`ClockBaseFreeInterruptAll` はフリーイベントと通常イベントを独立して処理します。通常のイベントではfpsが制限されてフリーイベントは使用されません"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.Clock:1
msgid "The kivy Clock instance. See module documentation for details."
msgstr "kivy Clockインスタンスです。詳細についてはモジュールのドキュメントを参照してください。"

#: ../../<autodoc>:1 ../../<autodoc>:1 ../../<autodoc>:1
msgid "ベースクラス: :class:`builtins.object`"
msgstr "ベースクラス: :class:`builtins.object`"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent:1
msgid ""
"A class that describes a callback scheduled with kivy's :attr:`Clock`. This "
"class is never created by the user; instead, kivy creates and returns an "
"instance of this class when scheduling a callback."
msgstr ""
"Kivy's  :attr:`Clock` "
"でスケジュールされたコールバックを記述するクラス。このクラスはユーザーによって決して作成されません。代わりにkivyはコールバックをスケジュールするときにこのクラスのインスタンスを作成して返却します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent:5
msgid ""
"An event can be triggered (scheduled) by calling it. If it's already "
"scheduled, nothing will happen, otherwise it'll be scheduled. E.g.::"
msgstr ""
"イベントは呼び出すことによってトリガー（スケジュール設定）を設定できます。すでにスケジュールされている場合は何も起こりませんがそれ以外の場合はスケジュールされます。例えば::"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent.cancel:1
msgid ""
"Cancels the callback if it was scheduled to be called. If not scheduled, "
"nothing happens."
msgstr "コールバックがスケジュールされている場合は、コールバックをキャンセルします。スケジュールされていない場合は何も起こりません。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent.clock:1
msgid "The :class:`CyClockBase` instance associated with the event."
msgstr "イベントに関連付けられた  :class:`CyClockBase` インスタンス。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent.get_callback:1
msgid ""
"Returns the callback associated with the event. Callbacks get stored with a "
"indirect ref so that it doesn't keep objects alive. If the callback is dead,"
" None is returned."
msgstr ""
"イベントに関連付けられたコールバックを返します。コールバックはオブジェクトを生き残らないように間接参照と一緒に格納されます。コールバックが停止している場合は、Noneが返却されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent.is_triggered:1
msgid ""
"Returns whether the event is scheduled to have its callback executed by the "
"kivy thread."
msgstr "イベントがkivyスレッドによってコールバックが実行されるようにスケジュールされているかどうかを返却します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent.loop:1
msgid "Whether this event repeats at intervals of :attr:`timeout`."
msgstr "このイベントが :attr:`timeout` の間隔で繰り返されるかどうか。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent.next:1
msgid "The next :class:`ClockEvent` in order they were scheduled."
msgstr "次の  :class:`ClockEvent`  がスケジュールされた順番で返されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent.prev:1
msgid "The previous :class:`ClockEvent` in order they were scheduled."
msgstr "前の :class:`ClockEvent` がスケジュールされた順番で返されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent.release:1
msgid "(internal method) Converts the callback into a indirect ref."
msgstr "(内部メソッド)コールバックを間接参照に変換します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent.tick:1
msgid "(internal method) Processes the event for the kivy thread."
msgstr "(内部メソッド)Kivyスレッドのイベントを処理します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockEvent.timeout:1
msgid "The duration after scheduling when the callback should be executed."
msgstr "コールバックを実行する予定の時間。"

#: ../../<autodoc>:1
msgid "ベースクラス: :class:`kivy._clock.ClockEvent`"
msgstr "ベースクラス: :class:`kivy._clock.ClockEvent`"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.FreeClockEvent:1
msgid ""
"The event returned by the ``Clock.XXX_free`` methods of "
":class:`CyClockBaseFree`. It stores whether the event was scheduled as a "
"free event."
msgstr ""
":class:`CyClockBaseFree` の ``Clock.XXX_free``  "
"メソッドによって返されたイベント。イベントがフリーイベントとしてスケジュールされたかどうかを格納します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.FreeClockEvent.free:1
msgid "Whether this event was scheduled as a free event."
msgstr "このイベントがフリーイベントとしてスケジュールされたかどうか。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase:1
msgid "The base clock object with event support."
msgstr "イベントをサポートするベースクロックオブジェクト。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.clock_resolution:1
msgid ""
"If the remaining time until the event timeout is less than "
":attr:`clock_resolution`, the clock will execute the callback even if it "
"hasn't exactly timed out."
msgstr ""
"イベントタイムアウトまでの残りの時間が :attr:`clock_resolution` "
"より小さい場合、クロックは正確にタイムアウトしていなくてもコールバックを実行します"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.clock_resolution:4
msgid ""
"If -1, the default, the resolution will be computed from config's "
"``maxfps``. Otherwise, the provided value is used. Defaults to -1."
msgstr ""
"デフォルトの-1の場合、解像度はconfigのmaxfpsから計算されます。それ以外の場合は、指定された値が使用されます。デフォルトは-1です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.create_trigger:1
msgid ""
"Create a Trigger event. Check module documentation for more information."
msgstr "トリガーイベントを作成します。詳細は、モジュールのマニュアルを参照してください。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.create_trigger:4
msgid ""
"A :class:`ClockEvent` instance. To schedule the callback of this instance, "
"you can call it."
msgstr ":class:`ClockEvent`  インスタンス。このインスタンスのコールバックをスケジュールすると呼び出すことができます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.create_trigger:13
msgid ""
"``interval`` has been added. If True, it create a event that is called every"
" <timeout> seconds similar to :meth:`schedule_interval`. Defaults to False."
msgstr ""
"「interval」が追加されました。 "
"Trueの場合はschedule_interval()と同様の<timeout>秒ごとに呼び出されるイベントが作成されます。デフォルトはFalseです。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.get_events:1
msgid "Returns the list of :class:`ClockEvent` instances currently scheduled."
msgstr "現在スケジュールされている :class:`ClockEvent` インスタンスのリストを返却します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.get_min_timeout:1
msgid ""
"Returns the remaining time since the start of the current frame for the "
"event with the smallest timeout."
msgstr "タイムアウトが最も小さいイベントの現在のフレームの開始からの残りの時間を返却します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.get_resolution:1
msgid ""
"Returns the minimum resolution the clock has. It's a function of "
":attr:`clock_resolution` and ``maxfps`` provided at the config."
msgstr ""
"クロックが持つ最小解像度を返します。これはconfigで提供される :attr:`clock_resolution` と「maxfps」の関数です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.max_iteration:1
msgid ""
"The maximum number of callback iterations at the end of the frame, before "
"the next frame. If more iterations occur, a warning is issued."
msgstr "フレームの最後、次のフレームの前のコールバックのイテレーションの最大回数。より多くのイテレーションが発生すると警告が発行されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.on_schedule:1
msgid ""
"Function that is called internally every time an event is triggered for this"
" clock. It takes the event as a parameter."
msgstr "クロックでイベントがトリガされるたびに内部的に呼び出される関数。このイベントはパラメータとして使用されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.schedule_interval:1
msgid "Schedule an event to be called every <timeout> seconds."
msgstr "<timeout>秒ごとに呼び出されるようにイベントをスケジュールします。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.schedule_interval:3
#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.schedule_once:4
msgid ""
"A :class:`ClockEvent` instance. As opposed to :meth:`create_trigger` which "
"only creates the trigger event, this method also schedules it."
msgstr ""
":class:`ClockEvent` インスタンストリガイベントのみを作成する :meth:`create_trigger`  "
"とは対照的に、このメソッドはそれをスケジュールします。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.schedule_once:1
msgid ""
"Schedule an event in <timeout> seconds. If <timeout> is unspecified or 0, "
"the callback will be called after the next frame is rendered."
msgstr ""
"<timeout>秒でイベントをスケジュールします。 "
"<timeout>が指定されていないか0の場合は次のフレームがレンダリングされた後にコールバックが呼び出されます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.schedule_once:10
msgid ""
"If the timeout is -1, the callback will be called before the next frame (at "
":meth:`tick_draw`)."
msgstr "タイムアウトが-1の場合、コールバックは次のフレームの前に呼び出されます( :meth:`tick_draw`)。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.unschedule:1
msgid "Remove a previously scheduled event."
msgstr "以前スケジュールされたイベントを削除します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.unschedule:16
msgid "`callback`: :class:`ClockEvent` or a callable."
msgstr "「コールバック」: :class:`ClockEvent` または呼び出し可能です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.unschedule:6
msgid ""
"If it's a :class:`ClockEvent` instance, then the callback associated with "
"this event will be canceled if it is scheduled."
msgstr ""
":class:`ClockEvent` インスタンスの場合はこのイベントに関連付けられたコールバックは、スケジュールされている場合はキャンセルされます。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.unschedule:10
msgid ""
"If it's a callable, then the callable will be unscheduled if it was "
"scheduled."
msgstr "呼び出し可能な場合で、呼び出し可能なものでスケジュールされていればスケジュールされません。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.unschedule:15
msgid ""
"Passing the callback function rather than the returned :class:`ClockEvent` "
"will result in a significantly slower unscheduling."
msgstr "返却された :class:`ClockEvent`ではなくコールバック関数を渡すと、スケジューリングが大幅に遅くなります"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.unschedule:21
msgid "`all`: bool"
msgstr "「all」: bool"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.unschedule:19
msgid ""
"If True and if `callback` is a callable, all instances of this callable will"
" be unscheduled (i.e. if this callable was scheduled multiple times). "
"Defaults to `True`."
msgstr ""
"値がTrueで「コールバック」がコール可能な場合、このコール可能なインスタンスはすべてスケジュールされません（つまり、このコール可能オブジェクトが複数回スケジュールされた場合）。デフォルトは「True」です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBase.unschedule:23
msgid ""
"The all parameter was added. Before, it behaved as if `all` was `True`."
msgstr "allパラメータが追加されました。以前は「all」が「True」であるかのように振る舞いました。"

#: ../../<autodoc>:1
msgid "ベースクラス: :class:`kivy._clock.CyClockBase`"
msgstr "ベースクラス: :class:`kivy._clock.CyClockBase`"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBaseFree:1
msgid ""
"A clock class that supports scheduling free events in addition to normal "
"events."
msgstr "通常のイベントに加えてフリーイベントのスケジューリングをサポートするクロッククラス。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBaseFree:4
msgid ""
"Each of the :meth:`~CyClockBase.create_trigger`, "
":meth:`~CyClockBase.schedule_once`, and "
":meth:`~CyClockBase.schedule_interval` methods, which create a normal event,"
" have a corresponding method for creating a free event."
msgstr ""
"通常のイベントを作成する :meth:`~CyClockBase.create_trigger` "
"、:meth:`~CyClockBase.schedule_once` 、および "
":meth:`~CyClockBase.schedule_interval` "
"メソッドにはそれぞれフリーイベントを作成するための対応するメソッドがあります。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBaseFree.create_trigger_free:1
msgid ""
"Similar to :meth:`~CyClockBase.create_trigger`, but instead creates a free "
"event."
msgstr " :meth:`~CyClockBase.create_trigger` に似ていますが、代わりにフリーイベントを作成します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBaseFree.get_min_free_timeout:1
msgid ""
"Returns the remaining time since the start of the current frame for the "
"*free* event with the smallest timeout."
msgstr "タイムアウトが最小の *フリー* イベントで現在のフレームの開始以降の残り時間を返します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBaseFree.schedule_interval_free:1
msgid ""
"Similar to :meth:`~CyClockBase.schedule_interval`, but instead creates a "
"free event."
msgstr " :meth:`~CyClockBase.schedule_interval と似ていますが、代わりにフリーイベントを作成します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.CyClockBaseFree.schedule_once_free:1
msgid ""
"Similar to :meth:`~CyClockBase.schedule_once`, but instead creates a free "
"event."
msgstr ":meth:`~CyClockBase.schedule_once` に似ていますが、代わりにフリーイベントを作成します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior:1
msgid "The base of the kivy clock."
msgstr "kivy clockのベースです。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.MIN_SLEEP:1
msgid ""
"The minimum time to sleep. If the remaining time is less than this, the "
"event loop will continuo"
msgstr "スリーブ時間の最小値です。残りの時間がこれよりも短い場合はイベントループは継続します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.frames:1
msgid ""
"Number of internal frames (not necessarily drawed) from the start of the "
"clock."
msgstr "クロックの開始から内部フレームの数（必ずしも描画されていない）です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.frames_displayed:1
msgid "Number of displayed frames from the start of the clock."
msgstr "クロックの開始から表示されるフレーム数です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.frametime:1
msgid "Time spent between the last frame and the current frame (in seconds)."
msgstr "最後のフレームと現在のフレームとの間の時間（単位は秒）です。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.get_boottime:1
msgid "Get the time in seconds from the application start."
msgstr "アプリケーションの開始からの時間を秒単位で取得します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.get_fps:1
msgid "Get the current average FPS calculated by the clock."
msgstr "クロックで計算された現在の平均FPSを取得します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.get_rfps:1
msgid ""
"Get the current \"real\" FPS calculated by the clock. This counter reflects "
"the real framerate displayed on the screen."
msgstr "クロックで計算された現在の「実際の」FPSを取得します。このカウンタは画面に表示される実際のフレームレートを反映します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.get_rfps:4
msgid ""
"In contrast to get_fps(), this function returns a counter of the number of "
"frames, not the average of frames per second."
msgstr "get_fps()とは対照的にこの関数は1秒あたりのフレームの平均ではなくフレーム数のカウンタを返します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.get_time:1
msgid "Get the last tick made by the clock."
msgstr "時計によって最後に行われたティックを取得します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.idle:1
msgid "(internal) waits here until the next frame."
msgstr "次のフレームまでここで(内部的に)待機します。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.tick:1
msgid ""
"Advance the clock to the next step. Must be called every frame. The default "
"clock has a tick() function called by the core Kivy framework."
msgstr ""
"時計を次のステップに進めます。すべてのフレームと呼ばれる必要があります。デフォルトクロックにはコアKivyフレームワークによって呼び出される "
"tick() 関数があります。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.tick_draw:1
msgid "Tick the drawing counter."
msgstr "Tickのカウンターにチェックを入れてください。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseBehavior.usleep:1
msgid "Sleeps for the number of microseconds."
msgstr "マイクロ秒の間スリープします。"

#: ../../<autodoc>:1
msgid "ベースクラス: :class:`kivy.clock.ClockBaseBehavior`"
msgstr "ベースクラス: :class:`kivy.clock.ClockBaseBehavior`"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseInterruptBehavior:1
msgid ""
"A kivy clock which can be interrupted during a frame to execute events."
msgstr "イベントを実行するためにフレーム中に中断できるkivyクロックです。"

#: ../../<autodoc>:1
msgid "ベースクラス: :class:`kivy.clock.ClockBaseInterruptBehavior`"
msgstr "ベースクラス: :class:`kivy.clock.ClockBaseInterruptBehavior`"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseInterruptFreeBehavior:1
msgid ""
"A base class for the clock that interrupts the sleep interval for free "
"events."
msgstr "フリーイベントのスリープ間隔を中断するクロックのベースクラス。"

#: ../../<autodoc>:1
msgid ""
"ベースクラス: :class:`kivy.clock.ClockBaseBehavior`, "
":class:`kivy._clock.CyClockBase`"
msgstr ""
"ベースクラス: :class:`kivy.clock.ClockBaseBehavior`, "
":class:`kivy._clock.CyClockBase`"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBase:1
msgid "The ``default`` kivy clock. See module for details."
msgstr "「default」のkivyクロック。詳細については、モジュールを参照してください。"

#: ../../<autodoc>:1
msgid ""
"ベースクラス: :class:`kivy.clock.ClockBaseInterruptBehavior`, "
":class:`kivy._clock.CyClockBase`"
msgstr ""
"ベースクラス: :class:`kivy.clock.ClockBaseInterruptBehavior`, "
":class:`kivy._clock.CyClockBase`"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseInterrupt:1
msgid "The ``interrupt`` kivy clock. See module for details."
msgstr "「interrupt」のkivyクロック。詳細についてはモジュールを参照してください。"

#: ../../<autodoc>:1 ../../<autodoc>:1
msgid ""
"ベースクラス: :class:`kivy.clock.ClockBaseInterruptFreeBehavior`, "
":class:`kivy._clock.CyClockBaseFree`"
msgstr ""
"ベースクラス: :class:`kivy.clock.ClockBaseInterruptFreeBehavior`, "
":class:`kivy._clock.CyClockBaseFree`"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseFreeInterruptAll:1
msgid "The ``free_all`` kivy clock. See module for details."
msgstr "undefined"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.ClockBaseFreeInterruptOnly:1
msgid "The ``free_only`` kivy clock. See module for details."
msgstr "「free_only」 kivyクロックです。 詳細についてはモジュールを参照してください。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.mainthread:1
msgid ""
"Decorator that will schedule the call of the function for the next available"
" frame in the mainthread. It can be useful when you use "
":class:`~kivy.network.urlrequest.UrlRequest` or when you do Thread "
"programming: you cannot do any OpenGL-related work in a thread."
msgstr ""
"メインスレッド内の次の使用可能なフレームの関数の呼び出しをスケジュールするデコレータです。  "
":class:`~kivy.network.urlrequest.UrlRequest` "
"を使用するときやスレッドプログラミングを行うときに便利です。スレッド内でOpenGL関連の作業を行うことはできません。"

#: ../../../../../../../../../appdata/local/programs/python/python35-32/lib/site-packages/kivy/clock.pydocstring
#: of kivy.clock.mainthread:6
msgid ""
"Please note that this method will return directly and no result can be "
"returned::"
msgstr "このメソッドは直接返却されるため、結果は返却されません::"
