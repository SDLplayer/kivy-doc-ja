# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-13 08:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: JUN OKAZAKI <okazakijun54392@gmail.com>, 2017\n"
"Language-Team: Japanese (Japan) (https://www.transifex.com/python_kivy_doc_ja/teams/74810/ja_JP/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sources/contribute-unittest.rst:2
msgid "Unit tests"
msgstr "Unit tests(翻訳済み)"

#: ../../sources/contribute-unittest.rst:4
msgid ""
"Tests are located in the kivy/tests folder. If you find a bug in Kivy, a "
"good thing to do can be to write a minimal case showing the issue and to ask"
" core devs if the behaviour shown is intended or a real bug. If you write "
"your code as a `unittest <http://docs.python.org/2/library/unittest.html>`_ "
", it will prevent the bug from coming back unnoticed in the future, and will"
" make Kivy a better, stronger project. Writing a unittest may be a really "
"good way to get familiar with Kivy while doing something useful."
msgstr ""
"テストはkivy / testsフォルダにあります。 "
"Kivyでバグを発見した場合は、問題を示す最小限のケースを記述して表示された動作が意図されているかどうかをコアデベロッパーに問い合わできます。`unittest"
" "
"<http://docs.python.org/2/library/unittest.html>`としてコードを書くとバグが将来気付かれずに戻ってくるのを防ぎ、Kivyをより良くより強力なプロジェクトにします。unittestを書くことは役立つことをしながらKivyに慣れるためには本当に良い方法なのかもしれません。"

#: ../../sources/contribute-unittest.rst:12
msgid "Unit tests are separated into two cases:"
msgstr "ユニットテストは2つのケースに分かれています："

#: ../../sources/contribute-unittest.rst:14
msgid ""
"Non graphical unit tests: these are standard unit tests that can run in a "
"console"
msgstr "非グラフィカルユニットテスト：これはコンソールで実行できる標準的なユニットテストです"

#: ../../sources/contribute-unittest.rst:16
msgid ""
"Graphical unit tests: these need a GL context, and work via image comparison"
msgstr "グラフィカルユニットテスト：これらはGLコンテキストが必要であり、画像比較を介して作業します"

#: ../../sources/contribute-unittest.rst:18
msgid ""
"To be able to run unit tests, you need to install nose "
"(http://code.google.com/p/python-nose/), and coverage "
"(http://nedbatchelder.com/code/coverage/). You can use easy_install for "
"that::"
msgstr ""
"単体テストを実行できるようにするには、nose（http://code.google.com/p/python-"
"nose/）とcoverage（http://nedbatchelder.com/code/coverage/）をインストールする必要があります。インストールするためにeasy_installを使うことができます："

#: ../../sources/contribute-unittest.rst:24
msgid "Then, in the kivy directory::"
msgstr "次にkivyディレクトリで："

#: ../../sources/contribute-unittest.rst:29
msgid "How it works"
msgstr "How it works(使い方)"

#: ../../sources/contribute-unittest.rst:31
msgid ""
"All the tests are located in `kivy/tests`, and the filename starts with "
"`test_<name>.py`. Nose will automatically gather all the files and classes "
"inside this folder, and use them to generate test cases."
msgstr ""
"すべてのテストは「kivy / tests」にあり、ファイル名は「test_ <name> "
".py」で始まります。noseは自動的にこのフォルダ内のすべてのファイルとクラスを収集し、テストケースを生成するために使用します。"

#: ../../sources/contribute-unittest.rst:35
msgid ""
"To write a test, create a file that respects the previous naming, then start"
" with this template::"
msgstr "テストを書くには、以前の命名を尊重したファイルを作成し、次にこのテンプレートで始めます："

#: ../../sources/contribute-unittest.rst:51
msgid ""
"Replace `XXX` with an appropriate name that covers your tests cases, then "
"replace 'YYY' with the name of your test. If you have any doubts, check how "
"the other tests have been written."
msgstr ""
"XXXをテストケースをカバーする適切な名前に置き換えて、「YYY」をテストの名前に置き換えます。疑問がある場合は他のテストがどのように書かれているかを確認してください。"

#: ../../sources/contribute-unittest.rst:55
msgid "Then, to execute them, just run::"
msgstr "実行するには、次のコマンドを実行します::"

#: ../../sources/contribute-unittest.rst:59
msgid "If you want to execute that file only, you can run::"
msgstr "そのファイルだけを実行したい場合は、以下を実行できます::"

#: ../../sources/contribute-unittest.rst:65
msgid "GL unit tests"
msgstr "GL unit tests"

#: ../../sources/contribute-unittest.rst:67
msgid ""
"GL unit test are more difficult. You must know that even if OpenGL is a "
"standard, the output/rendering is not. It depends on your GPU and the driver"
" used. For these tests, the goal is to save the output of the rendering at "
"frame X, and compare it to a reference image."
msgstr ""
"GLユニットテストはより困難です。 "
"OpenGLが標準であっても、出力/レンダリングは標準ではありません。それは使用しているGPUとドライバによって異なります。これらのテストの目的はフレームXでのレンダリングの出力を保存してリファレンス画像と比較することです。"

#: ../../sources/contribute-unittest.rst:72
msgid "Currently, images are generated at 320x240 pixels, in *png* format."
msgstr "現在、画像は320x240ピクセル（png形式）で生成されています。"

#: ../../sources/contribute-unittest.rst:76
msgid ""
"Currently, image comparison is done per-pixel. This means the reference "
"image that you generate will only be correct for your GPU/driver. If "
"somebody can implement image comparison with \"delta\" support, patches are "
"welcome :)"
msgstr ""
"現在、画像の比較はピクセルごとに行われます。これは、生成する参照画像がGPU /ドライバに対してのみ正しいことを意味します。誰かが "
"\"デルタ\"サポートで画像比較を実装できるのであれば、パッチは歓迎します:)"

#: ../../sources/contribute-unittest.rst:81
msgid "To execute GL unit tests, you need to create a directory::"
msgstr "GLユニットテストを実行するには、ディレクトリを作成する必要があります::"

#: ../../sources/contribute-unittest.rst:86
msgid ""
"The results directory will contain all the reference images and the "
"generated images. After the first execution, if the results directory is "
"empty, no comparison will be done. It will use the generated images as "
"reference. After the second execution, all the images will be compared to "
"the reference images."
msgstr ""
"resultsディレクトリには、すべてのリファレンスイメージと生成されたイメージが含まれます。最初の実行後、resultsディレクトリが空の場合、比較は行われません。生成された画像をリファレンスとして使用します。2回目の実行後、すべてのイメージがリファレンスイメージと比較されます。"

#: ../../sources/contribute-unittest.rst:92
msgid ""
"A html file is available to show the comparison before/after the test, and a"
" snippet of the associated unit test. It will be generated at:"
msgstr "htmlファイルを使用して、テストの前後の比較と関連ユニットテストのスニペットを表示できます。それは次の場所で生成されます："

#: ../../sources/contribute-unittest.rst:95
msgid "kivy/tests/build/index.html"
msgstr "kivy/tests/build/index.html"

#: ../../sources/contribute-unittest.rst:99
msgid ""
"The build directory is cleaned after each call to `make test`. If you don't "
"want that, just use nosetests command."
msgstr ""
"ビルドディレクトリはmake testの呼び出しのたびに消去されます。あなたがそれを望まないなら、nosetestsコマンドを使用してください。"

#: ../../sources/contribute-unittest.rst:103
msgid "Writing GL Unit tests"
msgstr "Writing GL Unit tests(GL Unit testの書き方)"

#: ../../sources/contribute-unittest.rst:105
msgid ""
"The idea is to create a root widget, as you would do in "
":meth:`~kivy.app.App.build`, or in :func:`kivy.base.runTouchApp`. You'll "
"give that root widget to a rendering function which will capture the output "
"in X frames."
msgstr ""
"このアイデアは、:meth:`~kivy.app.App.build`　や :func:`kivy.base.runTouchApp` のようにroot"
" widgetを作成することです。 root widgetでレンダリング関数に渡し、出力されたXフレームをキャプチャします。"

#: ../../sources/contribute-unittest.rst:110
msgid "Here is an example::"
msgstr "次に例を示します::"

#: ../../sources/contribute-unittest.rst:138
msgid ""
"Each call to `self.render` (or `r` in our example) will generate an image "
"named as follows::"
msgstr "「self.render」（またはこの例では「r」）を呼び出すたびに、次の名前の画像が生成されます::"

#: ../../sources/contribute-unittest.rst:143
msgid ""
"`r-call-count` represents the number of times that `self.render` is called "
"inside the test function."
msgstr "「r-call-count」は、「self.render」がテスト関数内で呼び出された回数を表します。"

#: ../../sources/contribute-unittest.rst:146
msgid "The reference images are named::"
msgstr "リファレンス画像の名前は次の通りです::"

#: ../../sources/contribute-unittest.rst:150
msgid "You can easily replace the reference image with a new one if you wish."
msgstr "必要に応じて、リファレンス画像を新しい画像に簡単に置き換えることができます。"

#: ../../sources/contribute-unittest.rst:154
msgid "Coverage reports"
msgstr "Coverage reports(Coverageレポート)"

#: ../../sources/contribute-unittest.rst:156
msgid ""
"Coverage is based on the execution of previous tests. Statistics on code "
"coverage are automatically calculated during execution. You can generate an "
"html report of the coverage with the command::"
msgstr ""
"カバレッジは以前のテストの実行に基づいています。コードカバレッジに関する統計は、実行中に自動的に計算されます。コマンドでカバレッジのhtmlレポートを生成することができます："

#: ../../sources/contribute-unittest.rst:162
msgid "Then, open `kivy/htmlcov/index.html` with your favorite web browser."
msgstr "次にお気に入りのウェブブラウザでkivy / htmlcov / index.htmlを開きます。"
