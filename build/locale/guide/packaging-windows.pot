# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.9.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-07-02 17:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/guide/packaging-windows.rst:2
msgid "Create a package for Windows"
msgstr ""

#: ../../source/guide/packaging-windows.rst:6
msgid "This document only applies for kivy ``1.9.1`` and greater."
msgstr ""

#: ../../source/guide/packaging-windows.rst:8
msgid "Packaging your application for the Windows platform can only be done inside the Windows OS. The following process has been tested on Windows with the Kivy **wheels** installation, see at the end for alternate installations."
msgstr ""

#: ../../source/guide/packaging-windows.rst:12
msgid "The package will be either 32 or 64 bits depending on which version of Python you ran it with."
msgstr ""

#: ../../source/guide/packaging-windows.rst:18
msgid "Requirements"
msgstr ""

#: ../../source/guide/packaging-windows.rst:20
msgid "Latest Kivy (installed as described in :ref:`installation_windows`)."
msgstr ""

#: ../../source/guide/packaging-windows.rst:21
msgid "PyInstaller 3.1+ (``pip install --upgrade pyinstaller``)."
msgstr ""

#: ../../source/guide/packaging-windows.rst:26
msgid "PyInstaller default hook"
msgstr ""

#: ../../source/guide/packaging-windows.rst:28
msgid "This section applies to PyInstaller (>= 3.1) that includes the kivy hooks. To overwrite the default hook the following examples need to be slightly modified. See :ref:`overwrite-win-hook`."
msgstr ""

#: ../../source/guide/packaging-windows.rst:33
msgid "Packaging a simple app"
msgstr ""

#: ../../source/guide/packaging-windows.rst:35
msgid "For this example, we'll package the **touchtracer** example project and embed a custom icon. The location of the kivy examples is, when using the wheels, installed to ``python\\\\share\\\\kivy-examples`` and when using the github source code installed as ``kivy\\\\examples``. We'll just refer to the full path leading to the examples as ``examples-path``. The touchtracer example is in ``examples-path\\\\demo\\\\touchtracer`` and the main file is named ``main.py``."
msgstr ""

#: ../../source/guide/packaging-windows.rst:41
msgid "Open your command line shell and ensure that python is on the path (i.e. ``python`` works)."
msgstr ""

#: ../../source/guide/packaging-windows.rst:42
msgid "Create a folder into which the packaged app will be created. For example create a ``TouchApp`` folder and `change to that directory <http://www.computerhope.com/cdhlp.htm>`_ with e.g. ``cd TouchApp``. Then type::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:48
msgid "You can also add an `icon.ico` file to the application folder in order to create an icon for the executable. If you don't have a .ico file available, you can convert your `icon.png` file to ico using the web app `ConvertICO <http://www.convertico.com>`_. Save the `icon.ico` in the touchtracer directory and type::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:55
msgid "For more options, please consult the `PyInstaller Manual <http://pythonhosted.org/PyInstaller/>`_."
msgstr ""

#: ../../source/guide/packaging-windows.rst:58
msgid "The spec file will be ``touchtracer.spec`` located in ``TouchApp``. Now we need to edit the spec file to add the dependencies hooks to correctly build the exe. Open the spec file with your favorite editor and add these lines at the beginning of the spec (assuming sdl2 is used, the default now)::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:65
msgid "Then, find ``COLLECT()`` and add the data for touchtracer (`touchtracer.kv`, `particle.png`, ...): Change the line to add a ``Tree()`` object, e.g. ``Tree('examples-path\\\\demo\\\\touchtracer\\\\')``. This Tree will search and add every file found in the touchtracer directory to your final package."
msgstr ""

#: ../../source/guide/packaging-windows.rst:70
msgid "To add the dependencies, before the first keyword argument in COLLECT add a Tree object for every path of the dependecies. E.g. ``*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)]`` so it'll look something like::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:83
msgid "Now we build the spec file in ``TouchApp`` with::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:87
msgid "The compiled package will be in the `TouchApp\\\\dist\\\\touchtracer` directory."
msgstr ""

#: ../../source/guide/packaging-windows.rst:90
msgid "Packaging a video app with gstreamer"
msgstr ""

#: ../../source/guide/packaging-windows.rst:92
msgid "Following we'll slightly modify the example above to package a app that uses gstreamer for video. We'll use the ``videoplayer`` example found at ``examples-path\\widgets\\videoplayer.py``. Create a folder somewhere called ``VideoPlayer`` and on the command line change your current directory to that folder and do::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:99
msgid "to create the ``gstvideo.spec`` file. Edit as above and this time include the gstreamer dependency as well::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:104
msgid "and add the ``Tree()`` to include the video files, e.g. ``Tree('examples-path\\\\widgets')`` as well as the gstreamer dependencies so it should look something like::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:116
msgid "Then build the spec file in ``VideoPlayer`` with::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:120
msgid "and you should find gstvideo.exe in ``VideoPlayer\\dist\\gstvideo``, which when run will play a video."
msgstr ""

#: ../../source/guide/packaging-windows.rst:125
msgid "If you're using Pygame and need PyGame in your packaging app, you'll have to add the following code to your spec file due to kivy issue #1638. After the imports add the following::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:141
msgid "Overwriting the default hook"
msgstr ""

#: ../../source/guide/packaging-windows.rst:144
msgid "Including/excluding video and audio and reducing app size"
msgstr ""

#: ../../source/guide/packaging-windows.rst:146
msgid "PyInstaller includes a hook for kivy that by default adds **all** the core modules used by kivy, e.g. audio, video, spelling etc (you still need to package the gstreamer dlls manually with ``Tree()`` - see the example above) and their dependencies. If the hook is not installed or to reduce app size some of these modules may be excluded, e.g. if no audio/video is used, with a alternative hook."
msgstr ""

#: ../../source/guide/packaging-windows.rst:152
msgid "Kivy provides the alternate hook at :func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath`. In addition, if and only if PyInstaller doesn't have the default hooks :func:`~kivy.tools.packaging.pyinstaller_hooks.runtime_hooks` must also be provided. When overwriting the hook, the latter one typically is not required to be overwritten."
msgstr ""

#: ../../source/guide/packaging-windows.rst:158
msgid "The alternate :func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath` hook does not include any of the kivy providers. To add them, they have to be added with :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal` or :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all`. See their documentation and :mod:`~kivy.tools.packaging.pyinstaller_hooks` for more details. But essentially, :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_all` add all the providers like in the default hook while :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal` only adds those that are loaded when the app is run. Each method provides a list of hidden kivy imports and excluded imports that can be passed on to ``Analysis``."
msgstr ""

#: ../../source/guide/packaging-windows.rst:169
msgid "One can also generate a alternate hook which literally lists every kivy provider module and those not required can be commented out. See :mod:`~kivy.tools.packaging.pyinstaller_hooks`."
msgstr ""

#: ../../source/guide/packaging-windows.rst:173
msgid "To use the the alternate hooks with the examples above modify as following to add the hooks with ``hookspath()`` and ``runtime_hooks`` (if required) and ``**get_deps_minimal()`` or ``**get_deps_all()`` to specify the providers."
msgstr ""

#: ../../source/guide/packaging-windows.rst:177
msgid "For example, add the import statement ``from kivy.tools.packaging.pyinstaller_hooks import  get_deps_minimal, get_deps_all, hookspath, runtime_hooks`` and then modify ``Analysis`` as follows::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:189
msgid "to include everything like the default hook. Or::"
msgstr ""

#: ../../source/guide/packaging-windows.rst:198
msgid "e.g. to exclude the audio and video providers and for the other core modules only use those loaded."
msgstr ""

#: ../../source/guide/packaging-windows.rst:201
msgid "The key points is to provide the alternate :func:`~kivy.tools.packaging.pyinstaller_hooks.hookspath` which does not list by default all the kivy providers and instead manually to hiddenimports add the required providers while removing the undesired ones (audio and video in this example) with :func:`~kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal`."
msgstr ""

#: ../../source/guide/packaging-windows.rst:209
msgid "Alternate installations"
msgstr ""

#: ../../source/guide/packaging-windows.rst:211
msgid "The previous examples used e.g. ``*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins + gstreamer.dep_bins)],`` to make PyInstaller add all the dlls used by these dependencies. If kivy was not installed using the wheels method these commands will not work and e.g. ``kivy.deps.sdl2`` will fail to import. Instead, one must find the location of these dlls and manually pass them to the ``Tree`` class in a similar fashion as the example."
msgstr ""

